)]}'
{"version":3,"file":"/packages/iron-router.js","sources":["iron-router/lib/utils.js","iron-router/lib/route.js","iron-router/lib/route_controller.js","iron-router/lib/router.js","iron-router/lib/client/location.js","iron-router/lib/client/page_manager.js","iron-router/lib/client/router.js","iron-router/lib/client/default_layout.html","iron-router/lib/client/route_controller.js","iron-router/lib/client/helpers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,sD;AACA,G;;AAEA,W;;AAEA,G;AACA,mD;AACA,G;;AAEA,4B;AACA,oC;AACA,kB;AACA,yC;AACA,kB;AACA,M;AACA,gB;AACA,E;;AAEA,G;AACA,8E;AACA,+E;AACA,e;AACA,E;AACA,Y;AACA,uD;AACA,+D;AACA,E;AACA,qC;AACA,G;;AAEA,6C;AACA,6B;AACA,W;AACA,U;;AAEA,gC;AACA,kC;AACA,iB;AACA,4C;AACA,0B;AACA,e;AACA,yB;AACA,K;AACA,U;AACA,sB;AACA,G;;AAEA,uD;AACA,a;AACA,E;;AAEA,4C;AACA,+B;AACA,6B;AACA,E;;AAEA,G;AACA,uE;AACA,4E;AACA,+E;AACA,yD;AACA,G;;AAEA,2C;AACA,kD;AACA,4E;AACA,G;AACA,mD;AACA,6E;;AAEA,2B;AACA,0C;AACA,+B;AACA,G;;AAEA,oB;AACA,6B;AACA,G;;AAEA,oC;AACA,+B;AACA,qC;AACA,e;AACA,E;;AAEA,gC;AACA,W;AACA,c;AACA,kD;AACA,iB;AACA,M;AACA,e;AACA,E;;AAEA,+B;AACA,0B;AACA,wB;AACA,M;AACA,+C;AACA,E;;AAEA,sE;AACA,6B;AACA,uB;AACA,Q;AACA,kC;AACA,8B;AACA,G;;AAEA,mC;AACA,oD;AACA,K;AACA,E;;AAEA,+C;AACA,iB;AACA,gB;AACA,qB;;AAEA,0B;AACA,gC;;AAEA,sD;AACA,yC;AACA,Q;AACA,+B;AACA,qE;AACA,wE;AACA,K;AACA,G;;AAEA,iC;;AAEA,kD;;AAEA,oD;AACA,qD;AACA,wD;AACA,I;;AAEA,mB;AACA,qC;AACA,G;;AAEA,sC;AACA,kE;;AAEA,8C;;AAEA,qB;AACA,E;;AAEA,G;AACA,6C;AACA,E;AACA,2E;AACA,2E;AACA,G;;AAEA,0C;AACA,iB;AACA,yB;AACA,E;;AAEA,wC;AACA,iB;AACA,iD;AACA,E;;AAEA,mC;AACA,gE;AACA,E;;AAEA,iC;AACA,oB;AACA,+C;AACA,kC;AACA,c;AACA,E;;AAEA,oC;AACA,iC;AACA,U;AACA,yC;AACA,kB;AACA,mD;AACA,iB;AACA,G;;AAEA,c;AACA,E;;;;;;;;;;;;;;;;;;;AC/LA,E;AACA,6E;AACA,+E;AACA,6E;AACA,kE;AACA,G;;AAEA,0C;AACA,W;;AAEA,6C;;AAEA,gC;AACA,iE;;AAEA,4B;AACA,mC;;AAEA,yC;AACA,sC;;AAEA,uB;AACA,2B;;AAEA,2E;AACA,gD;;AAEA,mB;AACA,yC;AACA,uC;;AAEA,8C;AACA,uC;AACA,M;AACA,2B;;AAEA,iB;AACA,E;;AAEA,mB;AACA,qB;;AAEA,K;AACA,uB;AACA,I;AACA,qB;AACA,iB;AACA,K;;AAEA,wB;AACA,mB;AACA,Y;AACA,+B;;AAEA,mB;;AAEA,8C;AACA,kC;AACA,Y;AACA,8B;AACA,gC;AACA,2C;AACA,iC;AACA,4B;AACA,iB;AACA,iD;AACA,kE;AACA,iE;AACA,gC;AACA,qB;AACA,uC;AACA,qB;AACA,uC;AACA,+B;AACA,wE;AACA,iC;AACA,W;AACA,S;AACA,oC;AACA,gC;AACA,M;AACA,2E;AACA,K;;AAEA,gB;AACA,I;;AAEA,K;AACA,0E;AACA,8C;AACA,I;AACA,yB;AACA,oB;AACA,gB;AACA,K;;AAEA,2B;AACA,2B;;AAEA,mB;AACA,2B;AACA,mB;AACA,wB;AACA,W;AACA,c;;AAEA,W;AACA,oG;;AAEA,mD;AACA,wB;AACA,wE;AACA,gB;AACA,4D;AACA,mC;AACA,Y;AACA,2B;AACA,K;;AAEA,2B;;AAEA,qC;AACA,oB;AACA,8C;;AAEA,qC;;AAEA,sB;AACA,6D;AACA,4C;AACA,kE;AACA,S;AACA,K;;AAEA,kB;AACA,I;;AAEA,kC;AACA,sC;;AAEA,oC;;AAEA,6C;AACA,sE;;AAEA,sC;AACA,wD;;AAEA,+B;AACA,wB;;AAEA,gB;AACA,I;;AAEA,K;AACA,0D;AACA,I;AACA,yB;AACA,uB;AACA,gB;AACA,K;AACA,yB;AACA,kD;AACA,I;;AAEA,yB;AACA,kD;AACA,I;;AAEA,uC;AACA,a;AACA,sB;AACA,c;AACA,yB;AACA,gC;AACA,Y;AACA,a;AACA,gC;;AAEA,4B;AACA,0B;AACA,0B;AACA,wB;;AAEA,iC;AACA,4E;AACA,Y;AACA,8B;AACA,iB;AACA,iD;AACA,2E;AACA,gC;AACA,gC;AACA,0D;;AAEA,8C;AACA,yB;AACA,yC;AACA,qC;AACA,6H;AACA,qB;AACA,kI;AACA,a;;AAEA,qE;AACA,mF;AACA,iD;AACA,yB;AACA,uC;AACA,W;AACA,S;AACA,iB;AACA,gB;AACA,4B;AACA,+D;AACA,8B;AACA,6E;AACA,+B;AACA,uE;AACA,a;;AAEA,6D;AACA,oE;AACA,iD;AACA,yB;AACA,W;AACA,U;;AAEA,8B;AACA,4D;AACA,uE;AACA,qB;;AAEA,kC;AACA,qC;AACA,O;;AAEA,iB;AACA,gD;AACA,uB;AACA,iD;AACA,O;AACA,K;;AAEA,yE;AACA,4D;AACA,oE;;AAEA,yC;AACA,I;;AAEA,oC;AACA,yC;AACA,I;;AAEA,mC;AACA,0C;AACA,wB;AACA,wC;AACA,uC;AACA,I;;AAEA,2C;AACA,oB;AACA,e;AACA,uB;AACA,kB;AACA,c;AACA,kB;;AAEA,0C;AACA,mC;AACA,gC;;AAEA,0C;AACA,0C;AACA,8C;AACA,wB;AACA,sD;AACA,O;;AAEA,wB;AACA,M;;AAEA,8E;AACA,2C;AACA,yC;AACA,2C;AACA,iD;AACA,8C;AACA,iB;AACA,kB;AACA,0B;AACA,+B;AACA,O;AACA,I;AACA,wD;AACA,0B;AACA,qD;AACA,0D;AACA,gD;AACA,wB;AACA,K;;AAEA,0E;AACA,0B;;AAEA,oB;AACA,yE;;AAEA,4B;AACA,kD;AACA,0B;AACA,O;AACA,K;;AAEA,8D;AACA,wC;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC/TA,+E;AACA,yB;AACA,+E;;AAEA,G;AACA,oD;AACA,G;;AAEA,0C;AACA,kB;;AAEA,yC;;AAEA,kC;AACA,oD;AACA,I;;AAEA,+B;AACA,6B;AACA,2B;AACA,qC;AACA,yC;AACA,8C;AACA,kB;;AAEA,6C;AACA,iD;AACA,+C;AACA,iD;AACA,E;;AAEA,iC;AACA,mC;AACA,E;AACA,uC;AACA,+B;AACA,mC;;AAEA,iD;AACA,qB;;AAEA,yB;AACA,gF;AACA,M;AACA,6D;AACA,uD;AACA,M;;AAEA,iE;AACA,4C;AACA,sB;AACA,wE;;AAEA,sF;;AAEA,oD;AACA,uB;AACA,c;AACA,sB;AACA,K;AACA,I;;AAEA,oB;AACA,uC;AACA,I;;AAEA,uB;AACA,uC;AACA,I;;AAEA,oB;AACA,wB;AACA,G;AACA,E;;AAEA,+B;AACA,K;AACA,qC;AACA,I;AACA,yE;AACA,K;;AAEA,iC;AACA,iE;AACA,uB;AACA,M;AACA,Q;AACA,8E;AACA,mB;;AAEA,wB;AACA,uD;AACA,8C;;AAEA,mB;AACA,iD;AACA,kC;AACA,a;AACA,O;AACA,uC;AACA,6C;AACA,iC;AACA,S;AACA,O;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACzGA,+E;AACA,gB;AACA,+E;AACA,iC;AACA,kB;AACA,E;AACA,0B;;AAEA,K;AACA,oE;AACA,6B;AACA,I;AACA,gB;AACA,K;AACA,mB;AACA,E;AACA,yB;AACA,kF;AACA,E;;AAEA,8D;;AAEA,wB;AACA,0B;;AAEA,K;AACA,4E;AACA,wE;AACA,I;AACA,4B;AACA,yB;AACA,gB;AACA,K;AACA,E;AACA,iC;AACA,oB;AACA,I;AACA,sC;AACA,oC;AACA,I;AACA,4C;AACA,kD;AACA,+B;AACA,kE;AACA,mC;AACA,W;AACA,Q;AACA,kC;AACA,O;AACA,O;AACA,I;AACA,gB;AACA,I;;;AAGA,K;AACA,I;AACA,kE;AACA,iF;AACA,I;AACA,wE;AACA,uE;AACA,6C;AACA,yB;AACA,gB;AACA,I;AACA,K;AACA,E;AACA,0C;AACA,2B;;AAEA,qB;AACA,iD;AACA,uB;AACA,qD;AACA,M;AACA,iE;AACA,I;AACA,gB;AACA,I;AACA,E;AACA,iC;AACA,+C;AACA,I;;AAEA,mC;AACA,iD;AACA,I;AACA,E;AACA,kC;AACA,gD;AACA,I;AACA,E;AACA,mC;AACA,iD;AACA,I;AACA,E;AACA,K;AACA,I;AACA,uE;AACA,wD;AACA,I;AACA,wE;AACA,sE;AACA,0D;AACA,gB;AACA,I;AACA,K;AACA,I;AACA,kC;AACA,mB;AACA,I;AACA,oD;AACA,iC;AACA,M;AACA,4D;AACA,e;AACA,M;AACA,0D;AACA,e;AACA,M;AACA,4B;AACA,O;AACA,I;AACA,iB;AACA,I;AACA,E;;AAEA,K;AACA,+E;AACA,+C;AACA,I;AACA,a;AACA,8B;AACA,4B;AACA,S;AACA,I;AACA,0B;AACA,0B;AACA,iB;AACA,K;;AAEA,sB;AACA,kC;AACA,6D;AACA,kB;AACA,gB;AACA,I;;AAEA,K;AACA,+E;AACA,iE;AACA,I;AACA,+C;AACA,iE;AACA,oB;AACA,gB;AACA,K;;AAEA,mC;AACA,c;;AAEA,mE;AACA,I;AACA,iC;AACA,sB;AACA,Q;AACA,6C;;AAEA,8B;AACA,4B;AACA,iB;AACA,I;;AAEA,+C;AACA,uC;AACA,qB;AACA,4I;AACA,gD;AACA,I;;AAEA,8C;AACA,uC;AACA,sB;AACA,yI;AACA,+C;AACA,I;;AAEA,0C;AACA,mB;AACA,4B;AACA,a;AACA,kB;AACA,qD;AACA,c;;AAEA,sB;AACA,0B;;AAEA,mB;AACA,mD;AACA,O;;AAEA,6B;AACA,mC;AACA,iD;;AAEA,4D;AACA,iC;AACA,c;AACA,e;AACA,O;AACA,K;;AAEA,W;AACA,I;;AAEA,kC;AACA,2C;AACA,I;;AAEA,yC;AACA,mD;AACA,I;;AAEA,6C;AACA,sE;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACpOA,8B;AACA,mB;AACA,2E;AACA,sD;AACA,0D;AACA,oB;AACA,2D;AACA,E;;AAEA,sB;AACA,2B;AACA,0D;AACA,qB;AACA,+C;;AAEA,kD;AACA,+D;AACA,kB;AACA,W;;AAEA,4C;AACA,W;AACA,E;AACA,qC;AACA,6B;AACA,W;AACA,E;AACA,6B;AACA,gB;AACA,W;AACA,E;AACA,iC;AACA,wC;AACA,W;AACA,E;AACA,kE;AACA,0C;AACA,qB;AACA,yB;AACA,C;;AAEA,yB;AACA,+E;AACA,E;AACA,a;AACA,kB;AACA,C;;AAEA,kB;;AAEA,wB;AACA,2B;AACA,E;;AAEA,2C;AACA,sB;AACA,gC;AACA,G;AACA,kC;AACA,E;AACA,qB;AACA,8B;AACA,G;AACA,E;;AAEA,mC;AACA,kD;AACA,E;;AAEA,6C;AACA,qC;AACA,oC;AACA,E;;AAEA,gC;AACA,e;AACA,sB;AACA,E;;AAEA,iC;AACA,e;AACA,2B;AACA,E;;AAEA,4C;AACA,0B;;AAEA,kC;;AAEA,wB;AACA,e;AACA,Q;AACA,8B;AACA,sB;AACA,uC;AACA,G;;AAEA,uC;AACA,2B;AACA,sC;AACA,2B;AACA,gC;AACA,yD;AACA,M;AACA,sD;;AAEA,oC;AACA,kB;AACA,E;;AAEA,mC;AACA,2C;AACA,gC;AACA,0B;AACA,6B;AACA,C;;AAEA,uD;AACA,gB;AACA,8B;AACA,E;AACA,wB;AACA,yC;AACA,M;AACA,0B;AACA,E;;AAEA,0D;AACA,gB;AACA,8B;AACA,E;AACA,2B;AACA,4C;AACA,M;AACA,0B;AACA,E;;AAEA,qC;AACA,uC;AACA,8D;AACA,E;;AAEA,uC;AACA,wC;AACA,6D;AACA,E;;AAEA,kC;AACA,qB;AACA,W;;AAEA,4B;AACA,wB;AACA,E;AACA,wD;AACA,6B;AACA,8E;AACA,mE;AACA,6E;AACA,6D;AACA,2B;AACA,qG;AACA,E;;AAEA,iC;AACA,8B;AACA,yB;AACA,E;;AAEA,qB;;;;;;;;;;;;;;;;;;;ACzKA,4B;AACA,yC;;AAEA,0D;AACA,6B;AACA,oB;AACA,8B;AACA,8B;AACA,qB;AACA,qB;AACA,M;AACA,wE;AACA,E;;AAEA,gD;AACA,6B;AACA,gB;AACA,+B;AACA,yE;AACA,E;;AAEA,oC;AACA,kC;AACA,8B;AACA,E;;AAEA,yB;AACA,yB;AACA,yC;AACA,a;;AAEA,wB;AACA,wB;AACA,I;;AAEA,oB;AACA,uB;AACA,uB;AACA,I;;AAEA,4B;AACA,uB;AACA,4C;AACA,G;AACA,E;;AAEA,2B;AACA,4C;AACA,gC;AACA,kC;AACA,kC;AACA,oB;AACA,E;;AAEA,yB;AACA,2B;;AAEA,gC;AACA,oB;AACA,sC;AACA,iC;AACA,kC;AACA,wC;;AAEA,+C;AACA,+B;AACA,0B;AACA,O;;AAEA,4B;AACA,I;;AAEA,wC;AACA,oB;;AAEA,0B;;AAEA,0E;AACA,wE;AACA,oE;;AAEA,gF;AACA,gF;AACA,6E;AACA,4E;AACA,+E;AACA,6E;AACA,oB;AACA,8B;AACA,mC;AACA,+C;AACA,iB;;AAEA,+B;AACA,+B;AACA,oI;AACA,c;AACA,6J;;AAEA,sC;AACA,+B;AACA,4C;AACA,gC;AACA,c;AACA,kC;AACA,S;AACA,S;AACA,O;;AAEA,6C;AACA,I;;AAEA,8B;AACA,0C;AACA,I;;AAEA,4B;AACA,wB;AACA,I;;AAEA,wB;AACA,2B;AACA,I;;AAEA,wB;AACA,oB;AACA,Y;AACA,wC;AACA,iB;;AAEA,iC;AACA,qB;;AAEA,yC;AACA,+C;AACA,O;AACA,M;AACA,I;;AAEA,mC;AACA,oB;;AAEA,4B;;AAEA,6E;AACA,6D;AACA,6B;;;AAGA,sC;AACA,2E;AACA,6D;AACA,uF;AACA,kB;AACA,S;;AAEA,gC;AACA,mC;AACA,oD;;AAEA,mC;AACA,O;AACA,I;;AAEA,6B;AACA,oB;;AAEA,0C;AACA,0D;AACA,iC;AACA,mC;AACA,oD;AACA,iC;AACA,O;;AAEA,gB;AACA,I;;AAEA,4C;AACA,oB;AACA,wD;;AAEA,sD;AACA,mB;AACA,O;;AAEA,2D;;AAEA,yC;AACA,2B;AACA,O;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AChMA,G;AACA,sB;AACA,E;AACA,sB;AACA,wB;AACA,sB;AACA,G;;AAEA,yC;AACA,K;AACA,iB;AACA,8B;AACA,2E;AACA,0E;AACA,W;AACA,K;;AAEA,mC;AACA,oB;;AAEA,8D;;AAEA,4B;;AAEA,iC;;AAEA,O;AACA,+E;AACA,wE;AACA,wB;AACA,M;AACA,mB;AACA,O;AACA,mC;;AAEA,O;AACA,gD;AACA,M;AACA,mB;AACA,O;AACA,8C;;AAEA,O;AACA,kE;AACA,kD;AACA,Q;AACA,oB;AACA,Q;AACA,kC;;AAEA,gC;AACA,8B;AACA,8C;AACA,4B;AACA,6C;AACA,uB;AACA,S;AACA,O;AACA,I;;AAEA,K;AACA,6E;AACA,2E;AACA,I;AACA,iD;AACA,iF;AACA,8B;AACA,gB;AACA,K;;AAEA,4B;AACA,wC;AACA,qC;AACA,U;AACA,mC;AACA,qC;AACA,K;AACA,I;;AAEA,gC;AACA,iC;AACA,I;;AAEA,wC;AACA,yC;AACA,I;;AAEA,4C;AACA,6C;AACA,I;;AAEA,4B;AACA,6B;AACA,I;;AAEA,wB;AACA,gC;AACA,I;;AAEA,kC;AACA,oB;AACA,sD;;AAEA,0D;;AAEA,+D;AACA,oC;AACA,4D;AACA,a;AACA,K;;AAEA,0C;AACA,iC;AACA,mC;AACA,Q;AACA,oC;AACA,sC;AACA,sC;AACA,Q;AACA,yB;AACA,iB;AACA,Q;AACA,kC;AACA,2B;AACA,W;AACA,S;AACA,M;;AAEA,gC;AACA,iD;;AAEA,yC;;AAEA,iC;AACA,oC;AACA,8D;AACA,Y;AACA,2B;AACA,K;;AAEA,gD;AACA,2B;AACA,oC;AACA,K;AACA,I;;AAEA,K;AACA,+E;AACA,qE;AACA,I;AACA,c;AACA,I;AACA,8C;AACA,2D;AACA,I;AACA,oC;AACA,mC;AACA,4B;AACA,oC;AACA,gB;AACA,K;;AAEA,mD;AACA,6B;AACA,a;AACA,Y;AACA,kB;AACA,kB;AACA,2B;AACA,gC;AACA,gC;AACA,6C;AACA,+B;AACA,4B;AACA,W;AACA,Q;;AAEA,yC;AACA,6B;AACA,uB;AACA,+D;AACA,wE;AACA,yE;AACA,yE;AACA,e;AACA,yC;AACA,Y;AACA,2C;AACA,qE;AACA,yC;AACA,sD;AACA,iC;AACA,K;AACA,I;;AAEA,K;AACA,4E;AACA,+E;AACA,wE;AACA,I;AACA,uC;AACA,gB;AACA,K;;AAEA,uB;AACA,2B;AACA,qC;AACA,I;;AAEA,K;AACA,0E;AACA,8E;AACA,mB;AACA,I;AACA,gB;AACA,K;;AAEA,2B;AACA,oB;AACA,yC;AACA,2B;AACA,O;AACA,oC;AACA,I;;;AAGA,K;AACA,2E;AACA,yD;AACA,I;AACA,gB;AACA,K;;AAEA,sB;AACA,oB;;AAEA,+B;;AAEA,0B;AACA,I;AACA,+B;AACA,mB;AACA,oC;AACA,iE;AACA,O;AACA,I;;AAEA,K;AACA,yE;AACA,I;AACA,gB;AACA,K;;AAEA,qB;AACA,2B;;AAEA,kC;AACA,uC;AACA,I;;AAEA,K;AACA,sE;AACA,I;AACA,gB;AACA,K;AACA,yC;AACA,gB;AACA,2B;AACA,I;AACA,E;AACA,K;AACA,mE;AACA,0B;AACA,4E;AACA,yC;AACA,+E;AACA,I;AACA,gB;AACA,K;AACA,6C;AACA,6C;AACA,kB;AACA,6B;AACA,+C;AACA,kD;AACA,sD;AACA,Y;AACA,wE;AACA,K;AACA,G;AACA,G;;AAEA,G;AACA,uD;AACA,E;AACA,c;AACA,kB;AACA,G;;AAEA,0B;;AAEA,qB;AACA,2D;AACA,6E;AACA,E;AACA,oD;AACA,yD;AACA,iC;AACA,C;;;;;;;;;;;;;;;;;;ACpTA,+G;;;;;;;;;;;;;;;;;;;ACAA,+E;AACA,c;AACA,+E;AACA,wB;AACA,kC;AACA,e;AACA,E;;AAEA,sB;AACA,uB;AACA,2B;AACA,I;;AAEA,sB;AACA,oB;AACA,I;;AAEA,2B;AACA,oB;AACA,+B;AACA,+B;AACA,mB;AACA,O;AACA,I;;AAEA,sB;AACA,oB;;AAEA,W;AACA,a;;AAEA,iC;;AAEA,e;AACA,I;;AAEA,sB;AACA,gD;AACA,4B;AACA,O;AACA,G;AACA,E;;AAEA,+E;AACA,sB;AACA,+E;AACA,+B;AACA,kB;AACA,wE;AACA,uB;AACA,uB;AACA,G;AACA,E;;AAEA,kD;AACA,kB;AACA,4B;AACA,qD;AACA,iC;AACA,uC;AACA,wB;AACA,gB;AACA,G;AACA,E;;AAEA,iD;AACA,kB;;AAEA,sB;AACA,+B;AACA,wC;AACA,0B;AACA,kB;AACA,K;AACA,G;AACA,E;;AAEA,6C;AACA,qE;AACA,E;;AAEA,+E;AACA,qB;AACA,+E;AACA,qD;AACA,4B;AACA,iE;;AAEA,oB;;AAEA,oC;AACA,sD;AACA,M;;AAEA,wD;AACA,0D;AACA,kC;AACA,6E;AACA,sD;AACA,sD;AACA,I;AACA,M;AACA,2E;AACA,0E;AACA,2B;AACA,M;AACA,yB;AACA,yC;AACA,U;AACA,M;AACA,kC;AACA,6B;AACA,2D;AACA,S;AACA,U;AACA,M;AACA,yB;AACA,gE;AACA,O;AACA,O;AACA,oB;AACA,iD;AACA,0C;;AAEA,kC;AACA,I;;AAEA,sB;AACA,kC;AACA,I;;AAEA,K;AACA,gF;AACA,wB;AACA,I;AACA,gB;AACA,K;;AAEA,mC;AACA,gB;AACA,uE;AACA,I;;AAEA,K;AACA,6E;AACA,4E;AACA,yE;AACA,Y;AACA,I;AACA,a;AACA,I;AACA,uB;AACA,kE;AACA,4C;AACA,O;AACA,I;AACA,wB;AACA,gB;AACA,K;;AAEA,uB;;AAEA,uB;;AAEA,K;AACA,mC;AACA,I;AACA,4B;AACA,gB;AACA,K;;AAEA,iB;;AAEA,K;AACA,0E;AACA,0E;AACA,c;AACA,I;AACA,4B;AACA,gB;AACA,K;;AAEA,wB;;AAEA,K;AACA,qE;AACA,mE;AACA,I;AACA,4B;AACA,gB;AACA,K;;AAEA,yB;;AAEA,K;AACA,wE;AACA,e;AACA,I;AACA,4B;AACA,gB;AACA,K;;AAEA,W;;AAEA,wB;AACA,gD;AACA,I;;AAEA,4B;AACA,6C;AACA,I;;AAEA,e;;AAEA,I;AACA,yE;AACA,6E;AACA,8C;AACA,K;;AAEA,wD;AACA,oB;;AAEA,gC;AACA,wB;;AAEA,c;AACA,2B;AACA,4B;AACA,uB;AACA,sC;AACA,yB;AACA,W;AACA,S;AACA,Q;AACA,S;;AAEA,yD;AACA,qC;AACA,I;;AAEA,K;AACA,gF;AACA,+D;AACA,I;AACA,K;;AAEA,wC;AACA,W;AACA,iB;AACA,e;AACA,oB;;AAEA,2C;AACA,iC;AACA,gC;AACA,uC;AACA,O;AACA,M;;AAEA,gC;AACA,4D;AACA,yB;AACA,M;AACA,0B;AACA,Y;AACA,8B;AACA,sB;AACA,2D;AACA,2B;AACA,K;AACA,I;AACA,E;AACA,8B;AACA,4B;AACA,oB;AACA,I;AACA,uD;AACA,6B;AACA,O;AACA,I;;AAEA,kC;AACA,mD;AACA,I;;AAEA,oB;AACA,oB;AACA,oC;AACA,6E;;AAEA,wB;AACA,gG;;AAEA,yB;;AAEA,8B;;AAEA,oE;AACA,qE;AACA,+E;AACA,qE;AACA,2B;;AAEA,M;AACA,8E;AACA,+E;AACA,4E;AACA,O;AACA,qE;AACA,2E;AACA,Q;;AAEA,kC;;AAEA,wC;;AAEA,mC;AACA,6B;AACA,oC;AACA,kB;AACA,qC;AACA,O;;AAEA,uB;AACA,8B;AACA,a;AACA,K;;AAEA,mD;AACA,sB;;AAEA,kC;AACA,4B;AACA,+B;AACA,O;;AAEA,8B;AACA,4B;AACA,I;;AAEA,2B;AACA,+D;AACA,2E;AACA,kC;AACA,I;;AAEA,uB;AACA,kB;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC9VA,iB;AACA,8E;;AAEA,gC;AACA,uB;AACA,oB;AACA,K;;AAEA,iC;AACA,6C;;AAEA,2C;AACA,mB;AACA,gB;AACA,O;AACA,K;;AAEA,6E;AACA,gC;AACA,uB;AACA,oB;AACA,K;;AAEA,iC;AACA,6C;;AAEA,0C;AACA,mB;AACA,gB;AACA,O;AACA,K;;AAEA,gE;AACA,sD;AACA,K;;AAEA,mE;AACA,4B;AACA,K;;AAEA,wD;AACA,kC;AACA,2B;AACA,qC;AACA,2B;AACA,4B;AACA,kC;;AAEA,2C;AACA,mB;AACA,mB;AACA,O;;AAEA,6D;AACA,6B;AACA,kB;;AAEA,2C;AACA,K;AACA,C","sourcesContent":["/**\n * Utility methods available privately to the package.\n */\n\nUtils = {};\n\n/**\n * Returns global on node or window in the browser.\n */\n\nUtils.global = function () {\n  if (typeof window !== 'undefined')\n    return window;\n  else if (typeof global !== 'undefined')\n    return global;\n  else\n    return null;\n};\n\n/**\n * Given the name of a property, resolves to the value. Works with namespacing\n * too. If first parameter is already a value that isn't a string it's returned\n * immediately.\n *\n * Examples:\n *  'SomeClass' => window.SomeClass || global.someClass\n *  'App.namespace.SomeClass' => window.App.namespace.SomeClass\n *\n * @param {String|Object} nameOrValue\n */\n\nUtils.resolveValue = function (nameOrValue) {\n  var global = Utils.global()\n    , parts\n    , ptr;\n\n  if (_.isString(nameOrValue)) {\n    parts = nameOrValue.split('.')\n    ptr = global;\n    for (var i = 0; i < parts.length; i++) {\n      ptr = ptr[parts[i]];\n      if (!ptr)\n        return undefined;\n    }\n  } else {\n    ptr = nameOrValue;\n  }\n\n  // final position of ptr should be the resolved value\n  return ptr;\n};\n\nUtils.hasOwnProperty = function (obj, key) {\n  var prop = {}.hasOwnProperty;\n  return prop.call(obj, key);\n};\n\n/**\n * Don't mess with this function. It's exactly the same as the compiled\n * coffeescript mechanism. If you change it we can't guarantee that our code\n * will work when used with Coffeescript. One exception is putting in a runtime\n * check that both child and parent are of type Function.\n */\n\nUtils.inherits = function (child, parent) {\n  if (Utils.typeOf(child) !== '[object Function]')\n    throw new Error('First parameter to Utils.inherits must be a function');\n   \n  if (Utils.typeOf(parent) !== '[object Function]')\n    throw new Error('Second parameter to Utils.inherits must be a function');\n\n  for (var key in parent) {\n    if (Utils.hasOwnProperty(parent, key))\n      child[key] = parent[key];\n  }\n\n  function ctor () {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  child.__super__ = parent.prototype;\n  return child;\n};\n\nUtils.toArray = function (obj) {\n  if (!obj)\n    return [];\n  else if (Utils.typeOf(obj) !== '[object Array]')\n    return [obj];\n  else\n    return obj;\n};\n\nUtils.typeOf = function (obj) {\n  if (obj && obj.typeName)\n    return obj.typeName;\n  else\n    return Object.prototype.toString.call(obj);\n};\n\nUtils.extend = function (Super, definition, onBeforeExtendPrototype) {\n  if (arguments.length === 1)\n    definition = Super;\n  else {\n    definition = definition || {};\n    definition.extend = Super;\n  }\n\n  return Utils.create(definition, {\n    onBeforeExtendPrototype: onBeforeExtendPrototype\n  });\n};\n\nUtils.create = function (definition, options) {\n  var Constructor\n    , extendFrom\n    , savedPrototype;\n\n  options = options || {};\n  definition = definition || {};\n\n  if (Utils.hasOwnProperty(definition, 'constructor'))\n    Constructor = definition.constructor;\n  else {\n    Constructor = function () {\n      if (Constructor.__super__ && Constructor.__super__.constructor)\n        return Constructor.__super__.constructor.apply(this, arguments);\n    }\n  }\n\n  extendFrom = definition.extend;\n\n  if (definition.extend) delete definition.extend;\n\n  var inherit = function (Child, Super, prototype) {\n    Utils.inherits(Child, Utils.resolveValue(Super));\n    if (prototype) _.extend(Child.prototype, prototype);\n  };\n\n  if (extendFrom) {\n    inherit(Constructor, extendFrom);\n  }\n\n  if (options.onBeforeExtendPrototype)\n    options.onBeforeExtendPrototype.call(Constructor, definition);\n\n  _.extend(Constructor.prototype, definition);\n\n  return Constructor;\n};\n\n/**\n * Assert that the given condition is truthy.\n *\n * @param {Boolean} condition The boolean condition to test for truthiness.\n * @param {String} msg The error message to show if the condition is falsy.\n */\n\nUtils.assert = function (condition, msg) {\n  if (!condition)\n    throw new Error(msg);\n};\n\nUtils.warn = function (condition, msg) {\n  if (!condition)\n    console && console.warn && console.warn(msg);\n};\n\nUtils.capitalize = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1, str.length);\n};\n\nUtils.classify = function (str) {\n  var re = /_|-|\\./;\n  return _.map(str.split(re), function (word) {\n    return Utils.capitalize(word);\n  }).join('');\n};\n\nUtils.pick = function (/* args */) {\n  var args = _.toArray(arguments)\n    , arg;\n  for (var i = 0; i < args.length; i++) {\n    arg = args[i];\n    if (typeof arg !== 'undefined' && arg !== null)\n      return arg;\n  }\n\n  return null;\n};\n","/*\n * Inspiration and some code for the compilation of routes comes from pagejs.\n * The original has been modified to better handle hash fragments, and to store\n * the regular expression on the Route instance. Also, the resolve method has\n * been added to return a resolved path given a parameters object.\n */\n\nRoute = function (router, name, options) {\n  var path;\n\n  Utils.assert(router instanceof IronRouter);\n\n  Utils.assert(_.isString(name),\n    'Route constructor requires a name as the second parameter');\n\n  if (_.isFunction(options))\n    options = { handler: options };\n\n  options = this.options = options || {};\n  path = options.path || ('/' + name);\n\n  this.router = router;\n  this.originalPath = path;\n\n  if (_.isString(this.originalPath) && this.originalPath.charAt(0) !== '/')\n    this.originalPath = '/' + this.originalPath;\n\n  this.name = name;\n  this.where = options.where || 'client';\n  this.controller = options.controller;\n\n  if (typeof options.reactive !== 'undefined')\n    this.isReactive = options.reactive;\n  else\n    this.isReactive = true;\n\n  this.compile();\n};\n\nRoute.prototype = {\n  constructor: Route,\n\n  /**\n   * Compile the path. \n   *\n   *  @return {Route}\n   *  @api public\n   */\n\n  compile: function () {\n    var self = this\n      , path\n      , options = self.options;\n\n    this.keys = [];\n\n    if (self.originalPath instanceof RegExp) {\n      self.re = self.originalPath;\n    } else {\n      path = self.originalPath\n        .replace(/(.)\\/$/, '$1')\n        .concat(options.strict ? '' : '/?')\n        .replace(/\\/\\(/g, '(?:/')\n        .replace(/#/, '/?#')\n        .replace(\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,\n          function (match, slash, format, key, capture, optional){\n            self.keys.push({ name: key, optional: !! optional });\n            slash = slash || '';\n            return ''\n              + (optional ? '' : slash)\n              + '(?:'\n              + (optional ? slash : '')\n              + (format || '') \n              + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'\n              + (optional || '');\n          }\n        )\n        .replace(/([\\/.])/g, '\\\\$1')\n        .replace(/\\*/g, '(.*)');\n      \n      self.re = new RegExp('^' + path + '$', options.sensitive ? '' : 'i');\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns an array of parameters given a path. The array may have named\n   * properties in addition to indexed values.\n   *\n   * @param {String} path\n   * @return {Array}\n   * @api public\n   */\n\n  params: function (path) {\n    if (!path) return null;\n\n    var params = []\n      , m = this.exec(path)\n      , queryString\n      , keys = this.keys\n      , key\n      , value;\n\n    if (!m)\n      throw new Error('The route named \"' + this.name + '\" does not match the path \"' + path + '\"');\n\n    for (var i = 1, len = m.length; i < len; ++i) {\n      key = keys[i - 1];\n      value = typeof m[i] == 'string' ? decodeURIComponent(m[i]) : m[i];\n      if (key) {\n        params[key.name] = params[key.name] !== undefined ? \n          params[key.name] : value;\n      } else\n        params.push(value);\n    }\n\n    path = decodeURI(path);\n\n    queryString = path.split('?')[1];\n    if (queryString)\n      queryString = queryString.split('#')[0];\n\n    params.hash = path.split('#')[1];\n\n    if (queryString) {\n      _.each(queryString.split('&'), function (paramString) {\n        paramParts = paramString.split('=');\n        params[paramParts[0]] = decodeURIComponent(paramParts[1]);\n      });\n    }\n\n    return params;\n  },\n\n  normalizePath: function (path) {\n    var origin = Meteor.absoluteUrl();\n\n    path = path.replace(origin, '');\n\n    var queryStringIndex = path.indexOf('?');\n    path = ~queryStringIndex ? path.slice(0, queryStringIndex) : path;\n\n    var hashIndex = path.indexOf('#');\n    path = ~hashIndex ? path.slice(0, hashIndex) : path;\n\n    if (path.charAt(0) !== '/')\n      path = '/' + path;\n\n    return path;\n  },\n\n  /**\n   * Returns true if the path matches and false otherwise.\n   *\n   * @param {String} path\n   * @return {Boolean} \n   * @api public\n   */\n  test: function (path) {\n    return this.re.test(this.normalizePath(path));\n  },\n\n  exec: function (path) {\n    return this.re.exec(this.normalizePath(path));\n  },\n\n  resolve: function (params, options) {\n    var value\n      , isValueDefined\n      , result\n      , wildCardCount = 0\n      , path = this.originalPath\n      , hash\n      , query\n      , isMissingParams = false;\n\n    options = options || {};\n    params = params || [];\n    query = options.query;\n    hash = options.hash;\n\n    if (path instanceof RegExp) {\n      throw new Error('Cannot currently resolve a regular expression path');\n    } else {\n      path = this.originalPath\n        .replace(\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,\n          function (match, slash, format, key, capture, optional, offset) {\n            slash = slash || '';\n            value = params[key];\n            isValueDefined = typeof value !== 'undefined';\n\n            if (optional && !isValueDefined) {\n              value = '';\n            } else if (!isValueDefined) {\n              isMissingParams = true;\n              console.warn('You called Route.prototype.resolve with a missing parameter. \"' + key + '\" not found in params');\n              return;\n              //throw new Error('You called Route.prototype.resolve with a missing parameter. \"' + key + '\" not found in params');\n            }\n\n            value = _.isFunction(value) ? value.call(params) : value;\n            var escapedValue = _.map(String(value).split('/'), function (segment) {\n              return encodeURIComponent(segment);\n            }).join('/');\n            return slash + escapedValue\n          }\n        )\n        .replace(\n          /\\*/g,\n          function (match) {\n            if (typeof params[wildCardCount] === 'undefined') {\n              throw new Error(\n                'You are trying to access a wild card parameter at index ' + \n                wildCardCount +\n                ' but the value of params at that index is undefined');\n            }\n\n            var paramValue = String(params[wildCardCount++]);\n            return _.map(paramValue.split('/'), function (segment) {\n              return encodeURIComponent(segment);\n            }).join('/');\n          }\n        );\n\n      if (_.isObject(query)) {\n        query = _.map(_.pairs(query), function (queryPart) {\n          return queryPart[0] + '=' + encodeURIComponent(queryPart[1]);\n        }).join('&');\n\n        if (query && query.length)\n          path = path + '/?' + query;\n      }\n\n      if (hash) {\n        hash = encodeURI(hash.replace('#', ''));\n        path = query ? \n          path + '#' + hash : path + '/#' + hash;\n      }\n    }\n\n    // Because of optional possibly empty segments we normalize path here\n    path = path.replace(/\\/+/g, '/'); // Multiple / -> one /\n    path = path.replace(/^(.+)\\/$/g, '$1'); // Removal of trailing /\n\n    return isMissingParams ? null : path;\n  },\n\n  path: function (params, options) {\n    return this.resolve(params, options);\n  },\n\n  url: function (params, options) {\n    var path = this.path(params, options);\n    if (path[0] === '/')\n      path = path.slice(1, path.length);\n    return Meteor.absoluteUrl() + path;\n  },\n\n  getController: function (path, options) {\n    var self = this;\n    var handler\n      , controllerClass\n      , controller\n      , action\n      , routeName;\n\n    var resolveValue = Utils.resolveValue;\n    var classify = Utils.classify; \n    var toArray = Utils.toArray;\n\n    var findController = function (name) {\n      var controller = resolveValue(name);\n      if (typeof controller === 'undefined') {\n        throw new Error(\n          'controller \"' + name + '\" is not defined');\n      }\n\n      return controller;\n    };\n\n    options = _.extend({}, this.router.options, this.options, options || {}, {\n      before: toArray(this.options.before),\n      after: toArray(this.options.after),\n      unload: toArray(this.options.unload),\n      waitOn: toArray(this.router.options.waitOn)\n        .concat(toArray(this.options.waitOn)),\n      path: path,\n      route: this,\n      router: this.router,\n      params: this.params(path)\n    });\n    \n    // case 1: controller option is defined on the route\n    if (this.controller) {\n      controllerClass = _.isString(this.controller) ?\n        findController(this.controller) : this.controller;\n      controller = new controllerClass(options);\n      return controller;\n    }\n\n    // case 2: intelligently find the controller class in global namespace\n    routeName = this.name;\n\n    if (routeName) {\n      controllerClass = resolveValue(classify(routeName + 'Controller'));\n\n      if (controllerClass) {\n        controller = new controllerClass(options);\n        return controller;\n      }\n    }\n\n    // case 3: nothing found so create an anonymous controller\n    return new RouteController(options);\n  }\n};\n","/*****************************************************************************/\n/* IronRouteController */\n/*****************************************************************************/\n\n/**\n * Base class for client and server RouteController.\n */\n\nIronRouteController = function (options) {\n  var self = this;\n\n  options = this.options = options || {};\n\n  var getOption = function (key) {\n    return Utils.pick(self.options[key], self[key]);\n  };\n\n  this.router = options.router;\n  this.route = options.route;\n  this.path = options.path;\n  this.params = options.params || [];\n  this.where = options.where || 'client';\n  this.action = options.action || this.action;\n  this.hooks = {};\n\n  options.load = Utils.toArray(options.load);\n  options.before = Utils.toArray(options.before);\n  options.after = Utils.toArray(options.after);\n  options.unload = Utils.toArray(options.unload);\n};\n\nIronRouteController.prototype = {\n  constructor: IronRouteController,\n  \n  runHooks: function (hookName, more) {\n    var ctor = this.constructor\n      , more = Utils.toArray(more);\n\n    var collectInheritedHooks = function (ctor) {\n      var hooks = [];\n\n      if (ctor.__super__)\n        hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor));\n      \n      return Utils.hasOwnProperty(ctor.prototype, hookName) ?\n        hooks.concat(ctor.prototype[hookName]) : hooks;\n    };\n\n    var prototypeHooks = collectInheritedHooks(this.constructor);\n    var routeHooks = this.options[hookName];\n    var globalHooks = \n      this.route ? this.router.getHooks(hookName, this.route.name) : [];\n\n    var allHooks = globalHooks.concat(routeHooks).concat(prototypeHooks).concat(more);\n\n    for (var i = 0, hook; hook = allHooks[i]; i++) {\n      if (this.stopped)\n        break;\n      hook.call(this);\n    }\n  },\n\n  run: function () {\n    throw new Error('not implemented');\n  },\n\n  action: function () {\n    throw new Error('not implemented');\n  },\n\n  stop: function() {\n    this.stopped = true;\n  }\n};\n\n_.extend(IronRouteController, {\n  /**\n   * Inherit from IronRouteController\n   *\n   * @param {Object} definition Prototype properties for inherited class.\n   */\n\n  extend: function (definition) {\n    return Utils.extend(this, definition, function (definition) {\n      var klass = this;\n      \n      /*\n        Allow calling a class method from javascript, directly in the subclass\n        definition.\n\n        Instead of this:\n          MyController = RouteController.extend({...});\n          MyController.before(function () {});\n\n        You can do:\n          MyController = RouteController.extend({\n            before: function () {}\n          });\n       \n        And in Coffeescript you can do:\n         MyController extends RouteController\n           @before function () {}\n       */\n    });\n  }\n});\n","/*****************************************************************************/\n/* IronRouter */\n/*****************************************************************************/\nIronRouter = function (options) {\n  var self = this;\n  \n  this.configure(options);\n\n  /**\n   * The routes array which doubles as a named route index by adding\n   * properties to the array.\n   *\n   * @api public\n   */\n  this.routes = [];\n  \n  this._globalHooks = {};\n  _.each(IronRouter.HOOK_TYPES, function(type) { self._globalHooks[type] = []; });\n};\n\nIronRouter.HOOK_TYPES = ['load', 'before', 'after', 'unload'];\n\nIronRouter.prototype = {\n  constructor: IronRouter,\n\n  /**\n   * Configure instance with options. This can be called at any time. If the\n   * instance options object hasn't been created yet it is created here.\n   *\n   * @param {Object} options\n   * @return {IronRouter}\n   * @api public\n   */\n  \n  configure: function (options) {\n    var self = this;\n    \n    this.options = this.options || {};\n    _.extend(this.options, options);\n    \n    // e.g. before: fn OR before: [fn1, fn2]\n    _.each(IronRouter.HOOK_TYPES, function(type) {\n      if (self.options[type]) {\n        _.each(Utils.toArray(self.options[type]), function(hook) {\n          self.addHook(type, hook);\n        });\n        \n        delete self.options[type];\n      }\n    });\n    \n    return this;\n  },\n\n\n  /**\n   *\n   * Add a hook to all routes. The hooks will apply to all routes,\n   * unless you name routes to include or exclude via `only` and `except` options\n   *\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'\n   * @param {Object} [options] Options to controll the hooks [optional]\n   * @param {Function} [hook] Callback to run\n   * @return {IronRouter}\n   * @api public\n   *\n   */\n  \n  addHook: function(type, hook, options) {\n    options = options || {}\n\n    if (options.only)\n      options.only = Utils.toArray(options.only);\n    if (options.except)\n      options.except = Utils.toArray(options.except);\n      \n    this._globalHooks[type].push({options: options, hook: hook});\n    \n    return this;\n  },\n  \n  load: function(hook, options) {\n    return this.addHook('load', hook, options);\n  },\n\n  before: function(hook, options) {\n    return this.addHook('before', hook, options);\n  },\n  \n  after: function(hook, options) {\n    return this.addHook('after', hook, options);\n  },\n  \n  unload: function(hook, options) {\n    return this.addHook('unload', hook, options);\n  },\n  \n  /**\n   *\n   * Fetch the list of global hooks that apply to the given route name.\n   * Hooks are defined by the .addHook() function above.\n   *\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'\n   * @param {String} [name] the name of the route we are interested in\n   * @return {[Function]} [hooks] an array of hooks to run\n   * @api public\n   *\n   */\n    \n  getHooks: function(type, name) {\n    var hooks = [];\n    \n    _.each(this._globalHooks[type], function(hook) {\n      var options = hook.options;\n      \n      if (options.except && _.include(options.except, name))\n        return;\n      \n      if (options.only && ! _.include(options.only, name))\n        return;\n      \n      hooks.push(hook.hook);\n    });\n    \n    return hooks;\n  },\n  \n\n  /**\n   * Convenience function to define a bunch of routes at once. In the future we\n   * might call the callback with a custom dsl.\n   *\n   * Example:\n   *  Router.map(function () {\n   *    this.route('posts');\n   *  });\n   *\n   *  @param {Function} cb\n   *  @return {IronRouter}\n   *  @api public\n   */\n\n  map: function (cb) {\n    Utils.assert(_.isFunction(cb),\n           'map requires a function as the first parameter');\n    cb.call(this);\n    return this;\n  },\n\n  /**\n   * Define a new route. You must name the route, but as a second parameter you\n   * can either provide an object of options or a Route instance.\n   *\n   * @param {String} name The name of the route\n   * @param {Object} [options] Options to pass along to the route\n   * @return {Route}\n   * @api public\n   */\n\n  route: function (name, options) {\n    var route;\n\n    Utils.assert(_.isString(name), 'name is a required parameter');\n    \n    if (options instanceof Route)\n      route = options;\n    else\n      route = new Route(this, name, options);\n\n    this.routes[name] = route;\n    this.routes.push(route);\n    return route;\n  },\n\n  path: function (routeName, params, options) {\n    var route = this.routes[routeName];\n    Utils.warn(route,\n     'You called Router.path for a route named ' + routeName + ' but that that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.path(params, options);\n  },\n\n  url: function (routeName, params, options) {\n    var route = this.routes[routeName];\n    Utils.warn(route, \n      'You called Router.url for a route named \"' + routeName + '\" but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.url(params, options);\n  },\n\n  dispatch: function (path, options, cb) {\n    var self = this\n      , routes = self.routes\n      , route\n      , controller\n      , where = Meteor.isClient ? 'client' : 'server'\n      , i = 0;\n\n    function next () {\n      route = routes[i++];\n\n      if (!route) {\n        return self.onRouteNotFound(path, options);\n      }\n\n      if (route.test(path)) {\n        if (route.where !== where) \n          return self.onUnhandled(path, options);\n\n        var controller = route.getController(path, options);\n        self.run(controller, cb);\n      } else {\n        next();\n      }\n    }\n\n    next();\n  },\n\n  run: function (controller, cb) {\n    throw new Error('run not implemented');\n  },\n\n  onUnhandled: function (path, options) {\n    throw new Error('onUnhandled not implemented');\n  },\n\n  onRouteNotFound: function (path, options) {\n    throw new Error('Oh no! No route found for path: \"' + path + '\"');\n  }\n};\n","var dep = new Deps.Dependency;\nvar popped = false;\n// XXX: we have to store the state internally (rather than just calling out\n// to window.location) due to an android 2.3 bug. See:\n//   https://github.com/EventedMind/iron-router/issues/350\nvar currentState = {\n  path: location.pathname + location.search + location.hash\n};\n\nfunction onclick (e) {\n  var el = e.currentTarget;\n  var which = _.isUndefined(e.which) ? e.button : e.which;\n  var href = el.href;\n  var path = el.pathname + el.search + el.hash;\n\n  // we only want to handle clicks on links which:\n  //  - are with the left mouse button with no meta key pressed\n  if (which !== 1)\n    return;\n\n  if (e.metaKey || e.ctrlKey || e.shiftKey) \n    return;\n  \n  // - haven't been cancelled already\n  if (e.isDefaultPrevented())\n    return;\n  \n  // - aren't in a new window\n  if (el.target)\n    return;\n  \n  // - aren't external to the app\n  if (!IronLocation.isSameOrigin(href)) \n    return;\n  \n  // note that we _do_ handle links which point to the current URL\n  // and links which only change the hash.\n  e.preventDefault();\n  IronLocation.set(path);\n}\n\nfunction onpopstate (e) {\n  setState(e.state, null, location.pathname + location.search + location.hash);\n  \n  if (popped)\n    dep.changed();\n}\n\nIronLocation = {};\n\nIronLocation.options = {\n  \"linkSelector\": 'a[href]'\n};\n\nIronLocation.configure = function(options){\n  if (this.isStarted){\n    IronLocation.unbindEvents();\n  }\n  _.extend(this.options, options);\n  \n  if(this.isStarted){\n    IronLocation.bindEvents();\n  }\n};\n\nIronLocation.origin = function () {\n  return location.protocol + '//' + location.host;\n};\n\nIronLocation.isSameOrigin = function (href) {\n  var origin = IronLocation.origin();\n  return href.indexOf(origin) === 0;\n};\n\nIronLocation.get = function () {\n  dep.depend();\n  return currentState;\n};\n\nIronLocation.path = function () {\n  dep.depend();\n  return currentState.path;\n};\n\nIronLocation.set = function (url, options) {\n  options = options || {};\n\n  var state = options.state || {};\n\n  if (/^http/.test(url))\n    href = url;\n  else {\n    if (url.charAt(0) !== '/')\n      url = '/' + url;\n    href = IronLocation.origin() + url;\n  }\n\n  if (!IronLocation.isSameOrigin(href))\n    window.location = href;\n  else if (options.where === 'server')\n    window.location = href;\n  else if (options.replaceState)\n    IronLocation.replaceState(state, options.title, url);\n  else\n    IronLocation.pushState(state, options.title, url);\n\n  if (options.skipReactive !== true)\n    dep.changed();\n};\n\n// store the state for later access\nsetState = function(newState, title, url) {\n  currentState = newState || {};\n  currentState.path = url;\n  currentState.title = title;\n}\n\nIronLocation.pushState = function (state, title, url) {\n  popped = true;\n  setState(state, title, url);\n  \n  if (history.pushState)\n    history.pushState(state, title, url);\n  else\n    window.location = url;\n};\n\nIronLocation.replaceState = function (state, title, url) {\n  popped = true;\n  setState(state, title, url);\n  \n  if (history.replaceState)\n    history.replaceState(state, title, url);\n  else\n    window.location = url;\n};\n\nIronLocation.bindEvents = function(){\n  $(window).on('popstate', onpopstate);\n  $(document).on('click', this.options.linkSelector, onclick);\n};\n\nIronLocation.unbindEvents = function(){\n  $(window).off('popstate', onpopstate);\n  $(window).off('click', this.options.linkSelector, onclick);\n};\n\nIronLocation.start = function () {\n  if (this.isStarted)\n    return;\n\n  IronLocation.bindEvents();\n  this.isStarted = true;\n  \n  // store the fact that this is the first route we hit.\n  // this serves two purposes\n  //   1. We can tell when we've reached an unhandled route and need to show a\n  //      404 (rather than bailing out to let the server handle it)\n  //   2. Users can look at the state to tell if the history.back() will stay\n  //      inside the app (this is important for mobile apps).\n  if (history.replaceState)\n    history.replaceState({initial: true}, null, location.pathname + location.search + location.hash);\n};\n\nIronLocation.stop = function () {\n  IronLocation.unbindEvents();\n  this.isStarted = false;\n};\n\nIronLocation.start();\n","var MAIN_YIELD = '__main__';\nvar DEFAULT_LAYOUT = '__defaultLayout__';\n\nvar getTemplateFunction = function (template, defaultFn) {\n  if (_.isFunction(template))\n    return template;\n  else if (Template[template])\n    return Template[template];\n  else if (defaultFn)\n    return defaultFn;\n  else\n    throw new Error('Oops, no template found named \"' + template + '\"');\n};\n\nvar assertTemplateExists = function (template) {\n  if (_.isFunction(template))\n    return true;\n  else if (!Template[template])\n    throw new Error('Uh oh, no template found named \"' + template + '\"');\n};\n\nvar ReactiveVar = function (value) {\n  this._dep = new Deps.Dependency;\n  this._value = value || null;\n};\n\nReactiveVar.prototype = {\n  set: function (value) {\n    if (EJSON.equals(value, this._value))\n      return;\n\n    this._value = value;\n    this._dep.changed();\n  },\n\n  get: function () {\n    this._dep.depend();\n    return this._value;\n  },\n\n  equals: function (other) {\n    this._dep.depend();\n    return EJSON.equals(this._value, other);\n  }\n};\n\nPageManager = function () {\n  this.yieldsToTemplates = new ReactiveDict;\n  this.layout = new ReactiveVar;\n  this.data = new ReactiveVar({});\n  this.layout.set(DEFAULT_LAYOUT);\n  this._yields = {};\n};\n\nPageManager.prototype = {\n  constructor: PageManager,\n\n  setLayout: function (layout) {\n    var self = this;\n    layout = layout || DEFAULT_LAYOUT;\n    assertTemplateExists(layout);\n    Deps.nonreactive(function () {\n      var oldLayout = self.layout.get();\n\n      // reset because we have a new layout now\n      if (oldLayout !== layout)\n        self._yields = {};\n    });\n\n    this.layout.set(layout);\n  },\n\n  setTemplate: function (template, to) {\n    var self = this;\n\n    to = to || MAIN_YIELD;\n\n    // make sure the yield region was declared otherwise the user may have\n    // tried to render into a named yield that was never declared in the\n    // layout. Let's provide them a helpful warning if that happens.\n\n    // If we're already in a flush we want to schedule the yield check for after\n    // the next flush, not this one. The flush we're currently in is caused by a\n    // location change which triggers the router's dispatch process. Then, we\n    // add this check to the current flush's afterFlushCallbacks queue which\n    // caues it to be executed as soon as all our code is done running, instead\n    // of after the next flush which is what we want. There might be a better\n    // pattern here.\n    Meteor.defer(function () {\n      Deps.afterFlush(function () {\n        var isYieldDeclared = self._yields[to];\n        var help;\n\n        if (!isYieldDeclared) {\n          if (to == MAIN_YIELD)\n            help = 'Sorry, couldn\\'t find the main yield. Did you define it in one of the rendered templates like this: {{yield}}?';\n          else\n            help = 'Sorry, couldn\\'t find a yield named \"' + to + '\". Did you define it in one of the rendered templates like this: {{yield \"' + to + '\"}}?';\n\n          if (console && console.warn)\n            console.warn(help);\n          else if (console && console.error)\n            console.error(help);\n          else\n            throw new Error(help);\n        }\n      });\n    });\n\n    this.yieldsToTemplates.set(to, template);\n  },\n\n  clearYield: function (key) {\n    this.yieldsToTemplates.set(key, null);\n  },\n\n  setData: function (data) {\n    this.data.set(data);\n  },\n\n  getData: function () {\n    return this.data.get();\n  },\n\n  helpers: function () {\n    var self = this;\n    return {\n      'yield': function (key, options) {\n        var html;\n\n        if (arguments.length < 2)\n          key = null;\n\n        html = self._renderTemplate(key);\n        return new Handlebars.SafeString(html);\n      }\n    };\n  },\n\n  _renderTemplate: function (key) {\n    var self = this;\n\n    key = key || MAIN_YIELD;\n\n    // register that this named yield was used so we can check later that all\n    // setTemplate calls were for a yield region that exists.\n    this._yields[key] = true;\n\n\n    return Spark.isolate(function () {\n      // grab the template function from Template or just make the template\n      // function return an empty string if no template found\n      var template = getTemplateFunction(self.yieldsToTemplates.get(key), function () {\n        return '';\n      });\n\n      var data = self.getData();\n      var helpers = self.helpers();\n      var dataContext = _.extend({}, data, helpers);\n\n      return template(dataContext);\n    });\n  },\n\n  renderLayout: function () {\n    var self = this;\n\n    var html = Spark.isolate(function () {\n      var layout = getTemplateFunction(self.layout.get());\n      var data = self.data.get();\n      var helpers = self.helpers();\n      var dataContext = _.extend({}, data, helpers);\n      return layout(dataContext);\n    });\n\n    return html;\n  },\n\n  clearUnusedYields: function (usedYields) {\n    var self = this;\n    var allYields = _.keys(this.yieldsToTemplates.keys);\n\n    usedYields = _.filter(usedYields, function (val) {\n      return !!val;\n    });\n\n    var unusedYields = _.difference(allYields, usedYields);\n\n    _.each(unusedYields, function (key) {\n      self.clearYield(key);\n    });\n  }\n};\n","/**\n * Client side router.\n *\n * @class ClientRouter\n * @exports ClientRouter\n * @extends IronRouter\n */\n\nClientRouter = Utils.extend(IronRouter, {\n  /**\n   * @constructor\n   * @param {Object} [options]\n   * @param {Boolean} [options.autoRender] Automatically render to the body\n   * @param {Boolean} [options.autoStart] Automatically start listening to\n   * events\n   */\n\n  constructor: function (options) {\n    var self = this;\n\n    ClientRouter.__super__.constructor.apply(this, arguments);\n\n    this.isRendered = false;\n\n    this._page = new PageManager;\n\n    /**\n     * The current RouteController instance. This is set anytime a new route is\n     * dispatched. It's a reactive variable which you can get by calling\n     * Router.current();\n     *\n     * @api private\n     */\n    this._currentController = null;\n\n    /**\n     * Dependency to for this._currentController\n     *\n     * @api private\n     */\n    this._controllerDep = new Deps.Dependency;\n\n    /**\n      * Did the URL we are looking at come from a hot-code-reload \n      *  (and thus should we treat is as not new?)\n      * \n      * @api private\n      */\n    this._hasJustReloaded = false;\n\n    Meteor.startup(function () {\n      setTimeout(function () {\n        if (self.options.autoRender !== false)\n          self.autoRender();\n        if (self.options.autoStart !== false)\n          self.start();\n      });\n    });\n  },\n\n  /**\n   * Reactive accessor for the current RouteController instance. You can also\n   * get a nonreactive value by specifiying {reactive: false} as an option.\n   *\n   * @param {Object} [opts] configuration options\n   * @param {Boolean} [opts.reactive] Set to false to enable a non-reactive read.\n   * @return {RouteController}\n   * @api public\n   */\n\n  current: function (opts) {\n    if (opts && opts.reactive === false)\n      return this._currentController;\n    else {\n      this._controllerDep.depend();\n      return this._currentController;\n    }\n  },\n\n  setLayout: function (layout) {\n    this._page.setLayout(layout);\n  },\n\n  setTemplate: function (template, to) {\n    this._page.setTemplate(template, to);\n  },\n\n  clearUnusedYields: function (usedYields) {\n    this._page.clearUnusedYields(usedYields);\n  },\n\n  setData: function (data) {\n    this._page.setData(data);\n  },\n\n  getData: function () {\n    return this._page.getData();\n  },\n\n  run: function (controller, cb) {\n    var self = this;\n    var where = Meteor.isClient ? 'client' : 'server';\n\n    Utils.assert(controller, 'run requires a controller');\n\n    // one last check to see if we should handle the route here\n    if (controller.where != where) {\n      self.onUnhandled(controller.path, controller.options);\n      return;\n    }\n\n    var runRouteController = function () {\n      Deps.autorun(function (c) {\n        self._routeComputation = c;\n        \n        if (! self._hasJustReloaded)\n          controller.runHooks('load');\n        self._hasJustReloaded = false;\n        \n        if (this.stopped)\n          return;\n        \n        Deps.autorun(function () {\n          controller.run();\n        });\n      });\n    };\n\n    if (this._currentController)\n      this._currentController.runHooks('unload');\n\n    this._currentController = controller;\n\n    if (this._routeComputation) {\n      this._routeComputation.stop();\n      this._routeComputation.onInvalidate(runRouteController);\n    } else {\n      runRouteController();\n    }\n\n    if (controller == this._currentController) {\n      cb && cb(controller);\n      this._controllerDep.changed();\n    }\n  },\n\n  /**\n   * Wrapper around Location.go that accepts a routeName or a path as the first\n   * parameter. This method can accept client and server side routes.\n   *\n   * Examples:\n   *\n   *  1. Router.go('/posts', {state: 'true'});\n   *  2. Router.go('postIndex', [param1, param2], {state});\n   *\n   * @param {String} routeNameOrPath\n   * @param {Array|Object} [params]\n   * @param {Object} [state]\n   * @param {Boolean} [replaceState]\n   * @api public\n   */\n\n  go: function (routeNameOrPath, params, options) {\n    var isPathRe = /^\\/|http/\n      , route\n      , path\n      , onComplete\n      , controller\n      , done = function() {\n        options = options || {};\n        IronLocation.set(path, {\n          replaceState: options.replaceState,\n          state: options.state,\n          skipReactive: true\n        });\n      };\n\n    if (isPathRe.test(routeNameOrPath)) {\n      path = routeNameOrPath;\n      options = params;\n      // issue here is in the dispatch process we might want to\n      // make a server request so therefore not call this method yet, so\n      // we need to push the state only after we've decided it's a client\n      // request, otherwise let the browser handle it and send off to the\n      // server\n      this.dispatch(path, options, done);\n    } else {\n      route = this.routes[routeNameOrPath];\n      Utils.assert(route, 'No route found named ' + routeNameOrPath);\n      path = route.path(params, options);\n      controller = route.getController(path, options);\n      this.run(controller, done);\n    }\n  },\n\n  /**\n   * Returns an html string or a document fragment with the router's layout.\n   * This method also sets up the 'yield' helper on the layout. This is so that\n   * the yield helper has a reference to the router through the closure.\n   *\n   * @returns {String|DocumentFragment}\n   * @api public\n   */\n\n  render: function () {\n    this.isRendered = true;\n    return this._page.renderLayout();\n  },\n\n  /**\n   * Render the router into the body of the page automatically. Calles the\n   * render method inside Spark.render to create a renderer and appends to the\n   * document body.\n   *\n   * @api public\n   */\n\n  autoRender: function () {\n    var self = this;\n    var frag = Spark.render(function () {\n      return self.render();\n    });\n    document.body.appendChild(frag);\n  },\n\n\n  /**\n   * Start listening to click events and set up a Deps.autorun for location\n   * changes. If already started the method just returns.\n   *\n   * @api public\n   */\n\n  start: function () {\n    var self = this;\n\n    if (self.isStarted) return;\n\n    self.isStarted = true;\n    \n    Deps.autorun(function (c) {\n      var location;\n      self._locationComputation = c;\n      self.dispatch(IronLocation.path(), {state: history.state});\n    });\n  },\n\n  /**\n   * Remove click event listener and stop listening for location changes.\n   *\n   * @api public\n   */\n\n  stop: function () {\n    this.isStarted = false;\n\n    if (this._locationComputation)\n      this._locationComputation.stop();\n  },\n\n  /**\n   * If we don't handle a link but the server does, bail to the server\n   *\n   * @api public\n   */\n  onUnhandled: function (path, options) {\n    this.stop();\n    window.location = path;\n  },\n  \n  /**\n   * if we don't handle a link, _and_ the server doesn't handle it,\n   * do one of two things:\n   *   a) if this is the initial route, then it can't be a static asset, so \n   *      show notFound or throw an error\n   *   b) otherwise, let the server have a go at it, we may end up coming back.\n   *\n   * @api public\n   */\n  onRouteNotFound: function (path, options) {\n    if (history && ! history.state.initial) {\n      this.stop();\n      window.location = path;\n    } else if (this.options.notFoundTemplate) {\n      this.setLayout(this.options.layoutTemplate);\n      this.setTemplate(this.options.notFoundTemplate);\n    } else {\n      throw new Error('Oh no! No route found for path: \"' + path + '\"');\n    }\n  }\n});\n\n/**\n * The main Router instance that clients will deal with\n *\n * @api public\n * @exports Router\n */\n\nRouter = new ClientRouter;\n\nif (Meteor._reload) {\n  // just register the fact that a migration _has_ happened\n  Meteor._reload.onMigrate('iron-router', function() { return [true, true]});\n  \n  // then when we come back up, check if it it's set\n  var data = Meteor._reload.migrationData('iron-router');\n  Router._hasJustReloaded = data;\n}","Template.__define__(\"__defaultLayout__\",Package.handlebars.Handlebars.json_ast_to_func([[\"{\",[[0,\"yield\"]]]]));\n","/*****************************************************************************/\n/* WaitList */\n/*****************************************************************************/\nWaitList = function () {\n  this._dep = new Deps.Dependency;\n  this.clear();\n};\n\nWaitList.prototype = {\n  get: function (idx) {\n    return this._list[idx];\n  },\n\n  clear: function () {\n    this._list = [];\n  },\n\n  append: function (list) {\n    var self = this;\n    list = Utils.toArray(list);\n    _.each(list, function (o) {\n      self.push(o);\n    });\n  },\n\n  push: function (o) {\n    var self = this;\n\n    if (!o)\n      return;\n\n    var res = this._list.push(o);\n\n    return res;\n  },\n\n  ready: function () {\n    return _.all(this._list, function (handle) {\n      return handle.ready();\n    });\n  }\n};\n\n/*****************************************************************************/\n/* Predefined Hooks */\n/*****************************************************************************/\nvar setDataHook = function () {\n  var self = this;\n  var data = _.isFunction(self.data) ? self.data.call(self) : self.data;\n  if (data !== false) {\n    self.setData(data);\n  }\n};\n\nvar autoRenderNotFoundTemplateHook = function () {\n  var self = this;\n  var data = self.getData();\n  if ((data === null || typeof data === 'undefined') \n      && self.notFoundTemplate) {\n    self.render(self.notFoundTemplate);\n    this.renderYields();\n    self.stop();\n  }\n};\n\nvar autoRenderLoadingTemplateHook = function () {\n  var self = this;\n\n  if (!this.ready()) {\n    if (this.loadingTemplate) {\n      this.render(this.loadingTemplate);\n      this.renderYields();\n      this.stop();\n    }\n  }\n};\n\nvar autoClearUnusedYieldsHook = function () {\n  this.router && this.router.clearUnusedYields(this._renderedYields);\n};\n\n/*****************************************************************************/\n/* RouteController */\n/*****************************************************************************/\nRouteController = Utils.extend(IronRouteController, {\n  constructor: function () {\n    RouteController.__super__.constructor.apply(this, arguments);\n\n    var self = this;\n\n    var getOption = function (key) {\n      return Utils.pick(self.options[key], self[key]);\n    };\n\n    this.loadingTemplate = getOption('loadingTemplate');\n    this.notFoundTemplate = getOption('notFoundTemplate');\n    this.data = getOption('data');\n    this.template = getOption('template') || (this.route && this.route.name);\n    this.yieldTemplates = getOption('yieldTemplates');\n    this.layoutTemplate = getOption('layoutTemplate');\n    \n    /*\n     * waitOn can come from the options or the prototype. We add the option\n     * waitOn value first and then concatenate the prototype waitOn value.\n     * Possible values are:\n     *\n     * Router.configure({\n     *  waitOn: Meteor.subscribe('items')\n     * });\n     *\n     * Router.route('someRoute', {\n     *  waitOn: function () {\n     *    return Meteor.subscribe('item', this.params._id);\n     *  }\n     * });\n     *\n     * waitOn => [{}, fn]\n     *  fn => could return an object or another array of objects\n     * \n     */\n    this.waitOn = []\n      .concat(Utils.toArray(this.options.waitOn))\n      .concat(Utils.toArray(this.waitOn));\n\n    this._waitList = new WaitList;\n  },\n\n  ready: function () {\n    return this._waitList.ready();\n  },\n\n  /**\n   * Stop running this controller and redirect to a new path. Same parameters as\n   * those of Router.go.\n   *\n   * @api public\n   */\n\n  redirect: function (/* args */) {\n    this.stop();\n    return this.router && this.router.go.apply(this.router, arguments);\n  },\n\n  /**\n   * Used to specify additional templates to render into named yield regions.\n   * The default run method will first render the main template and then use\n   * this property to render additional templates. Only used in the 'run'\n   * method.\n   *\n   * Example:\n   *\n   *  yieldTemplates: {\n   *    'asideTemplateName': {to: 'aside', data: {}, waitOn: Sub},\n   *    'footerTemplateName': {to: 'footer'}\n   *  }\n   *\n   * @type {Object|null}\n   * @api public\n   */\n\n  yieldTemplates: null,\n\n  layoutTemplate: null,\n\n  /**\n   * The default template to render\n   *\n   * @type {String|Function}\n   * @api public\n   */\n\n  template: null,\n\n  /**\n   * Optional template to be used while waiting. If specified, the loading\n   * template is used automatically in the run method. You can also use it\n   * manually.\n   *\n   * @type {String|Function}\n   * @api public\n   */\n\n  loadingTemplate: null,\n\n  /**\n   * Optional template to be used if data returns a falsy value. Used\n   * automatically in the run method. You can also use it manually.\n   *\n   * @type {String|Function}\n   * @api public\n   */\n\n  notFoundTemplate: null,\n\n  /**\n   * A default data object or function to be used as the data context in\n   * rendering.\n   *\n   * @type {Object|Function}\n   * @api public\n   */\n\n  data: {},\n\n  getData: function () {\n    return this.router && this.router.getData();\n  },\n\n  setData: function (data) {\n    this.router && this.router.setData(data);\n  },\n\n  waitOn: null,\n\n  /*\n   * Calls Meteor.subscribe but adds a wait method to the returned handle\n   * object. If the user calls wait on the result, the subscription handle is\n   * added to the RouteController's wait list.\n   */\n\n  subscribe: function (/* same as Meteor.subscribe */) {\n    var self = this;\n\n    var waitApi = (function () {\n      var added = false;\n\n      return {\n        wait: function () {\n          // make idempotent\n          if (!added) {\n            self._waitList.push(this);\n            added = true;\n          }\n        }\n      };\n    })();\n\n    var handle = Meteor.subscribe.apply(this, arguments);\n    return _.extend(handle, waitApi);\n  },\n\n  /**\n   * Either specify a template to render or call with no arguments to render the\n   * RouteController's template plus all of the yieldTemplates.\n   *\n   */\n\n  render: function (template, options) {\n    var to;\n    var template;\n    var layout;\n    var self = this;\n\n    var addRenderedYield = function (key) {\n      if (self._renderedYields) {\n        key = key || '__main__';\n        self._renderedYields.push(key);\n      }\n    };\n\n    if (arguments.length == 0) {\n      this.router && this.router.setTemplate(this.template);\n      addRenderedYield();\n      \n      this.renderYields();\n    } else {\n      options = options || {};\n      to = options.to;\n      this.router && this.router.setTemplate(template, to);\n      addRenderedYield(to);\n    }\n  },\n  \n  // render all the templates \n  renderYields: function() {\n    var self = this;\n    \n    _.each(this.yieldTemplates, function (opts, tmpl) {\n      self.render(tmpl, opts)\n    });\n  },\n\n  setLayout: function (template) {\n    this.router && this.router.setLayout(template);\n  },\n\n  run: function () {\n    var self = this;\n    var args = _.toArray(arguments);\n    var action = _.isFunction(this.action) ? this.action : this[this.action];\n\n    Utils.assert(action,\n      \"You don't have an action named \\\"\" + this.action + \"\\\" defined on your RouteController\");\n\n    this.stopped = false;\n\n    this._renderedYields = [];\n\n    // when the waitlist status changes it will get cleared and then\n    // populated again from any before hooks or action functions. For\n    // subscriptions, we take advantage of the fact that Meteor won't subscribe\n    // again to the same subscription because of a computation rerun.\n    this._waitList.clear();\n\n    /*\n     * Each waitOn value could be an object, array or function. Because it's a\n     * concatenation of waitOn options from Router -> Route -> RouteController.\n     * So by the time we're done here we should just have a list of objects.\n     */\n    var waitOn = _.flatten(_.map(this.waitOn, function (fnOrHandle) {\n      return _.isFunction(fnOrHandle) ? fnOrHandle.call(self) : fnOrHandle;\n    }));\n\n    this._waitList.append(waitOn);\n\n    this.setLayout(this.layoutTemplate);\n\n    // Step 1: Run the before hooks\n    this.runHooks('before', [\n      autoRenderLoadingTemplateHook,\n      setDataHook,\n      autoRenderNotFoundTemplateHook,\n    ]);\n\n    if (this.stopped) {\n      this.isFirstRun = false;\n      return;\n    }\n\n    // Step 2: If we're not stopped, run the action\n    action.call(this);\n\n    // Step 3: Run the after hooks\n    this.runHooks('after', [\n      autoClearUnusedYieldsHook\n    ]);\n\n    // We've run at least once\n    this.isFirstRun = false;\n  },\n\n  wait: function (handle) {\n    handle = _.isFunction(handle) ? handle.call(this) : handle;\n    // handle could be an object or a array if a function returned an array\n    this._waitList.append(handle);\n  },\n\n  action: function () {\n    this.render();\n  }\n});\n","if (Handlebars) {\n  Handlebars.registerHelper('pathFor', function (routeName, params, options) {\n\n    if (arguments.length == 2) {\n      options = params;\n      params = this;\n    }\n\n    var hash = options.hash.hash;\n    var query = _.omit(options.hash, 'hash');\n\n    return Router.path(routeName, params, {\n      query: query,\n      hash: hash\n    });\n  });\n\n  Handlebars.registerHelper('urlFor', function (routeName, params, options) {\n    if (arguments.length == 2) {\n      options = params;\n      params = this;\n    }\n\n    var hash = options.hash.hash;\n    var query = _.omit(options.hash, 'hash');\n\n    return Router.url(routeName, params, {\n      query: query,\n      hash: hash\n    });\n  });\n\n  Handlebars.registerHelper('renderRouter', function (options) {\n    return new Handlebars.SafeString(Router.render());\n  });\n\n  Handlebars.registerHelper('currentRouteController', function () {\n    return Router.current();\n  });\n\n  Handlebars.registerHelper('link', function (options) {\n    var hash = options.hash || {};\n    var route = hash.route;\n    var params = hash.params || this;\n    var query = hash.query;\n    var urlHash = hash.hash;\n    var cls = hash['class'] || '';\n\n    var path = Router.path(route, params, {\n      query: query,\n      hash: urlHash\n    });\n\n    var html = '<a href=\"' + path + '\" class=\"' + cls + '\">';\n    html += options.fn(this);\n    html += '</a>'\n\n    return new Handlebars.SafeString(html);\n  });\n}\n"]}