)]}'
{"version":3,"file":"/packages/accounts-password.js","sources":["accounts-password/password_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qC;AACA,E;AACA,wD;AACA,6B;AACA,uB;AACA,sE;AACA,uB;AACA,2B;AACA,8C;AACA,oE;AACA,qC;AACA,oC;;AAEA,mC;AACA,qC;AACA,sC;AACA,Q;AACA,mC;;AAEA,0B;;AAEA,4D;AACA,0E;AACA,4E;AACA,4D;AACA,+B;AACA,6E;AACA,2B;AACA,oC;AACA,iF;AACA,kC;AACA,a;AACA,K;;AAEA,kD;AACA,8B;AACA,yC;AACA,yC;AACA,yD;AACA,iD;AACA,Q;AACA,+B;AACA,K;AACA,E;;;AAGA,mC;AACA,oD;AACA,2D;;AAEA,wB;AACA,iD;AACA,wD;AACA,2D;AACA,0B;AACA,yB;;AAEA,4B;AACA,6B;AACA,+B;AACA,0B;AACA,K;AACA,E;;;;AAIA,sC;AACA,E;AACA,sE;AACA,qE;AACA,qE;AACA,8B;AACA,8C;AACA,yE;AACA,uB;AACA,6E;AACA,W;AACA,G;;AAEA,mD;;AAEA,qB;AACA,gF;AACA,6B;AACA,6B;AACA,gE;AACA,c;AACA,+B;AACA,O;AACA,O;AACA,yB;AACA,0C;AACA,sC;AACA,2C;AACA,+E;AACA,6B;AACA,6B;AACA,8E;AACA,e;AACA,O;;AAEA,oD;AACA,8B;AACA,2E;AACA,+B;AACA,+B;AACA,kE;AACA,gB;AACA,gD;AACA,+B;AACA,iF;AACA,kB;AACA,mC;AACA,W;AACA,S;AACA,S;AACA,O;AACA,G;AACA,E;;AAEA,iE;AACA,iB;AACA,E;AACA,0B;AACA,qB;AACA,yD;AACA,uD;AACA,qB;AACA,+C;AACA,mD;AACA,E;;AAEA,2D;AACA,+D;AACA,E;AACA,wB;AACA,8B;AACA,yD;AACA,iE;AACA,a;AACA,0C;AACA,mB;AACA,gD;;AAEA,mD;AACA,4B;AACA,gC;AACA,uC;AACA,6B;AACA,E;;AAEA,8D;AACA,4C;AACA,E;AACA,wB;AACA,yD;AACA,kD;AACA,a;AACA,0C;;AAEA,4B;AACA,8B;AACA,6B;AACA,6B;AACA,E","sourcesContent":["// Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\nMeteor.loginWithPassword = function (selector, password, callback) {\n  var srp = new SRP.Client(password);\n  var request = srp.startExchange();\n\n  if (typeof selector === 'string')\n    if (selector.indexOf('@') === -1)\n      selector = {username: selector};\n    else\n      selector = {email: selector};\n\n  request.user = selector;\n\n  // Normally, we only set Meteor.loggingIn() to true within\n  // Accounts.callLoginMethod, but we'd also like it to be true during the\n  // password exchange. So we set it to true here, and clear it on error; in\n  // the non-error case, it gets cleared by callLoginMethod.\n  Accounts._setLoggingIn(true);\n  Meteor.apply('beginPasswordExchange', [request], function (error, result) {\n    if (error || !result) {\n      Accounts._setLoggingIn(false);\n      error = error || new Error(\"No result from call to beginPasswordExchange\");\n      callback && callback(error);\n      return;\n    }\n\n    var response = srp.respondToChallenge(result);\n    Accounts.callLoginMethod({\n      methodArguments: [{srp: response}],\n      validateResult: function (result) {\n        if (!srp.verifyConfirmation({HAMK: result.HAMK}))\n          throw new Error(\"Server is cheating!\");\n      },\n      userCallback: callback});\n  });\n};\n\n\n// Attempt to log in as a new user.\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options); // we'll be modifying options\n\n  if (!options.password)\n    throw new Error(\"Must set options.password\");\n  var verifier = SRP.generateVerifier(options.password);\n  // strip old password, replacing with the verifier object\n  delete options.password;\n  options.srp = verifier;\n\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n};\n\n\n\n// Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\nAccounts.changePassword = function (oldPassword, newPassword, callback) {\n  if (!Meteor.user()) {\n    callback && callback(new Error(\"Must be logged in to change password.\"));\n    return;\n  }\n\n  var verifier = SRP.generateVerifier(newPassword);\n\n  if (!oldPassword) {\n    Meteor.apply('changePassword', [{srp: verifier}], function (error, result) {\n      if (error || !result) {\n        callback && callback(\n          error || new Error(\"No result from changePassword.\"));\n      } else {\n        callback && callback();\n      }\n    });\n  } else { // oldPassword\n    var srp = new SRP.Client(oldPassword);\n    var request = srp.startExchange();\n    request.user = {id: Meteor.user()._id};\n    Meteor.apply('beginPasswordExchange', [request], function (error, result) {\n      if (error || !result) {\n        callback && callback(\n          error || new Error(\"No result from call to beginPasswordExchange\"));\n        return;\n      }\n\n      var response = srp.respondToChallenge(result);\n      response.srp = verifier;\n      Meteor.apply('changePassword', [response], function (error, result) {\n        if (error || !result) {\n          callback && callback(\n            error || new Error(\"No result from changePassword.\"));\n        } else {\n          if (!srp.verifyConfirmation(result)) {\n            // Monkey business!\n            callback && callback(new Error(\"Old password verification failed.\"));\n          } else {\n            callback && callback();\n          }\n        }\n      });\n    });\n  }\n};\n\n// Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\nAccounts.forgotPassword = function(options, callback) {\n  if (!options.email)\n    throw new Error(\"Must pass options.email\");\n  Meteor.call(\"forgotPassword\", options, callback);\n};\n\n// Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\nAccounts.resetPassword = function(token, newPassword, callback) {\n  if (!token)\n    throw new Error(\"Need to pass token\");\n  if (!newPassword)\n    throw new Error(\"Need to pass newPassword\");\n\n  var verifier = SRP.generateVerifier(newPassword);\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, verifier],\n    userCallback: callback});\n};\n\n// Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\nAccounts.verifyEmail = function(token, callback) {\n  if (!token)\n    throw new Error(\"Need to pass token\");\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback});\n};\n"]}