)]}'
{"version":3,"file":"/packages/accounts-oauth.js","sources":["accounts-oauth/oauth_common.js","accounts-oauth/oauth_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oB;;AAEA,kB;;AAEA,wD;AACA,uD;AACA,kD;AACA,4B;AACA,kD;AACA,wB;;AAEA,sB;AACA,+E;AACA,gF;AACA,gF;AACA,wB;AACA,yD;AACA,sD;AACA,G;AACA,E;;AAEA,2C;AACA,0B;AACA,E;;;;;;;;;;;;;;;;;;;ACvBA,mE;AACA,6D;AACA,yB;AACA,+E;AACA,kF;AACA,4B;AACA,+B;AACA,uC;AACA,wC;AACA,Q;AACA,8C;AACA,6E;AACA,+C;AACA,+C;AACA,oE;AACA,+D;AACA,c;AACA,sB;AACA,O;AACA,Q;AACA,E;;AAEA,sE;AACA,4C;AACA,2E;AACA,mD;AACA,Y;AACA,gF;AACA,K;AACA,I;AACA,E","sourcesContent":["Accounts.oauth = {};\n\nvar services = {};\n\n// Helper for registering OAuth based accounts packages.\n// On the server, adds an index to the user collection.\nAccounts.oauth.registerService = function (name) {\n  if (_.has(services, name))\n    throw new Error(\"Duplicate service: \" + name);\n  services[name] = true;\n\n  if (Meteor.server) {\n    // Accounts.updateOrCreateUserFromExternalService does a lookup by this id,\n    // so this should be a unique index. You might want to add indexes for other\n    // fields returned by your service (eg services.github.login) but you can do\n    // that in your app.\n    Meteor.users._ensureIndex('services.' + name + '.id',\n                              {unique: 1, sparse: 1});\n  }\n};\n\nAccounts.oauth.serviceNames = function () {\n  return _.keys(services);\n};\n","// Send an OAuth login method to the server. If the user authorized\n// access in the popup this should log the user in, otherwise\n// nothing should happen.\nAccounts.oauth.tryLoginAfterPopupClosed = function(credentialToken, callback) {\n  var credentialSecret = OAuth._retrieveCredentialSecret(credentialToken) || null;\n  Accounts.callLoginMethod({\n    methodArguments: [{oauth: {\n      credentialToken: credentialToken,\n      credentialSecret: credentialSecret\n    }}],\n    userCallback: callback && function (err) {\n      // Allow server to specify a specify subclass of errors. We should come\n      // up with a more generic way to do this!\n      if (err && err instanceof Meteor.Error &&\n          err.error === Accounts.LoginCancelledError.numericError) {\n        callback(new Accounts.LoginCancelledError(err.reason));\n      } else {\n        callback(err);\n      }\n    }});\n};\n\nAccounts.oauth.credentialRequestCompleteHandler = function(callback) {\n  return function (credentialTokenOrError) {\n    if(credentialTokenOrError && credentialTokenOrError instanceof Error) {\n      callback && callback(credentialTokenOrError);\n    } else {\n      Accounts.oauth.tryLoginAfterPopupClosed(credentialTokenOrError, callback);\n    }\n  };\n};\n"]}