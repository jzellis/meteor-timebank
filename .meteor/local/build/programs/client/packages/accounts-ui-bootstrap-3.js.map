)]}'
{"version":3,"file":"/packages/accounts-ui-bootstrap-3.js","sources":["accounts-ui-bootstrap-3/accounts_ui.js","accounts-ui-bootstrap-3/login_buttons.html","accounts-ui-bootstrap-3/login_buttons_single.html","accounts-ui-bootstrap-3/login_buttons_dropdown.html","accounts-ui-bootstrap-3/login_buttons_dialogs.html","accounts-ui-bootstrap-3/login_buttons_session.js","accounts-ui-bootstrap-3/login_buttons.js","accounts-ui-bootstrap-3/login_buttons_single.js","accounts-ui-bootstrap-3/login_buttons_dropdown.js","accounts-ui-bootstrap-3/login_buttons_dialogs.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iB;AACA,mB;;AAEA,4B;AACA,0B;AACA,0B;AACA,I;AACA,C;;;AAGA,wC;AACA,0B;AACA,kE;AACA,0C;AACA,qC;AACA,iE;AACA,K;;AAEA,qC;AACA,qC;AACA,oB;AACA,mC;AACA,2B;AACA,oC;AACA,sB;AACA,kB;AACA,uC;AACA,oD;AACA,+F;AACA,U;AACA,iF;AACA,Y;AACA,wH;AACA,K;AACA,G;;AAEA,mC;AACA,mC;AACA,kE;AACA,6D;AACA,4G;AACA,6C;AACA,+F;AACA,c;AACA,iE;AACA,O;AACA,O;AACA,G;AACA,E;;AAEA,iD;AACA,mE;AACA,E;;;;;;;;;;;;;;;;;;ACpDA,0oB;AACA,+T;AACA,0wB;AACA,iW;AACA,0N;AACA,iZ;;;;;;;;;;;;;;;;;;;ACLA,0yB;AACA,2M;AACA,4V;;;;;;;;;;;;;;;;;;;ACFA,uqB;AACA,wX;AACA,mc;AACA,+jB;AACA,4X;AACA,0iC;AACA,mhB;AACA,8L;AACA,yS;AACA,oY;;;;;;;;;;;;;;;;;;;ACTA,8iD;AACA,qoC;AACA,+T;AACA,+mE;AACA,2X;;;;;;;;;;;;;;;;;;;ACJA,c;AACA,oB;AACA,sB;;AAEA,6E;AACA,mB;AACA,2B;AACA,2B;AACA,wB;;AAEA,mB;AACA,kB;;AAEA,6C;AACA,yB;AACA,yB;AACA,wB;;AAEA,yC;AACA,6C;AACA,6C;AACA,I;;AAEA,oC;AACA,qC;AACA,oE;AACA,I;;AAEA,0C;;AAEA,oF;AACA,mC;AACA,+B;AACA,uB;AACA,2D;AACA,yH;;AAEA,4B;AACA,M;;AAEA,gC;AACA,2C;AACA,M;;AAEA,wB;AACA,uB;AACA,2C;AACA,M;;AAEA,gC;AACA,sC;AACA,8C;AACA,8C;AACA,2C;AACA,yC;AACA,2B;AACA,M;;AAEA,oC;AACA,sC;AACA,wC;AACA,kC;AACA,M;;AAEA,qC;AACA,yC;AACA,qC;AACA,kC;AACA,M;;AAEA,qE;AACA,yC;AACA,8C;AACA,yC;AACA,sC;AACA,M;;AAEA,qE;AACA,+D;AACA,mC;AACA,M;AACA,sE;AACA,2D;AACA,sE;AACA,iB;AACA,uC;AACA,yC;AACA,0C;AACA,M;;AAEA,gC;AACA,sC;AACA,qC;AACA,M;;AAEA,uC;AACA,2D;AACA,+D;AACA,gE;AACA,K;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;ACrGA,a;AACA,gC;AACA,oC;;AAEA,sB;AACA,4D;;AAEA,8B;AACA,uB;AACA,2B;AACA,8C;AACA,yE;AACA,iC;AACA,oB;AACA,gB;AACA,yE;AACA,kC;AACA,oB;AACA,W;;AAEA,8C;AACA,mC;AACA,mD;AACA,sC;AACA,oD;AACA,e;AACA,S;AACA,O;;AAEA,qC;AACA,6C;AACA,O;;AAEA,M;AACA,oC;AACA,M;;AAEA,2D;AACA,iD;AACA,M;;AAEA,2D;AACA,yD;AACA,M;;AAEA,gE;AACA,iE;AACA,kC;AACA,4B;AACA,8F;AACA,2B;AACA,M;;AAEA,sE;AACA,kD;AACA,M;;;AAGA,M;AACA,oC;AACA,M;;AAEA,oE;AACA,c;AACA,0D;AACA,iD;AACA,M;;AAEA,6D;AACA,oD;AACA,M;;;;AAIA,M;AACA,mC;AACA,M;;AAEA,8D;AACA,uD;AACA,M;;AAEA,6D;AACA,sD;AACA,M;;AAEA,M;AACA,4C;AACA,M;;AAEA,kE;AACA,iD;AACA,M;;AAEA,M;AACA,c;AACA,M;;AAEA,qD;AACA,iC;AACA,kB;AACA,sB;;AAEA,8C;AACA,qC;AACA,0B;AACA,iC;AACA,oE;AACA,0C;;AAEA,kB;AACA,M;;AAEA,0D;AACA,yC;AACA,sF;;AAEA,qE;AACA,8D;AACA,yB;AACA,wB;;AAEA,0D;AACA,sC;AACA,sC;;AAEA,+C;AACA,oB;AACA,0B;AACA,c;AACA,W;AACA,M;;AAEA,4D;AACA,8C;AACA,M;;AAEA,kD;AACA,0E;AACA,M;;AAEA,sE;AACA,M;AACA,mE;AACA,0B;AACA,kE;AACA,mC;AACA,wB;AACA,gB;AACA,4F;AACA,yB;AACA,S;AACA,M;AACA,4D;AACA,kG;AACA,wB;;AAEA,6K;;AAEA,6B;AACA,wB;AACA,gB;AACA,8D;AACA,yB;AACA,S;AACA,M;AACA,kE;AACA,mC;AACA,wB;AACA,gB;AACA,4F;AACA,yB;AACA,S;AACA,M;;AAEA,K;;;;;;;;;;;;;;;;;;AC/KA,c;AACA,oB;AACA,0D;;AAEA,2D;AACA,wC;AACA,kC;AACA,0C;AACA,qC;AACA,mB;AACA,8C;AACA,iE;AACA,uB;AACA,yD;AACA,4D;AACA,gB;AACA,0E;AACA,S;AACA,Q;;AAEA,2E;;AAEA,6D;AACA,+D;AACA,0F;;AAEA,0C;AACA,K;AACA,K;;AAEA,6E;AACA,8E;AACA,I;;AAEA,kF;AACA,+B;AACA,2E;AACA,sB;AACA,Q;AACA,mC;AACA,I;;AAEA,gF;AACA,iC;AACA,yC;AACA,sD;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;AC/CA,c;;AAEA,oB;AACA,0D;;AAEA,4D;AACA,iC;AACA,iC;AACA,mG;AACA,8B;AACA,M;AACA,sE;AACA,8B;AACA,uD;AACA,qB;AACA,M;AACA,uC;AACA,0C;AACA,K;AACA,K;;;AAGA,I;AACA,sD;AACA,I;;AAEA,iD;AACA,kE;AACA,8B;AACA,0C;AACA,4D;AACA,qB;AACA,uB;AACA,K;AACA,K;;AAEA,oE;AACA,gD;AACA,I;;AAEA,6E;AACA,2D;AACA,I;;AAEA,0E;AACA,wD;AACA,I;;AAEA,wE;AACA,sD;AACA,I;;AAEA,qF;AACA,6E;AACA,8E;AACA,oF;AACA,M;AACA,6E;AACA,6B;AACA,sF;AACA,I;;;AAGA,I;AACA,uD;AACA,I;;AAEA,kD;AACA,kD;AACA,sB;AACA,M;;AAEA,yD;AACA,+B;AACA,yB;AACA,M;;AAEA,8D;AACA,8B;AACA,uB;AACA,M;;AAEA,4C;AACA,8B;AACA,0C;;AAEA,mE;AACA,+D;AACA,yD;AACA,+E;AACA,4E;AACA,wD;;AAEA,oD;AACA,6D;;AAEA,gF;AACA,qB;;AAEA,oD;AACA,4B;AACA,mE;AACA,8B;AACA,6D;AACA,wC;AACA,gD;AACA,4E;AACA,U;AACA,uE;AACA,M;AACA,qD;AACA,8B;AACA,0C;;AAEA,mE;AACA,yD;AACA,+E;;AAEA,qD;AACA,4D;;AAEA,gF;AACA,qB;AACA,yB;;AAEA,oD;AACA,yB;AACA,uE;AACA,wC;AACA,gD;AACA,mF;AACA,M;AACA,8C;AACA,0C;;AAEA,+D;AACA,wD;AACA,+F;;AAEA,qD;AACA,6D;;AAEA,gF;AACA,qB;;AAEA,oD;AACA,mE;AACA,iD;AACA,6D;AACA,4E;AACA,6D;AACA,qF;AACA,M;AACA,sK;AACA,+B;AACA,wB;AACA,K;AACA,K;;AAEA,mE;AACA,2E;AACA,6B;AACA,mB;AACA,Y;AACA,oD;AACA,2C;AACA,mE;AACA,4C;AACA,c;AACA,oC;AACA,O;AACA,K;AACA,I;;AAEA,yE;AACA,sD;AACA,I;;AAEA,4E;AACA,uD;AACA,I;;AAEA,qF;AACA,yD;AACA,I;;AAEA,qE;AACA,qD;AACA,I;;AAEA,8E;AACA,oC;AACA,I;;AAEA,6E;AACA,gE;AACA,I;;AAEA,+E;AACA,uD;AACA,I;;AAEA,uE;AACA,uB;AACA,uE;AACA,6B;AACA,2B;AACA,+F;AACA,gD;AACA,U;AACA,qD;AACA,6B;AACA,wE;AACA,U;AACA,mE;AACA,6B;AACA,qE;AACA,U;AACA,4E;AACA,6B;AACA,qB;AACA,S;AACA,M;;AAEA,wB;AACA,qD;AACA,6B;AACA,2B;AACA,+G;AACA,gD;AACA,U;AACA,mE;AACA,6B;AACA,2B;AACA,6E;AACA,gD;AACA,U;AACA,8E;AACA,6B;AACA,sF;AACA,U;AACA,4E;AACA,6B;AACA,qB;AACA,U;AACA,mE;AACA,6B;AACA,6B;AACA,gE;AACA,qE;AACA,uC;AACA,2B;AACA,yF;AACA,gD;AACA,S;AACA,M;;AAEA,gF;AACA,I;;AAEA,qF;AACA,2D;AACA,I;;AAEA,4E;AACA,wG;AACA,I;;AAEA,6E;AACA,mD;AACA,I;;AAEA,uF;AACA,sB;AACA,uG;AACA,2C;AACA,I;;AAEA,qF;AACA,0D;AACA,I;;AAEA,2D;AACA,oC;AACA,I;;;AAGA,I;AACA,wC;AACA,I;;AAEA,+C;AACA,gH;AACA,+B;AACA,yB;AACA,M;AACA,iE;AACA,8B;AACA,uB;AACA,K;AACA,K;;AAEA,6D;AACA,Y;AACA,wF;AACA,6B;AACA,qB;AACA,U;AACA,gF;AACA,6B;AACA,qB;AACA,U;AACA,uE;AACA,6B;AACA,6B;AACA,gE;AACA,qE;AACA,uC;AACA,2B;AACA,4D;AACA,gD;AACA,S;AACA,M;AACA,I;;;AAGA,I;AACA,Y;AACA,I;;AAEA,uC;AACA,8C;AACA,iB;AACA,kB;AACA,Q;AACA,2B;AACA,I;;AAEA,8C;AACA,8C;AACA,iB;AACA,kB;AACA,Q;AACA,8D;AACA,I;;AAEA,mC;AACA,gD;AACA,e;AACA,Q;AACA,c;AACA,I;;AAEA,2B;AACA,wC;;AAEA,6D;AACA,uD;AACA,6E;AACA,0E;AACA,sD;;AAEA,sB;AACA,4B;AACA,6D;AACA,e;AACA,U;AACA,6C;AACA,gC;AACA,uD;AACA,e;AACA,U;AACA,uC;AACA,0C;AACA,wF;AACA,+D;AACA,oE;AACA,e;AACA,U;AACA,wC;AACA,Y;AACA,kF;AACA,K;;AAEA,gF;AACA,kB;AACA,0E;AACA,c;AACA,4C;AACA,O;AACA,O;AACA,I;;AAEA,mC;AACA,gE;AACA,I;;AAEA,4B;AACA,wC;;AAEA,4D;;AAEA,6D;AACA,4B;AACA,6D;AACA,e;AACA,U;AACA,oC;AACA,K;;AAEA,uD;AACA,yB;AACA,uD;AACA,e;AACA,U;AACA,8B;AACA,K;;AAEA,0E;AACA,sD;AACA,2D;AACA,a;AACA,Q;AACA,kC;;AAEA,uC;AACA,a;;AAEA,mD;AACA,kB;AACA,0E;AACA,c;AACA,4C;AACA,O;AACA,O;AACA,I;;AAEA,oC;AACA,wC;;AAEA,iE;AACA,oC;AACA,gE;AACA,kB;AACA,4E;AACA,Y;AACA,wD;AACA,S;AACA,Y;AACA,oD;AACA,K;AACA,I;;AAEA,oC;AACA,wC;;AAEA,0E;AACA,6D;;AAEA,0E;AACA,sD;AACA,2D;AACA,a;;AAEA,uC;AACA,a;;AAEA,qE;AACA,kB;AACA,2E;AACA,c;AACA,4D;;AAEA,8C;AACA,sC;AACA,8C;AACA,iB;AACA,O;AACA,O;AACA,I;;AAEA,iD;AACA,0E;AACA,iE;AACA,iC;AACA,4E;AACA,wD;AACA,uC;AACA,kE;AACA,qB;AACA,O;AACA,K;AACA,gB;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;;AC9eA,c;AACA,oB;AACA,0D;;;AAGA,I;AACA,6D;AACA,sE;AACA,qE;AACA,gD;AACA,I;;AAEA,qC;AACA,gF;AACA,G;;AAEA,qC;AACA,gF;AACA,G;;AAEA,qE;AACA,qE;AACA,mE;AACA,8B;AACA,qC;AACA,wE;AACA,oC;AACA,mB;AACA,6D;AACA,oD;AACA,S;AACA,K;AACA,K;;;AAGA,I;AACA,iC;AACA,I;AACA,uD;AACA,qE;AACA,mB;AACA,G;;AAEA,wC;AACA,+D;AACA,sB;AACA,M;AACA,+D;AACA,+B;AACA,wB;AACA,M;AACA,+D;AACA,0D;AACA,kC;AACA,6D;AACA,K;AACA,K;;AAEA,mC;AACA,wC;AACA,mF;AACA,8D;AACA,a;;AAEA,2B;AACA,iE;AACA,wB;AACA,oB;AACA,4E;AACA,gB;AACA,8D;AACA,sC;AACA,iE;AACA,S;AACA,S;AACA,I;;AAEA,mE;AACA,yD;AACA,I;;;AAGA,I;AACA,iC;AACA,I;;AAEA,wC;AACA,+D;AACA,sB;AACA,M;AACA,2D;AACA,+B;AACA,wB;AACA,M;AACA,sE;AACA,0D;AACA,kC;AACA,2B;AACA,K;AACA,K;;AAEA,uD;AACA,iE;AACA,mB;AACA,I;;AAEA,mC;AACA,wC;AACA,4E;AACA,2D;AACA,a;;AAEA,2B;AACA,8D;AACA,wB;AACA,oB;AACA,4E;AACA,gB;AACA,8D;AACA,sC;AACA,+B;AACA,S;AACA,S;AACA,I;;AAEA,mE;AACA,yD;AACA,I;;;AAGA,I;AACA,qC;AACA,I;;AAEA,4C;AACA,wD;AACA,0D;AACA,K;AACA,K;;AAEA,2D;AACA,wD;AACA,I;;;AAGA,I;AACA,wC;AACA,I;;AAEA,iE;AACA,0E;AACA,sB;AACA,M;;AAEA,+C;AACA,0D;AACA,0C;AACA,K;AACA,K;;AAEA,8D;AACA,uG;AACA,4D;AACA,I;;;AAGA,I;AACA,yC;AACA,I;;AAEA,gD;AACA,kE;AACA,2E;AACA,M;AACA,6E;AACA,0E;AACA,iF;AACA,oE;AACA,4F;AACA,6B;AACA,8B;AACA,U;AACA,uD;AACA,kE;AACA,qE;AACA,gD;AACA,W;;AAEA,uC;AACA,sF;AACA,oB;AACA,mF;AACA,c;AACA,iF;AACA,W;AACA,O;AACA,M;AACA,+E;AACA,+E;AACA,0E;AACA,4C;AACA,qE;AACA,uE;AACA,0E;AACA,6B;AACA,K;AACA,K;;AAEA,qE;AACA,+D;AACA,8D;AACA,wC;AACA,sE;AACA,qC;AACA,yE;AACA,O;;AAEA,sF;AACA,I;;AAEA,mE;AACA,wD;AACA,mE;AACA,wF;AACA,gF;AACA,I;;AAEA,yC;AACA,mE;AACA,6B;AACA,I;;AAEA,2E;AACA,iC;AACA,I;;AAEA,+D;AACA,yE;AACA,I;;AAEA,0E;AACA,uC;AACA,6D;AACA,I;;AAEA,oE;AACA,8E;AACA,I;;;AAGA,gF;AACA,iC;AACA,yC;AACA,sD;AACA,I;;AAEA,M","sourcesContent":["if (!Accounts.ui)\n  Accounts.ui = {};\n\nif (!Accounts.ui._options) {\n  Accounts.ui._options = {\n    requestPermissions: {}\n  };\n}\n\n\nAccounts.ui.config = function(options) {\n  // validate options keys\n  var VALID_KEYS = ['passwordSignupFields', 'requestPermissions'];\n  _.each(_.keys(options), function (key) {\n    if (!_.contains(VALID_KEYS, key))\n      throw new Error(\"Accounts.ui.config: Invalid key: \" + key);\n  });\n\n  // deal with `passwordSignupFields`\n  if (options.passwordSignupFields) {\n    if (_.contains([\n      \"USERNAME_AND_EMAIL_CONFIRM\",\n      \"USERNAME_AND_EMAIL\",\n      \"USERNAME_AND_OPTIONAL_EMAIL\",\n      \"USERNAME_ONLY\",\n      \"EMAIL_ONLY\"\n    ], options.passwordSignupFields)) {\n      if (Accounts.ui._options.passwordSignupFields)\n        throw new Error(\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\");\n      else\n        Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n    } else {\n      throw new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \" + options.passwordSignupFields);\n    }\n  }\n\n  // deal with `requestPermissions`\n  if (options.requestPermissions) {\n    _.each(options.requestPermissions, function (scope, service) {\n      if (Accounts.ui._options.requestPermissions[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n      } else if (!(scope instanceof Array)) {\n        throw new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");\n      } else {\n        Accounts.ui._options.requestPermissions[service] = scope;\n      }\n    });\n  }\n};\n\nAccounts.ui._passwordSignupFields = function () {\n  return Accounts.ui._options.passwordSignupFields || \"EMAIL_ONLY\";\n};","Template.__define__(\"_loginButtons\",Package.handlebars.Handlebars.json_ast_to_func([\"<div id=\\\"login-buttons\\\" class=\\\"login-buttons-dropdown-align-\",[\"{\",[[0,\"align\"]]],\"\\\"></div>\\n  \",[\"#\",[[0,\"if\"],[0,\"currentUser\"]],[\"\\n    \",[\"#\",[[0,\"if\"],[0,\"loggingIn\"]],[\"\\n      \",\"\\n      \",[\"#\",[[0,\"if\"],[0,\"dropdown\"]],[\"\\n        \",[\">\",\"_loginButtonsLoggingIn\"],\"\\n      \"],[\"\\n        <div class=\\\"login-buttons-with-only-one-button\\\">\\n          \",[\">\",\"_loginButtonsLoggingInSingleLoginButton\"],\"\\n        </div>\\n      \"]],\"\\n    \"],[\"\\n      \",[\">\",\"_loginButtonsLoggedIn\"],\"\\n    \"]],\"\\n  \"],[\"\\n    \",[\">\",\"_loginButtonsLoggedOut\"],\"\\n  \"]]]));\nTemplate.__define__(\"_loginButtonsLoggedIn\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"dropdown\"]],[\"\\n    \",[\">\",\"_loginButtonsLoggedInDropdown\"],\"\\n  \"],[\"\\n    <div class=\\\"login-buttons-with-only-one-button\\\">\\n      \",[\">\",\"_loginButtonsLoggedInSingleLogoutButton\"],\"\\n    </div>\\n  \"]]]));\nTemplate.__define__(\"_loginButtonsLoggedOut\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"services\"]],[\" \",\"\\n    \",[\"#\",[[0,\"if\"],[0,\"configurationLoaded\"]],[\"\\n      \",[\"#\",[[0,\"if\"],[0,\"dropdown\"]],[\" \",\"\\n        \",[\">\",\"_loginButtonsLoggedOutDropdown\"],\"\\n      \"],[\"\\n        \",[\"#\",[[0,\"with\"],[0,\"singleService\"]],[\" \",\"\\n          <div class=\\\"login-buttons-with-only-one-button\\\">\\n            \",[\"#\",[[0,\"if\"],[0,\"loggingIn\"]],[\"\\n              \",[\">\",\"_loginButtonsLoggingInSingleLoginButton\"],\"\\n            \"],[\"\\n              \",[\">\",\"_loginButtonsLoggedOutSingleLoginButton\"],\"\\n            \"]],\"\\n          </div>\\n        \"]],\"\\n      \"]],\"\\n    \"]],\"\\n  \"],[\"\\n    <div class=\\\"no-services\\\">No login services configured</div>\\n  \"]]]));\nTemplate.__define__(\"_loginButtonsMessages\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"errorMessage\"]],[\"\\n    <div class=\\\"alert alert-danger\\\">\",[\"{\",[[0,\"errorMessage\"]]],\"</div>\\n  \"]],\"\\n  \",[\"#\",[[0,\"if\"],[0,\"infoMessage\"]],[\"\\n    <div class=\\\"alert alert-success no-margin\\\">\",[\"{\",[[0,\"infoMessage\"]]],\"</div>\\n  \"]]]));\nTemplate.__define__(\"_loginButtonsLoggingIn\",Package.handlebars.Handlebars.json_ast_to_func([[\">\",\"_loginButtonsLoggingInPadding\"],\"\\n  <div class=\\\"loading\\\">&nbsp;</div>\\n  \",[\">\",\"_loginButtonsLoggingInPadding\"]]));\nTemplate.__define__(\"_loginButtonsLoggingInPadding\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"unless\"],[0,\"dropdown\"]],[\"\\n    \",\"\\n    <div class=\\\"login-buttons-padding\\\">\\n      <div class=\\\"login-button single-login-button\\\" style=\\\"visibility: hidden;\\\" id=\\\"login-buttons-logout\\\">&nbsp;</div>\\n    </div>\\n  \"],[\"\\n    \",\"\\n    <div class=\\\"login-buttons-padding\\\" />\\n  \"]]]));\n","Template.__define__(\"_loginButtonsLoggedOutSingleLoginButton\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"login-text-and-button\\\">\\n    <div class=\\\"login-button single-login-button col-sm-12 \",[\"#\",[[0,\"if\"],[0,\"configured\"]],[\"btn btn-info \"],[\"configure-button btn btn-danger\"]],\"\\\" id=\\\"login-buttons-\",[\"{\",[[0,\"name\"]]],\"\\\">\\n      <div class=\\\"login-image\\\" id=\\\"login-buttons-image-\",[\"{\",[[0,\"name\"]]],\"\\\"></div>\\n      \",[\"#\",[[0,\"if\"],[0,\"configured\"]],[\"\\n        <span class=\\\"text-besides-image sign-in-text-\",[\"{\",[[0,\"name\"]]],\"\\\">Sign in with \",[\"{\",[[0,\"capitalizedName\"]]],\"</span>\\n      \"],[\"\\n        <span class=\\\"text-besides-image configure-text-\",[\"{\",[[0,\"name\"]]],\"\\\">Configure \",[\"{\",[[0,\"capitalizedName\"]]],\" Login</span>\\n      \"]],\"\\n    </div>\\n  </div>\"]));\nTemplate.__define__(\"_loginButtonsLoggingInSingleLoginButton\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"login-text-and-button\\\">\\n    \",[\">\",\"_loginButtonsLoggingIn\"],\"\\n  </div>\"]));\nTemplate.__define__(\"_loginButtonsLoggedInSingleLogoutButton\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"login-text-and-button\\\">\\n    <div class=\\\"login-display-name\\\">\\n      \",[\"{\",[[0,\"displayName\"]]],\"\\n    </div>\\n    <div class=\\\"login-button single-login-button\\\" id=\\\"login-buttons-logout\\\">Sign Out</div>\\n  </div>\"]));\n","Template.__define__(\"_loginButtonsLoggedInDropdown\",Package.handlebars.Handlebars.json_ast_to_func([\"<li id=\\\"login-dropdown-list\\\" class=\\\"dropdown\\\">\\n    <a class=\\\"dropdown-toggle\\\"  data-toggle=\\\"dropdown\\\">\\n      \",[\"{\",[[0,\"displayName\"]]],\"\\n      <b class=\\\"caret\\\"></b>\\n    </a>\\n    <div class=\\\"dropdown-menu col-sm-3\\\">\\n      \",[\"#\",[[0,\"if\"],[0,\"inMessageOnlyFlow\"]],[\"\\n        \",[\">\",\"_loginButtonsMessages\"],\"\\n      \"],[\"\\n        \",[\"#\",[[0,\"if\"],[0,\"inChangePasswordFlow\"]],[\"\\n          \",[\">\",\"_loginButtonsChangePassword\"],\"\\n        \"],[\"\\n          \",[\">\",\"_loginButtonsLoggedInDropdownActions\"],\"\\n        \"]],\"\\n      \"]],\"\\n    </div>\\n  </li>\"]));\nTemplate.__define__(\"_loginButtonsLoggedInDropdownActions\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"allowChangingPassword\"]],[\"\\n    <button class=\\\"btn btn-default btn-block\\\" id=\\\"login-buttons-open-change-password\\\">Change password</button>\\n  \"]],\"\\n  <button class=\\\"btn btn-block btn-primary\\\" id=\\\"login-buttons-logout\\\">Sign out</button>\"]));\nTemplate.__define__(\"_loginButtonsLoggedOutDropdown\",Package.handlebars.Handlebars.json_ast_to_func([\"<li id=\\\"login-dropdown-list\\\" class=\\\"dropdown\\\">\\n    <a class=\\\"dropdown-toggle\\\"  data-toggle=\\\"dropdown\\\">\\n      Sign In\",[\"#\",[[0,\"unless\"],[0,\"forbidClientAccountCreation\"]],[\" / Up\"]],\"\\n      <b class=\\\"caret\\\"></b>\\n    </a>\\n    <div class=\\\"dropdown-menu\\\">\\n      \",[\">\",\"_loginButtonsLoggedOutAllServices\"],\"\\n    </div>\\n  </li>\"]));\nTemplate.__define__(\"_loginButtonsLoggedOutAllServices\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"each\"],[0,\"services\"]],[\"\\n  \",[\"#\",[[0,\"unless\"],[0,\"hasPasswordService\"]],[\"\\n    \",[\">\",\"_loginButtonsMessages\"],\"\\n  \"]],\"\\n    \",[\"#\",[[0,\"if\"],[0,\"isPasswordService\"]],[\"\\n      \",[\"#\",[[0,\"if\"],[0,\"hasOtherServices\"]],[\" \",\"\\n        \",[\">\",\"_loginButtonsLoggedOutPasswordServiceSeparator\"],\"\\n      \"]],\"\\n      \",[\">\",\"_loginButtonsLoggedOutPasswordService\"],\"\\n    \"],[\"\\n      \",[\">\",\"_loginButtonsLoggedOutSingleLoginButton\"],\"\\n    \"]],\"\\n  \"]]]));\nTemplate.__define__(\"_loginButtonsLoggedOutPasswordServiceSeparator\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"or\\\">\\n    <span class=\\\"hline\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\n    <span class=\\\"or-text\\\">or</span>\\n    <span class=\\\"hline\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\n  </div>\"]));\nTemplate.__define__(\"_loginButtonsLoggedOutPasswordService\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"inForgotPasswordFlow\"]],[\"\\n    \",[\">\",\"_forgotPasswordForm\"],\"\\n  \"],[\"\\n    \",[\">\",\"_loginButtonsMessages\"],\"\\n    \",[\"#\",[[0,\"each\"],[0,\"fields\"]],[\"\\n      \",[\">\",\"_loginButtonsFormField\"],\"\\n    \"]],\"\\n    <button class=\\\"btn btn-primary col-sm-12\\\" id=\\\"login-buttons-password\\\" type=\\\"button\\\">\\n      \",[\"#\",[[0,\"if\"],[0,\"inSignupFlow\"]],[\"\\n        Create\\n      \"],[\"\\n        Sign in\\n      \"]],\"\\n    </button>\\n    \",[\"#\",[[0,\"if\"],[0,\"inLoginFlow\"]],[\"\\n      <div id=\\\"login-other-options\\\">\\n      \",[\"#\",[[0,\"if\"],[0,\"showForgotPasswordLink\"]],[\"\\n        <a id=\\\"forgot-password-link\\\" class=\\\"pull-left\\\" >Forgot password?</a>\\n      \"]],\"\\n      \",[\"#\",[[0,\"if\"],[0,\"showCreateAccountLink\"]],[\"\\n        <a id=\\\"signup-link\\\" class=\\\"pull-right\\\" >Create account</a>\\n      \"]],\"\\n      </div>\\n    \"]],\"\\n    \",[\"#\",[[0,\"if\"],[0,\"inSignupFlow\"]],[\"\\n      \",[\">\",\"_loginButtonsBackToLoginLink\"],\"\\n    \"]],\"\\n  \"]]]));\nTemplate.__define__(\"_forgotPasswordForm\",Package.handlebars.Handlebars.json_ast_to_func([\"<div class=\\\"login-form\\\">\\n    \",[\">\",\"_loginButtonsMessages\"],\"\\n    <div id=\\\"forgot-password-email-label-and-input\\\"> \",\"\\n      <input id=\\\"forgot-password-email\\\" type=\\\"email\\\" placeholder=\\\"E-mail\\\" class=\\\"form-control\\\" />\\n    </div>\\n    <button class=\\\"btn btn-primary login-button-form-submit col-sm-12\\\" id=\\\"login-buttons-forgot-password\\\">Reset password</button>\\n    \",[\">\",\"_loginButtonsBackToLoginLink\"],\"\\n  </div>\"]));\nTemplate.__define__(\"_loginButtonsBackToLoginLink\",Package.handlebars.Handlebars.json_ast_to_func([\"<button id=\\\"back-to-login-link\\\" class=\\\"btn btn-default col-sm-12\\\">Cancel</button>\"]));\nTemplate.__define__(\"_loginButtonsFormField\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"visible\"]],[\"\\n    <input id=\\\"login-\",[\"{\",[[0,\"fieldName\"]]],\"\\\" type=\\\"\",[\"{\",[[0,\"inputType\"]]],\"\\\" placeholder=\\\"\",[\"{\",[[0,\"fieldLabel\"]]],\"\\\" class=\\\"form-control\\\" />\\n  \"]]]));\nTemplate.__define__(\"_loginButtonsChangePassword\",Package.handlebars.Handlebars.json_ast_to_func([[\">\",\"_loginButtonsMessages\"],\"\\n  \",[\"#\",[[0,\"each\"],[0,\"fields\"]],[\"\\n    \",[\">\",\"_loginButtonsFormField\"],\"\\n  \"]],\"\\n  <button class=\\\"btn btn-primary\\\" id=\\\"login-buttons-do-change-password\\\">Change password</button>\\n  <button class=\\\"btn btn-default login-close\\\">Close</button>\"]));\n","Meteor.startup(function(){document.body.appendChild(Spark.render(Template.__define__(null,Package.handlebars.Handlebars.json_ast_to_func([[\">\",\"_resetPasswordDialog\"],\"\\n  \",[\">\",\"_enrollAccountDialog\"],\"\\n  \",[\">\",\"_justVerifiedEmailDialog\"],\"\\n  \",[\">\",\"_configureLoginServiceDialog\"],\"\\n\\n  <!-- if we're not showing a dropdown, we need some other place to show messages -->\\n  \",[\">\",\"_loginButtonsMessagesDialog\"]]))));});Template.__define__(\"_resetPasswordDialog\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"inResetPasswordFlow\"]],[\"\\n    <div class=\\\"modal\\\" id=\\\"login-buttons-reset-password-modal\\\">\\n      <div class=\\\"modal-dialog\\\">\\n        <div class=\\\"modal-content\\\">\\n          <div class=\\\"modal-header\\\">\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\">&times;</button>\\n            <h4 class=\\\"modal-title\\\">Reset your password</h4>\\n          </div>\\n          <div class=\\\"modal-body\\\">\\n            <input id=\\\"reset-password-new-password\\\" class=\\\"form-control\\\" type=\\\"password\\\" placeholder=\\\"New Password\\\"/>\\n            \",[\">\",\"_loginButtonsMessages\"],\"\\n          </div>\\n          <div class=\\\"modal-footer\\\">\\n            <a class=\\\"btn btn-default\\\" id=\\\"login-buttons-cancel-reset-password\\\">Close</a>\\n            <button class=\\\"btn btn-primary\\\" id=\\\"login-buttons-reset-password-button\\\">\\n              Set password\\n            </button>\\n          </div>\\n        </div><!-- /.modal-content -->\\n      </div><!-- /.modal-dalog -->\\n    </div><!-- /.modal -->\\n  \"]]]));\nTemplate.__define__(\"_enrollAccountDialog\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"inEnrollAccountFlow\"]],[\"\\n    <div class=\\\"modal\\\" id=\\\"login-buttons-enroll-account-modal\\\">\\n      <div class=\\\"modal-dialog\\\">\\n        <div class=\\\"modal-content\\\">\\n          <div class=\\\"modal-header\\\">\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\">&times;</button>\\n            <h4 class=\\\"modal-title\\\">Choose a password</h4>\\n          </div>\\n          <div class=\\\"modal-body\\\">\\n            <input id=\\\"enroll-account-password\\\" class=\\\"form-control\\\" type=\\\"password\\\" placeholder=\\\"New Password\\\" />\\n            \",[\">\",\"_loginButtonsMessages\"],\"\\n          </div>\\n          <div class=\\\"modal-footer\\\">\\n            <a class=\\\"btn btn-default\\\" id=\\\"login-buttons-cancel-enroll-account-button\\\">Close</a>\\n            <button class=\\\"btn btn-primary\\\" id=\\\"login-buttons-enroll-account-button\\\">\\n              Set password\\n            </button>\\n          </div>\\n        </div><!-- /.modal-content -->\\n      </div><!-- /.modal-dalog -->\\n    </div><!-- /.modal -->\\n  \"]]]));\nTemplate.__define__(\"_justVerifiedEmailDialog\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"visible\"]],[\"\\n    <div class=\\\"accounts-dialog accounts-centered-dialog\\\">\\n      Email verified\\n      <div class=\\\"login-button\\\" id=\\\"just-verified-dismiss-button\\\">Dismiss</div>\\n    </div>\\n  \"]]]));\nTemplate.__define__(\"_configureLoginServiceDialog\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"visible\"]],[\"\\n  <div class=\\\"modal-dialog\\\" id=\\\"configure-login-service-dialog-modal\\\">\\n      <div class=\\\"modal-content\\\">\\n          <div class=\\\"modal-header\\\">\\n              <h4 class=\\\"modal-title\\\">Configure Service</h4>\\n          </div>\\n          <div class=\\\"modal-body\\\">\\n            <div id=\\\"configure-login-service-dialog\\\" class=\\\"accounts-dialog accounts-centered-dialog\\\">\\n              \",[\"!\",[[0,\"configurationSteps\"]]],\"\\n              <p>\\n                Now, copy over some details.\\n              </p>\\n              <p>\\n                <table>\\n                  <colgroup>\\n                    <col span=\\\"1\\\" class=\\\"configuration_labels\\\">\\n                    <col span=\\\"1\\\" class=\\\"configuration_inputs\\\">\\n                  </colgroup>\\n                  \",[\"#\",[[0,\"each\"],[0,\"configurationFields\"]],[\"\\n                    <tr>\\n                      <td>\\n                        <label for=\\\"configure-login-service-dialog-\",[\"{\",[[0,\"property\"]]],\"\\\">\",[\"{\",[[0,\"label\"]]],\"</label>\\n                      </td>\\n                      <td>\\n                        <input id=\\\"configure-login-service-dialog-\",[\"{\",[[0,\"property\"]]],\"\\\" type=\\\"text\\\" />\\n                      </td>\\n                    </tr>\\n                  \"]],\"\\n                </table>\\n              </p>\\n            </div>\\n          </div>\\n          <div class=\\\"modal-footer new-section\\\">\\n                <div class=\\\"login-button btn btn-danger configure-login-service-dismiss-button\\\">\\n                  I'll do this later\\n                </div>\\n                \",[\"#\",[[0,\"isolate\"]],[\"\\n                  <div class=\\\"login-button login-button-configure btn btn-success \",[\"#\",[[0,\"if\"],[0,\"saveDisabled\"]],[\"login-button-disabled\"]],\"\\\"\\n                     id=\\\"configure-login-service-dialog-save-configuration\\\">\\n                    Save Configuration\\n                  </div>\\n                \"]],\"\\n              </div>\\n      </div>\\n  </div>\\n  <div class=\\\"modal-backdrop  in\\\"></div>\\n  \"]]]));\nTemplate.__define__(\"_loginButtonsMessagesDialog\",Package.handlebars.Handlebars.json_ast_to_func([[\"#\",[[0,\"if\"],[0,\"visible\"]],[\"\\n    <div class=\\\"accounts-dialog accounts-centered-dialog\\\" id=\\\"login-buttons-message-dialog\\\">\\n      \",[\">\",\"_loginButtonsMessages\"],\"\\n      <div class=\\\"login-button\\\" id=\\\"messages-dialog-dismiss-button\\\">Dismiss</div>\\n    </div>\\n  \"]]]));\n","(function () {\n  var VALID_KEYS = [\n    'dropdownVisible',\n\n    // XXX consider replacing these with one key that has an enum for values.\n    'inSignupFlow',\n    'inForgotPasswordFlow',\n    'inChangePasswordFlow',\n    'inMessageOnlyFlow',\n\n    'errorMessage',\n    'infoMessage',\n\n    // dialogs with messages (info and error)\n    'resetPasswordToken',\n    'enrollAccountToken',\n    'justVerifiedEmail',\n\n    'configureLoginServiceDialogVisible',\n    'configureLoginServiceDialogServiceName',\n    'configureLoginServiceDialogSaveDisabled'\n  ];\n\n  var validateKey = function (key) {\n    if (!_.contains(VALID_KEYS, key))\n      throw new Error(\"Invalid key in loginButtonsSession: \" + key);\n  };\n\n  var KEY_PREFIX = \"Meteor.loginButtons.\";\n\n  // XXX we should have a better pattern for code private to a package like this one\n  Accounts._loginButtonsSession = {\n    set: function(key, value) {\n      validateKey(key);\n      if (_.contains(['errorMessage', 'infoMessage'], key))\n        throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");\n\n      this._set(key, value);\n    },\n\n    _set: function(key, value) {\n      Session.set(KEY_PREFIX + key, value);\n    },\n\n    get: function(key) {\n      validateKey(key);\n      return Session.get(KEY_PREFIX + key);\n    },\n\n    closeDropdown: function () {\n      this.set('inSignupFlow', false);\n      this.set('inForgotPasswordFlow', false);\n      this.set('inChangePasswordFlow', false);\n      this.set('inMessageOnlyFlow', false);\n      this.set('dropdownVisible', false);\n      this.resetMessages();\n    },\n\n    infoMessage: function(message) {\n      this._set(\"errorMessage\", null);\n      this._set(\"infoMessage\", message);\n      this.ensureMessageVisible();\n    },\n\n    errorMessage: function(message) {\n      this._set(\"errorMessage\", message);\n      this._set(\"infoMessage\", null);\n      this.ensureMessageVisible();\n    },\n\n    // is there a visible dialog that shows messages (info and error)\n    isMessageDialogVisible: function () {\n      return this.get('resetPasswordToken') ||\n        this.get('enrollAccountToken') ||\n        this.get('justVerifiedEmail');\n    },\n\n    // ensure that somethings displaying a message (info or error) is\n    // visible.  if a dialog with messages is open, do nothing;\n    // otherwise open the dropdown.\n    //\n    // notably this doesn't matter when only displaying a single login\n    // button since then we have an explicit message dialog\n    // (_loginButtonsMessageDialog), and dropdownVisible is ignored in\n    // this case.\n    ensureMessageVisible: function () {\n      if (!this.isMessageDialogVisible())\n        this.set(\"dropdownVisible\", true);\n    },\n\n    resetMessages: function () {\n      this._set(\"errorMessage\", null);\n      this._set(\"infoMessage\", null);\n    },\n\n    configureService: function (name) {\n      this.set('configureLoginServiceDialogVisible', true);\n      this.set('configureLoginServiceDialogServiceName', name);\n      this.set('configureLoginServiceDialogSaveDisabled', true);\n    }\n  };\n}) ();","(function() {\n    if (!Accounts._loginButtons)\n        Accounts._loginButtons = {};\n\n    // for convenience\n    var loginButtonsSession = Accounts._loginButtonsSession;\n\n    Handlebars.registerHelper(\n        \"loginButtons\",\n        function(options) {\n            if (options.hash.align === \"left\")\n                return new Handlebars.SafeString(Template._loginButtons({\n                    align: \"left\"\n                }));\n            else\n                return new Handlebars.SafeString(Template._loginButtons({\n                    align: \"right\"\n                }));\n        });\n\n    // shared between dropdown and single mode\n    Template._loginButtons.events({\n        'click #login-buttons-logout': function() {\n            Meteor.logout(function() {\n                loginButtonsSession.closeDropdown();\n            });\n        }\n    });\n\n    Template._loginButtons.preserve({\n        'input[id]': Spark._labelFromIdOrName\n    });\n\n    //\n    // loginButtonLoggedOut template\n    //\n\n    Template._loginButtonsLoggedOut.dropdown = function() {\n        return Accounts._loginButtons.dropdown();\n    };\n\n    Template._loginButtonsLoggedOut.services = function() {\n        return Accounts._loginButtons.getLoginServices();\n    };\n\n    Template._loginButtonsLoggedOut.singleService = function() {\n        var services = Accounts._loginButtons.getLoginServices();\n        if (services.length !== 1)\n            throw new Error(\n                \"Shouldn't be rendering this template with more than one configured service\");\n        return services[0];\n    };\n\n    Template._loginButtonsLoggedOut.configurationLoaded = function() {\n        return Accounts.loginServicesConfigured();\n    };\n\n\n    //\n    // loginButtonsLoggedIn template\n    //\n\n    // decide whether we should show a dropdown rather than a row of\n    // buttons\n    Template._loginButtonsLoggedIn.dropdown = function() {\n        return Accounts._loginButtons.dropdown();\n    };\n\n    Template._loginButtonsLoggedIn.displayName = function() {\n        return Accounts._loginButtons.displayName();\n    };\n\n\n\n    //\n    // loginButtonsMessage template\n    //\n\n    Template._loginButtonsMessages.errorMessage = function() {\n        return loginButtonsSession.get('errorMessage');\n    };\n\n    Template._loginButtonsMessages.infoMessage = function() {\n        return loginButtonsSession.get('infoMessage');\n    };\n\n    //\n    // loginButtonsLoggingInPadding template\n    //\n\n    Template._loginButtonsLoggingInPadding.dropdown = function() {\n        return Accounts._loginButtons.dropdown();\n    };\n\n    //\n    // helpers\n    //\n\n    Accounts._loginButtons.displayName = function() {\n        var user = Meteor.user();\n        if (!user)\n            return '';\n\n        if (user.profile && user.profile.name)\n            return user.profile.name;\n        if (user.username)\n            return user.username;\n        if (user.emails && user.emails[0] && user.emails[0].address)\n            return user.emails[0].address;\n\n        return '';\n    };\n\n    Accounts._loginButtons.getLoginServices = function() {\n        // First look for OAuth services.\n        var services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : [];\n\n        // Be equally kind to all login services. This also preserves\n        // backwards-compatibility. (But maybe order should be\n        // configurable?)\n        services.sort();\n\n        // Add password, if it's there; it must come last.\n        if (this.hasPasswordService())\n            services.push('password');\n\n        return _.map(services, function(name) {\n            return {\n                name: name\n            };\n        });\n    };\n\n    Accounts._loginButtons.hasPasswordService = function() {\n        return !!Package['accounts-password'];\n    };\n\n    Accounts._loginButtons.dropdown = function() {\n        return this.hasPasswordService() || getLoginServices().length > 1;\n    };\n\n    // XXX improve these. should this be in accounts-password instead?\n    //\n    // XXX these will become configurable, and will be validated on\n    // the server as well.\n    Accounts._loginButtons.validateUsername = function(username) {\n        if (username.length >= 3) {\n            return true;\n        } else {\n            loginButtonsSession.errorMessage(\"Username must be at least 3 characters long\");\n            return false;\n        }\n    };\n    Accounts._loginButtons.validateEmail = function(email) {\n        if (Accounts.ui._passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\" && email === '')\n            return true;\n\n        var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        if (re.test(email)) {\n            return true;\n        } else {\n            loginButtonsSession.errorMessage(\"Invalid email\");\n            return false;\n        }\n    };\n    Accounts._loginButtons.validatePassword = function(password) {\n        if (password.length >= 6) {\n            return true;\n        } else {\n            loginButtonsSession.errorMessage(\"Password must be at least 6 characters long\");\n            return false;\n        }\n    };\n\n})();","(function () {\n  // for convenience\n  var loginButtonsSession = Accounts._loginButtonsSession;\n\n  Template._loginButtonsLoggedOutSingleLoginButton.events({\n    'click .login-button': function () {\n      var serviceName = this.name;\n      loginButtonsSession.resetMessages();\n      var callback = function (err) {\n        if (!err) {\n          loginButtonsSession.closeDropdown();\n        } else if (err instanceof Accounts.LoginCancelledError) {\n          // do nothing\n        } else if (err instanceof Accounts.ConfigError) {\n          loginButtonsSession.configureService(serviceName);\n        } else {\n          loginButtonsSession.errorMessage(err.reason || \"Unknown error\");\n        }\n      };\n\n      var loginWithService = Meteor[\"loginWith\" + capitalize(serviceName)];\n\n      var options = {}; // use default scope unless specified\n      if (Accounts.ui._options.requestPermissions[serviceName])\n        options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n\n      loginWithService(options, callback);\n    }\n  });\n\n  Template._loginButtonsLoggedOutSingleLoginButton.configured = function () {\n    return !!Accounts.loginServiceConfiguration.findOne({service: this.name});\n  };\n\n  Template._loginButtonsLoggedOutSingleLoginButton.capitalizedName = function () {\n    if (this.name === 'github')\n      // XXX we should allow service packages to set their capitalized name\n      return 'GitHub';\n    else\n      return capitalize(this.name);\n  };\n\n  // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\n  var capitalize = function(str){\n    str = str == null ? '' : String(str);\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n}) ();","(function () {\n\n  // for convenience\n  var loginButtonsSession = Accounts._loginButtonsSession;\n\n  // events shared between loginButtonsLoggedOutDropdown and\n  // loginButtonsLoggedInDropdown\n  Template._loginButtons.events({\n    'click input, click label, click button, click .dropdown-menu, click .alert': function(event) {\n      event.stopPropagation();\n    },\n    'click #login-name-link, click #login-sign-in-link': function () {\n      event.stopPropagation();\n      loginButtonsSession.set('dropdownVisible', true);\n      Meteor.flush();\n    },\n    'click .login-close': function () {\n      loginButtonsSession.closeDropdown();\n    }\n  });\n\n\n  //\n  // loginButtonsLoggedInDropdown template and related\n  //\n\n  Template._loginButtonsLoggedInDropdown.events({\n    'click #login-buttons-open-change-password': function(event) {\n      event.stopPropagation();\n      loginButtonsSession.resetMessages();\n      loginButtonsSession.set('inChangePasswordFlow', true);\n      Meteor.flush();\n      toggleDropdown();\n    }\n  });\n\n  Template._loginButtonsLoggedInDropdown.displayName = function () {\n    return Accounts._loginButtons.displayName();\n  };\n\n  Template._loginButtonsLoggedInDropdown.inChangePasswordFlow = function () {\n    return loginButtonsSession.get('inChangePasswordFlow');\n  };\n\n  Template._loginButtonsLoggedInDropdown.inMessageOnlyFlow = function () {\n    return loginButtonsSession.get('inMessageOnlyFlow');\n  };\n\n  Template._loginButtonsLoggedInDropdown.dropdownVisible = function () {\n    return loginButtonsSession.get('dropdownVisible');\n  };\n\n  Template._loginButtonsLoggedInDropdownActions.allowChangingPassword = function () {\n    // it would be more correct to check whether the user has a password set,\n    // but in order to do that we'd have to send more data down to the client,\n    // and it'd be preferable not to send down the entire service.password document.\n    //\n    // instead we use the heuristic: if the user has a username or email set.\n    var user = Meteor.user();\n    return user.username || (user.emails && user.emails[0] && user.emails[0].address);\n  };\n\n\n  //\n  // loginButtonsLoggedOutDropdown template and related\n  //\n\n  Template._loginButtonsLoggedOutDropdown.events({\n    'click #login-buttons-password': function () {\n      loginOrSignup();\n    },\n\n    'keypress #forgot-password-email': function (event) {\n      if (event.keyCode === 13)\n        forgotPassword();\n    },\n\n    'click #login-buttons-forgot-password': function (event) {\n      event.stopPropagation();\n      forgotPassword();\n    },\n\n    'click #signup-link': function (event) {\n      event.stopPropagation();\n      loginButtonsSession.resetMessages();\n\n      // store values of fields before swtiching to the signup form\n      var username = trimmedElementValueById('login-username');\n      var email = trimmedElementValueById('login-email');\n      var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n      // notably not trimmed. a password could (?) start or end with a space\n      var password = elementValueById('login-password');\n\n      loginButtonsSession.set('inSignupFlow', true);\n      loginButtonsSession.set('inForgotPasswordFlow', false);\n\n      // force the ui to update so that we have the approprate fields to fill in\n      Meteor.flush();\n\n      // update new fields with appropriate defaults\n      if (username !== null)\n        document.getElementById('login-username').value = username;\n      else if (email !== null)\n        document.getElementById('login-email').value = email;\n      else if (usernameOrEmail !== null)\n        if (usernameOrEmail.indexOf('@') === -1)\n          document.getElementById('login-username').value = usernameOrEmail;\n      else\n        document.getElementById('login-email').value = usernameOrEmail;\n    },\n    'click #forgot-password-link': function (event) {\n      event.stopPropagation();\n      loginButtonsSession.resetMessages();\n\n      // store values of fields before swtiching to the signup form\n      var email = trimmedElementValueById('login-email');\n      var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n\n      loginButtonsSession.set('inSignupFlow', false);\n      loginButtonsSession.set('inForgotPasswordFlow', true);\n\n      // force the ui to update so that we have the approprate fields to fill in\n      Meteor.flush();\n      //toggleDropdown();\n\n      // update new fields with appropriate defaults\n      if (email !== null)\n        document.getElementById('forgot-password-email').value = email;\n      else if (usernameOrEmail !== null)\n        if (usernameOrEmail.indexOf('@') !== -1)\n          document.getElementById('forgot-password-email').value = usernameOrEmail;\n    },\n    'click #back-to-login-link': function () {\n      loginButtonsSession.resetMessages();\n\n      var username = trimmedElementValueById('login-username');\n      var email = trimmedElementValueById('login-email')\n            || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\n\n      loginButtonsSession.set('inSignupFlow', false);\n      loginButtonsSession.set('inForgotPasswordFlow', false);\n\n      // force the ui to update so that we have the approprate fields to fill in\n      Meteor.flush();\n\n      if (document.getElementById('login-username'))\n        document.getElementById('login-username').value = username;\n      if (document.getElementById('login-email'))\n        document.getElementById('login-email').value = email;\n      // \"login-password\" is preserved thanks to the preserve-inputs package\n      if (document.getElementById('login-username-or-email'))\n        document.getElementById('login-username-or-email').value = email || username;\n    },\n    'keypress #login-username, keypress #login-email, keypress #login-username-or-email, keypress #login-password, keypress #login-password-again': function (event) {\n      if (event.keyCode === 13)\n        loginOrSignup();\n    }\n  });\n\n  // additional classes that can be helpful in styling the dropdown\n  Template._loginButtonsLoggedOutDropdown.additionalClasses = function () {\n    if (!Accounts.password) {\n      return false;\n    } else {\n      if (loginButtonsSession.get('inSignupFlow')) {\n        return 'login-form-create-account';\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\n        return 'login-form-forgot-password';\n      } else {\n        return 'login-form-sign-in';\n      }\n    }\n  };\n\n  Template._loginButtonsLoggedOutDropdown.dropdownVisible = function () {\n    return loginButtonsSession.get('dropdownVisible');\n  };\n\n  Template._loginButtonsLoggedOutDropdown.hasPasswordService = function () {\n    return Accounts._loginButtons.hasPasswordService();\n  };\n\n  Template._loginButtonsLoggedOutDropdown.forbidClientAccountCreation = function () {\n    return Accounts._options.forbidClientAccountCreation;\n  };\n\n  Template._loginButtonsLoggedOutAllServices.services = function () {\n    return Accounts._loginButtons.getLoginServices();\n  };\n\n  Template._loginButtonsLoggedOutAllServices.isPasswordService = function () {\n    return this.name === 'password';\n  };\n\n  Template._loginButtonsLoggedOutAllServices.hasOtherServices = function () {\n    return Accounts._loginButtons.getLoginServices().length > 1;\n  };\n\n  Template._loginButtonsLoggedOutAllServices.hasPasswordService = function () {\n    return Accounts._loginButtons.hasPasswordService();\n  };\n\n  Template._loginButtonsLoggedOutPasswordService.fields = function () {\n    var loginFields = [\n      {fieldName: 'username-or-email', fieldLabel: 'Username or Email',\n       visible: function () {\n         return _.contains(\n           [\"USERNAME_AND_EMAIL_CONFIRM\", \"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\"],\n           Accounts.ui._passwordSignupFields());\n       }},\n      {fieldName: 'username', fieldLabel: 'Username',\n       visible: function () {\n         return Accounts.ui._passwordSignupFields() === \"USERNAME_ONLY\";\n       }},\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n       visible: function () {\n         return Accounts.ui._passwordSignupFields() === \"EMAIL_ONLY\";\n       }},\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\n       visible: function () {\n         return true;\n       }}\n    ];\n\n    var signupFields = [\n      {fieldName: 'username', fieldLabel: 'Username',\n       visible: function () {\n         return _.contains(\n           [\"USERNAME_AND_EMAIL_CONFIRM\",\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"],\n           Accounts.ui._passwordSignupFields());\n       }},\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\n       visible: function () {\n         return _.contains(\n           [\"USERNAME_AND_EMAIL_CONFIRM\",\"USERNAME_AND_EMAIL\", \"EMAIL_ONLY\"],\n           Accounts.ui._passwordSignupFields());\n       }},\n      {fieldName: 'email', fieldLabel: 'Email (optional)', inputType: 'email',\n       visible: function () {\n         return Accounts.ui._passwordSignupFields() === \"USERNAME_AND_OPTIONAL_EMAIL\";\n       }},\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\n       visible: function () {\n         return true;\n       }},\n      {fieldName: 'password-again', fieldLabel: 'Password (again)',\n       inputType: 'password',\n       visible: function () {\n         // No need to make users double-enter their password if\n         // they'll necessarily have an email set, since they can use\n         // the \"forgot password\" flow.\n         return _.contains(\n           [\"USERNAME_AND_EMAIL_CONFIRM\",\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"],\n           Accounts.ui._passwordSignupFields());\n       }}\n    ];\n\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\n  };\n\n  Template._loginButtonsLoggedOutPasswordService.inForgotPasswordFlow = function () {\n    return loginButtonsSession.get('inForgotPasswordFlow');\n  };\n\n  Template._loginButtonsLoggedOutPasswordService.inLoginFlow = function () {\n    return !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow');\n  };\n\n  Template._loginButtonsLoggedOutPasswordService.inSignupFlow = function () {\n    return loginButtonsSession.get('inSignupFlow');\n  };\n\n  Template._loginButtonsLoggedOutPasswordService.showForgotPasswordLink = function () {\n    return _.contains(\n      [\"USERNAME_AND_EMAIL_CONFIRM\",\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"],\n      Accounts.ui._passwordSignupFields());\n  };\n\n  Template._loginButtonsLoggedOutPasswordService.showCreateAccountLink = function() {\n    return !Accounts._options.forbidClientAccountCreation;\n  };\n\n  Template._loginButtonsFormField.inputType = function () {\n    return this.inputType || \"text\";\n  };\n\n\n  //\n  // loginButtonsChangePassword template\n  //\n\n  Template._loginButtonsChangePassword.events({\n    'keypress #login-old-password, keypress #login-password, keypress #login-password-again': function (event) {\n      if (event.keyCode === 13)\n        changePassword();\n    },\n    'click #login-buttons-do-change-password': function (event) {\n      event.stopPropagation();\n      changePassword();\n    }\n  });\n\n  Template._loginButtonsChangePassword.fields = function () {\n    return [\n      {fieldName: 'old-password', fieldLabel: 'Current Password', inputType: 'password',\n       visible: function () {\n         return true;\n       }},\n      {fieldName: 'password', fieldLabel: 'New Password', inputType: 'password',\n       visible: function () {\n         return true;\n       }},\n      {fieldName: 'password-again', fieldLabel: 'New Password (again)',\n       inputType: 'password',\n       visible: function () {\n         // No need to make users double-enter their password if\n         // they'll necessarily have an email set, since they can use\n         // the \"forgot password\" flow.\n         return _.contains(\n           [\"USERNAME_AND_OPTIONAL_EMAIL\", \"USERNAME_ONLY\"],\n           Accounts.ui._passwordSignupFields());\n       }}\n    ];\n  };\n\n\n  //\n  // helpers\n  //\n\n  var elementValueById = function(id) {\n    var element = document.getElementById(id);\n    if (!element)\n      return null;\n    else\n      return element.value;\n  };\n\n  var trimmedElementValueById = function(id) {\n    var element = document.getElementById(id);\n    if (!element)\n      return null;\n    else\n      return element.value.replace(/^\\s*|\\s*$/g, \"\"); // trim;\n  };\n\n  var loginOrSignup = function () {\n    if (loginButtonsSession.get('inSignupFlow'))\n      signup();\n    else\n      login();\n  };\n\n  var login = function () {\n    loginButtonsSession.resetMessages();\n\n    var username = trimmedElementValueById('login-username');\n    var email = trimmedElementValueById('login-email');\n    var usernameOrEmail = trimmedElementValueById('login-username-or-email');\n    // notably not trimmed. a password could (?) start or end with a space\n    var password = elementValueById('login-password');\n\n    var loginSelector;\n    if (username !== null) {\n      if (!Accounts._loginButtons.validateUsername(username))\n        return;\n      else\n        loginSelector = {username: username};\n    } else if (email !== null) {\n      if (!Accounts._loginButtons.validateEmail(email))\n        return;\n      else\n        loginSelector = {email: email};\n    } else if (usernameOrEmail !== null) {\n      // XXX not sure how we should validate this. but this seems good enough (for now),\n      // since an email must have at least 3 characters anyways\n      if (!Accounts._loginButtons.validateUsername(usernameOrEmail))\n        return;\n      else\n        loginSelector = usernameOrEmail;\n    } else {\n      throw new Error(\"Unexpected -- no element to use as a login user selector\");\n    }\n\n    Meteor.loginWithPassword(loginSelector, password, function (error, result) {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.closeDropdown();\n      }\n    });\n  };\n\n  var toggleDropdown = function() {\n    $('#login-dropdown-list .dropdown-menu').dropdown('toggle');\n  };\n\n  var signup = function () {\n    loginButtonsSession.resetMessages();\n\n    var options = {}; // to be passed to Accounts.createUser\n\n    var username = trimmedElementValueById('login-username');\n    if (username !== null) {\n      if (!Accounts._loginButtons.validateUsername(username))\n        return;\n      else\n        options.username = username;\n    }\n\n    var email = trimmedElementValueById('login-email');\n    if (email !== null) {\n      if (!Accounts._loginButtons.validateEmail(email))\n        return;\n      else\n        options.email = email;\n    }\n\n    // notably not trimmed. a password could (?) start or end with a space\n    var password = elementValueById('login-password');\n    if (!Accounts._loginButtons.validatePassword(password))\n      return;\n    else\n      options.password = password;\n\n    if (!matchPasswordAgainIfPresent())\n      return;\n\n    Accounts.createUser(options, function (error) {\n      if (error) {\n        loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.closeDropdown();\n      }\n    });\n  };\n\n  var forgotPassword = function () {\n    loginButtonsSession.resetMessages();\n\n    var email = trimmedElementValueById(\"forgot-password-email\");\n    if (email.indexOf('@') !== -1) {\n      Accounts.forgotPassword({email: email}, function (error) {\n        if (error)\n          loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n        else\n          loginButtonsSession.infoMessage(\"Email sent\");\n      });\n    } else {\n      loginButtonsSession.infoMessage(\"Email sent\");\n    }\n  };\n\n  var changePassword = function () {\n    loginButtonsSession.resetMessages();\n\n    // notably not trimmed. a password could (?) start or end with a space\n    var oldPassword = elementValueById('login-old-password');\n\n    // notably not trimmed. a password could (?) start or end with a space\n    var password = elementValueById('login-password');\n    if (!Accounts._loginButtons.validatePassword(password))\n      return;\n\n    if (!matchPasswordAgainIfPresent())\n      return;\n\n    Accounts.changePassword(oldPassword, password, function (error) {\n      if (error) {\n         loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n      } else {\n        loginButtonsSession.infoMessage(\"Password changed\");\n\n        // wait 3 seconds, then expire the msg\n        Meteor.setTimeout(function() {\n          loginButtonsSession.resetMessages();\n        }, 3000);\n      }\n    });\n  };\n\n  var matchPasswordAgainIfPresent = function () {\n    // notably not trimmed. a password could (?) start or end with a space\n    var passwordAgain = elementValueById('login-password-again');\n    if (passwordAgain !== null) {\n      // notably not trimmed. a password could (?) start or end with a space\n      var password = elementValueById('login-password');\n      if (password !== passwordAgain) {\n        loginButtonsSession.errorMessage(\"Passwords don't match\");\n        return false;\n      }\n    }\n    return true;\n  };\n}) ();\n","(function () {\n  // for convenience\n  var loginButtonsSession = Accounts._loginButtonsSession;\n\n\n  //\n  // populate the session so that the appropriate dialogs are\n  // displayed by reading variables set by accounts-urls, which parses\n  // special URLs. since accounts-ui depends on accounts-urls, we are\n  // guaranteed to have these set at this point.\n  //\n\n  if (Accounts._resetPasswordToken) {\n    loginButtonsSession.set('resetPasswordToken', Accounts._resetPasswordToken);\n  }\n\n  if (Accounts._enrollAccountToken) {\n    loginButtonsSession.set('enrollAccountToken', Accounts._enrollAccountToken);\n  }\n\n  // Needs to be in Meteor.startup because of a package loading order\n  // issue. We can't be sure that accounts-password is loaded earlier\n  // than accounts-ui so Accounts.verifyEmail might not be defined.\n  Meteor.startup(function () {\n    if (Accounts._verifyEmailToken) {\n      Accounts.verifyEmail(Accounts._verifyEmailToken, function(error) {\n        Accounts._enableAutoLogin();\n        if (!error)\n          loginButtonsSession.set('justVerifiedEmail', true);\n        // XXX show something if there was an error.\n      });\n    }\n  });\n\n\n  //\n  // resetPasswordDialog template\n  //\n  Template._resetPasswordDialog.rendered = function() {\n    var $modal = $(this.find('#login-buttons-reset-password-modal'));\n    $modal.modal();\n  }\n\n  Template._resetPasswordDialog.events({\n    'click #login-buttons-reset-password-button': function () {\n      resetPassword();\n    },\n    'keypress #reset-password-new-password': function (event) {\n      if (event.keyCode === 13)\n        resetPassword();\n    },\n    'click #login-buttons-cancel-reset-password': function () {\n      loginButtonsSession.set('resetPasswordToken', null);\n      Accounts._enableAutoLogin();\n      $('#login-buttons-reset-password-modal').modal(\"hide\");\n    }\n  });\n\n  var resetPassword = function () {\n    loginButtonsSession.resetMessages();\n    var newPassword = document.getElementById('reset-password-new-password').value;\n    if (!Accounts._loginButtons.validatePassword(newPassword))\n      return;\n\n    Accounts.resetPassword(\n      loginButtonsSession.get('resetPasswordToken'), newPassword,\n      function (error) {\n        if (error) {\n          loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n        } else {\n          loginButtonsSession.set('resetPasswordToken', null);\n          Accounts._enableAutoLogin();\n          $('#login-buttons-reset-password-modal').modal(\"hide\");\n        }\n      });\n  };\n\n  Template._resetPasswordDialog.inResetPasswordFlow = function () {\n    return loginButtonsSession.get('resetPasswordToken');\n  };\n\n\n  //\n  // enrollAccountDialog template\n  //\n\n  Template._enrollAccountDialog.events({\n    'click #login-buttons-enroll-account-button': function () {\n      enrollAccount();\n    },\n    'keypress #enroll-account-password': function (event) {\n      if (event.keyCode === 13)\n        enrollAccount();\n    },\n    'click #login-buttons-cancel-enroll-account-button': function () {\n      loginButtonsSession.set('enrollAccountToken', null);\n      Accounts._enableAutoLogin();\n      $modal.modal(\"hide\");\n    }\n  });\n\n  Template._enrollAccountDialog.rendered = function() {\n    $modal = $(this.find('#login-buttons-enroll-account-modal'));\n    $modal.modal();\n  };\n\n  var enrollAccount = function () {\n    loginButtonsSession.resetMessages();\n    var password = document.getElementById('enroll-account-password').value;\n    if (!Accounts._loginButtons.validatePassword(password))\n      return;\n\n    Accounts.resetPassword(\n      loginButtonsSession.get('enrollAccountToken'), password,\n      function (error) {\n        if (error) {\n          loginButtonsSession.errorMessage(error.reason || \"Unknown error\");\n        } else {\n          loginButtonsSession.set('enrollAccountToken', null);\n          Accounts._enableAutoLogin();\n          $modal.modal(\"hide\");\n        }\n      });\n  };\n\n  Template._enrollAccountDialog.inEnrollAccountFlow = function () {\n    return loginButtonsSession.get('enrollAccountToken');\n  };\n\n\n  //\n  // justVerifiedEmailDialog template\n  //\n\n  Template._justVerifiedEmailDialog.events({\n    'click #just-verified-dismiss-button': function () {\n      loginButtonsSession.set('justVerifiedEmail', false);\n    }\n  });\n\n  Template._justVerifiedEmailDialog.visible = function () {\n    return loginButtonsSession.get('justVerifiedEmail');\n  };\n\n\n  //\n  // loginButtonsMessagesDialog template\n  //\n\n  // Template._loginButtonsMessagesDialog.rendered = function() {\n  //   var $modal = $(this.find('#configure-login-service-dialog-modal'));\n  //   $modal.modal();\n  // }\n\n  Template._loginButtonsMessagesDialog.events({\n    'click #messages-dialog-dismiss-button': function () {\n      loginButtonsSession.resetMessages();\n    }\n  });\n\n  Template._loginButtonsMessagesDialog.visible = function () {\n    var hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\n    return !Accounts._loginButtons.dropdown() && hasMessage;\n  };\n\n\n  //\n  // configureLoginServiceDialog template\n  //\n\n  Template._configureLoginServiceDialog.events({\n    'click .configure-login-service-dismiss-button': function () {\n      loginButtonsSession.set('configureLoginServiceDialogVisible', false);\n    },\n    'click #configure-login-service-dialog-save-configuration': function () {\n      if (loginButtonsSession.get('configureLoginServiceDialogVisible') &&\n          ! loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')) {\n        // Prepare the configuration document for this login service\n        var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\n        var configuration = {\n          service: serviceName\n        };\n        _.each(configurationFields(), function(field) {\n          configuration[field.property] = document.getElementById(\n            'configure-login-service-dialog-' + field.property).value\n            .replace(/^\\s*|\\s*$/g, \"\"); // trim;\n        });\n\n        // Configure this login service\n        Meteor.call(\"configureLoginService\", configuration, function (error, result) {\n          if (error)\n            Meteor._debug(\"Error configuring login service \" + serviceName, error);\n          else\n            loginButtonsSession.set('configureLoginServiceDialogVisible', false);\n        });\n      }\n    },\n    // IE8 doesn't support the 'input' event, so we'll run this on the keyup as\n    // well. (Keeping the 'input' event means that this also fires when you use\n    // the mouse to change the contents of the field, eg 'Cut' menu item.)\n    'input, keyup input': function (event) {\n      // if the event fired on one of the configuration input fields,\n      // check whether we should enable the 'save configuration' button\n      if (event.target.id.indexOf('configure-login-service-dialog') === 0)\n        updateSaveDisabled();\n    }\n  });\n\n  // check whether the 'save configuration' button should be enabled.\n  // this is a really strange way to implement this and a Forms\n  // Abstraction would make all of this reactive, and simpler.\n  var updateSaveDisabled = function () {\n    var anyFieldEmpty = _.any(configurationFields(), function(field) {\n      return document.getElementById(\n        'configure-login-service-dialog-' + field.property).value === '';\n    });\n\n    loginButtonsSession.set('configureLoginServiceDialogSaveDisabled', anyFieldEmpty);\n  };\n\n  // Returns the appropriate template for this login service.  This\n  // template should be defined in the service's package\n  var configureLoginServiceDialogTemplateForService = function () {\n    var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\n    return Template['configureLoginServiceDialogFor' + capitalize(serviceName)];\n  };\n\n  var configurationFields = function () {\n    var template = configureLoginServiceDialogTemplateForService();\n    return template.fields();\n  };\n\n  Template._configureLoginServiceDialog.configurationFields = function () {\n    return configurationFields();\n  };\n\n  Template._configureLoginServiceDialog.visible = function () {\n    return loginButtonsSession.get('configureLoginServiceDialogVisible');\n  };\n\n  Template._configureLoginServiceDialog.configurationSteps = function () {\n    // renders the appropriate template\n    return configureLoginServiceDialogTemplateForService()();\n  };\n\n  Template._configureLoginServiceDialog.saveDisabled = function () {\n    return loginButtonsSession.get('configureLoginServiceDialogSaveDisabled');\n  };\n\n\n  // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\n  var capitalize = function(str){\n    str = str == null ? '' : String(str);\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n}) ();\n"]}