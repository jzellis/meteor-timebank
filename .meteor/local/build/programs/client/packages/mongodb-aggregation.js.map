)]}'
{"version":3,"file":"/packages/mongodb-aggregation.js","sources":["mongodb-aggregation/client.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAG,MAAM,CAAC,QAAV;AAEE,GAAC,CAAC,MAAF,CAAS,MAAM,CAAC,UAAU,UAA1B,EAEE;cAAU,SAAC,GAAD,EAAM,QAAN;aACR,MAAM,CAAC,KAAP,CAAa,uBAAb,EAAsC,CAAC,IAAC,MAAF,EAAS,UAAT,EAAqB,GAArB,CAAtC,EAAiE;QAAC,MAAK,KAAN;QAAa,kBAAkB,QAA/B;OAAjE,EADQ;KAAV;IAGA,WAAW,SAAC,QAAD,EAAW,QAAX;aACT,MAAM,CAAC,KAAP,CAAa,uBAAb,EAAsC,CAAC,IAAC,MAAF,EAAS,WAAT,EAAsB,QAAtB,CAAtC,EAAuE;QAAC,MAAK,KAAN;QAAa,kBAAkB,QAA/B;OAAvE,EADS;KAHX;IAMA,YAAY,SAAC,GAAD,EAAM,MAAN,EAAc,OAAd,EAAuB,QAAvB;aACV,MAAM,CAAC,KAAP,CAAa,uBAAb,EAAsC,CAAC,IAAC,MAAF,EAAS,WAAT,EAAsB,CAAC,GAAD,EAAM,MAAN,EAAc,OAAd,CAAtB,CAAtC,EAAqF;QAAC,MAAK,KAAN;QAAa,kBAAkB,QAA/B;OAArF,EADU;KANZ;IASA,WAAW,SAAC,GAAD,EAAM,MAAN,EAAc,OAAd,EAAuB,QAAvB;aACT,MAAM,CAAC,KAAP,CAAa,gBAAb,EAA+B,CAAC,IAAC,MAAF,EAAS,GAAT,EAAc,MAAd,EAAsB,OAAtB,CAA/B,EAA+D;QAAC,MAAK,KAAN;QAAa,kBAAkB,QAA/B;OAA/D,EADS;KATX;GAFF,EAFF;;A","sourcesContent":["# This is somewhat counter to Meteor logic - these calls simply translate corresponding signatures and call methods\n# on the server, returning results in the callback (error, result) function\n# So, on one hand, aggregation framework is supposed to be (?) read-only, so it's ok that we expose all these methods\n# as the client cannot alter db (?). BUT - we still expose ALL data to the client in this way, so:\n# TODO some form of access control is needed.\n\nif Meteor.isClient\n\n  _.extend Meteor.Collection::,\n\n    distinct: (key, callback) ->\n      Meteor.apply \"_callAdvancedDBMethod\", [@_name, \"distinct\", key], {wait:false, onResultReceived: callback}\n\n    aggregate: (pipeline, callback) ->\n      Meteor.apply \"_callAdvancedDBMethod\", [@_name, \"aggregate\", pipeline], {wait:false, onResultReceived: callback}\n\n    mapReduce1: (map, reduce, options, callback) ->\n      Meteor.apply \"_callAdvancedDBMethod\", [@_name, \"mapReduce\", [map, reduce, options]], {wait:false, onResultReceived: callback}\n\n    mapReduce: (map, reduce, options, callback)->\n      Meteor.apply \"_callMapReduce\", [@_name, map, reduce, options], {wait:false, onResultReceived: callback}"]}