)]}'
{"version":3,"file":"/packages/mongodb-aggregation.js","sources":["mongodb-aggregation/client.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,CAAU,GAAP,EAAM,EAAT;CAEE,SAA0B;CAExB,CAAU,EAAV,KAAW;CACF,CAA+B,EAAE,CAAxC,CAAM,IAAgC,GAAtC;CAAiE,CAAM,EAAL,CAAD,GAAC;CAAD,CAA+B,MAAlB;CADtE,OACR;CADF,IAAU;CAAV,CAGW,EAAX,IAAW,CAAX;CACS,CAA+B,EAAE,CAAxC,CAAM,EAAgC,KAAtC;CAAuE,CAAM,EAAL,CAAD,GAAC;CAAD,CAA+B,MAAlB;CAD3E,OACT;CAJF,IAGW;CAHX,CAMY,EAAZ,EAAY,GAAC,CAAb;CACS,CAA+B,CAAsB,CAApB,CAAxC,CAAM,CAAsD,IAAtB,EAAtC;CAAqF,CAAM,EAAL,CAAD,GAAC;CAAD,CAA+B,MAAlB;CADxF,OACV;CAPF,IAMY;CANZ,CASW,EAAX,EAAW,GAAX;CACS,CAAwB,EAAE,CAAjC,CAAM,CAAyB,MAA/B;CAA+D,CAAM,EAAL,CAAD,GAAC;CAAD,CAA+B,MAAlB;CADnE,OACT;CAVF,IASW;CAXb;CAFF;A","sourcesContent":["# This is somewhat counter to Meteor logic - these calls simply translate corresponding signatures and call methods\n# on the server, returning results in the callback (error, result) function\n# So, on one hand, aggregation framework is supposed to be (?) read-only, so it's ok that we expose all these methods\n# as the client cannot alter db (?). BUT - we still expose ALL data to the client in this way, so:\n# TODO some form of access control is needed.\n\nif Meteor.isClient\n\n  _.extend Meteor.Collection::,\n\n    distinct: (key, callback) ->\n      Meteor.apply \"_callAdvancedDBMethod\", [@_name, \"distinct\", key], {wait:false, onResultReceived: callback}\n\n    aggregate: (pipeline, callback) ->\n      Meteor.apply \"_callAdvancedDBMethod\", [@_name, \"aggregate\", pipeline], {wait:false, onResultReceived: callback}\n\n    mapReduce1: (map, reduce, options, callback) ->\n      Meteor.apply \"_callAdvancedDBMethod\", [@_name, \"mapReduce\", [map, reduce, options]], {wait:false, onResultReceived: callback}\n\n    mapReduce: (map, reduce, options, callback)->\n      Meteor.apply \"_callMapReduce\", [@_name, map, reduce, options], {wait:false, onResultReceived: callback}"]}