)]}'
{"version":3,"file":"/packages/reload.js","sources":["reload/reload.js","reload/deprecated.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,kE;AACA,gE;AACA,E;AACA,sD;AACA,E;AACA,mE;AACA,uE;AACA,qE;AACA,gE;AACA,sE;AACA,mE;AACA,4C;AACA,uC;AACA,gE;AACA,4D;AACA,E;AACA,qE;AACA,qE;AACA,wE;AACA,sE;AACA,oC;AACA,E;AACA,qE;AACA,uE;AACA,2C;AACA,G;;AAEA,kE;AACA,kE;AACA,qD;AACA,4C;;AAEA,+B;AACA,gE;AACA,gE;AACA,iE;AACA,gE;AACA,4C;AACA,oB;;;AAGA,kB;AACA,+B;AACA,a;AACA,4E;AACA,iE;AACA,8D;AACA,8C;AACA,sC;AACA,Q;AACA,yD;AACA,8C;AACA,C;;AAEA,+B;AACA,oB;AACA,K;AACA,oC;AACA,uC;AACA,uD;AACA,oB;AACA,G;AACA,e;AACA,yD;AACA,C;;AAEA,+D;AACA,yD;AACA,6C;AACA,6B;AACA,C;;;AAGA,mB;;AAEA,kC;;AAEA,Y;;AAEA,gE;AACA,kE;AACA,oE;AACA,oE;AACA,mE;AACA,+D;AACA,oE;AACA,2D;AACA,iE;AACA,mE;AACA,oE;AACA,6E;AACA,qB;AACA,E;AACA,+C;AACA,kB;AACA,mD;AACA,oB;AACA,qB;AACA,G;AACA,mD;AACA,E;;AAEA,yC;AACA,iE;AACA,E;AACA,yC;AACA,wB;AACA,E;;AAEA,kE;AACA,iE;AACA,iE;AACA,mE;AACA,wB;AACA,E;AACA,sB;AACA,8B;AACA,gB;AACA,W;AACA,mB;;AAEA,qD;AACA,+D;AACA,qB;AACA,2B;AACA,uC;AACA,8B;AACA,gC;AACA,yC;AACA,qB;AACA,kC;AACA,sC;AACA,0C;AACA,M;;AAEA,S;AACA,mC;AACA,iC;AACA,uE;AACA,S;AACA,mB;AACA,4E;AACA,gB;AACA,K;;AAEA,kE;AACA,W;AACA,+C;AACA,qB;AACA,kD;AACA,iF;AACA,O;AACA,Y;AACA,4F;AACA,K;;AAEA,+D;AACA,6B;AACA,Q;;AAEA,c;AACA,E;;;;;;;;;;;;;;;;;;;AClKA,8E;AACA,sD;AACA,wB;AACA,kB;AACA,+B;AACA,uC;AACA,wB;AACA,E","sourcesContent":["/**\n * This code does _NOT_ support hot (session-restoring) reloads on\n * IE6,7. It only works on browsers with sessionStorage support.\n *\n * There are a couple approaches to add IE6,7 support:\n *\n * - use IE's \"userData\" mechanism in combination with window.name.\n * This mostly works, however the problem is that it can not get to the\n * data until after DOMReady. This is a problem for us since this API\n * relies on the data being ready before API users run. We could\n * refactor using Meteor.startup in all API users, but that might slow\n * page loads as we couldn't start the stream until after DOMReady.\n * Here are some resources on this approach:\n * https://github.com/hugeinc/USTORE.js\n * http://thudjs.tumblr.com/post/419577524/localstorage-userdata\n * http://www.javascriptkit.com/javatutors/domstorage2.shtml\n *\n * - POST the data to the server, and have the server send it back on\n * page load. This is nice because it sidesteps all the local storage\n * compatibility issues, however it is kinda tricky. We can use a unique\n * token in the URL, then get rid of it with HTML5 pushstate, but that\n * only works on pushstate browsers.\n *\n * This will all need to be reworked entirely when we add server-side\n * HTML rendering. In that case, the server will need to have access to\n * the client's session to render properly.\n */\n\n// XXX when making this API public, also expose a flag for the app\n// developer to know whether a hot code push is happening. This is\n// useful for apps using `window.onbeforeunload`. See\n// https://github.com/meteor/meteor/pull/657\n\nvar KEY_NAME = 'Meteor_Reload';\n// after how long should we consider this no longer an automatic\n// reload, but a fresh restart. This only happens if a reload is\n// interrupted and a user manually restarts things. The only time\n// this is really weird is if a user navigates away mid-refresh,\n// then manually navigates back to the page.\nvar TIMEOUT = 30000;\n\n\nvar old_data = {};\n// read in old data at startup.\nvar old_json;\n// On Firefox with dom.storage.enabled set to false, sessionStorage is null,\n// so we have to both check to see if it is defined and not null.\nif (typeof sessionStorage !== \"undefined\" && sessionStorage) {\n  old_json = sessionStorage.getItem(KEY_NAME);\n  sessionStorage.removeItem(KEY_NAME);\n} else {\n  // Unsupported browser (IE 6,7). No session resumption.\n  // Meteor._debug(\"XXX UNSUPPORTED BROWSER\");\n}\n\nif (!old_json) old_json = '{}';\nvar old_parsed = {};\ntry {\n  old_parsed = JSON.parse(old_json);\n  if (typeof old_parsed !== \"object\") {\n    Meteor._debug(\"Got bad data on reload. Ignoring.\");\n    old_parsed = {};\n  }\n} catch (err) {\n  Meteor._debug(\"Got invalid JSON on reload. Ignoring.\");\n}\n\nif (old_parsed.reload && typeof old_parsed.data === \"object\" &&\n    old_parsed.time + TIMEOUT > (new Date()).getTime()) {\n  // Meteor._debug(\"Restoring reload data.\");\n  old_data = old_parsed.data;\n}\n\n\nvar providers = [];\n\n////////// External API //////////\n\nReload = {};\n\n// Packages that support migration should register themselves by\n// calling this function. When it's time to migrate, callback will\n// be called with one argument, the \"retry function.\" If the package\n// is ready to migrate, it should return [true, data], where data is\n// its migration data, an arbitrary JSON value (or [true] if it has\n// no migration data this time). If the package needs more time\n// before it is ready to migrate, it should return false. Then, once\n// it is ready to migrating again, it should call the retry\n// function. The retry function will return immediately, but will\n// schedule the migration to be retried, meaning that every package\n// will be polled once again for its migration data. If they are all\n// ready this time, then the migration will happen. name must be set if there\n// is migration data.\n//\nReload._onMigrate = function (name, callback) {\n  if (!callback) {\n    // name not provided, so first arg is callback.\n    callback = name;\n    name = undefined;\n  }\n  providers.push({name: name, callback: callback});\n};\n\n// Called by packages when they start up.\n// Returns the object that was saved, or undefined if none saved.\n//\nReload._migrationData = function (name) {\n  return old_data[name];\n};\n\n// Migrating reload: reload this page (presumably to pick up a new\n// version of the code or assets), but save the program state and\n// migrate it over. This function returns immediately. The reload\n// will happen at some point in the future once all of the packages\n// are ready to migrate.\n//\nvar reloading = false;\nReload._reload = function () {\n  if (reloading)\n    return;\n  reloading = true;\n\n  var tryReload = function () { _.defer(function () {\n    // Make sure each package is ready to go, and collect their\n    // migration data\n    var migrationData = {};\n    var remaining = _.clone(providers);\n    while (remaining.length) {\n      var p = remaining.shift();\n      var status = p.callback(tryReload);\n      if (!status[0])\n        return; // not ready yet..\n      if (status.length > 1 && p.name)\n        migrationData[p.name] = status[1];\n    };\n\n    try {\n      // Persist the migration data\n      var json = JSON.stringify({\n        time: (new Date()).getTime(), data: migrationData, reload: true\n      });\n    } catch (err) {\n      Meteor._debug(\"Couldn't serialize data for migration\", migrationData);\n      throw err;\n    }\n\n    if (typeof sessionStorage !== \"undefined\" && sessionStorage) {\n      try {\n        sessionStorage.setItem(KEY_NAME, json);\n      } catch (err) {\n        // happens in safari with private browsing\n        Meteor._debug(\"Couldn't save data for migration to sessionStorage\", err);\n      }\n    } else {\n      Meteor._debug(\"Browser does not support sessionStorage. Not saving migration state.\");\n    }\n\n    // Tell the browser to shut down this VM and make a new one\n    window.location.reload();\n  }); };\n\n  tryReload();\n};\n","// Reload functionality used to live on Meteor._reload. Be nice and try not to\n// break code that uses it, even though it's internal.\n// XXX COMPAT WITH 0.6.4\nMeteor._reload = {\n  onMigrate: Reload._onMigrate,\n  migrationData: Reload._migrationData,\n  reload: Reload._reload\n};\n"]}