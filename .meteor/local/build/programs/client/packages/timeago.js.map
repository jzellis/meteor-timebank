)]}'
{"version":3,"file":"/packages/timeago.js","sources":["timeago/timeago/jquery.timeago.js","timeago/helper.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,yE;AACA,yE;AACA,E;AACA,gB;AACA,iB;AACA,2B;AACA,uB;AACA,4E;AACA,E;AACA,iC;AACA,2B;AACA,E;AACA,0E;AACA,G;;AAEA,qB;AACA,mD;AACA,4C;AACA,gC;AACA,U;AACA,sB;AACA,oB;AACA,G;AACA,gB;AACA,mC;AACA,oC;AACA,gC;AACA,+C;AACA,iD;AACA,+C;AACA,0C;AACA,Y;AACA,oD;AACA,K;AACA,I;AACA,qB;;AAEA,uB;AACA,e;AACA,2B;AACA,yB;AACA,yB;AACA,gB;AACA,gB;AACA,wB;AACA,4B;AACA,yB;AACA,kC;AACA,sC;AACA,iC;AACA,8B;AACA,8B;AACA,gC;AACA,qB;AACA,wB;AACA,+B;AACA,4B;AACA,6B;AACA,0B;AACA,2B;AACA,mB;AACA,O;AACA,M;AACA,uC;AACA,qC;AACA,gC;AACA,gC;AACA,sC;AACA,iC;AACA,oC;AACA,oC;AACA,S;AACA,O;;AAEA,oD;AACA,iC;AACA,+B;AACA,4B;AACA,6B;;AAEA,qD;AACA,kH;AACA,iE;AACA,4C;AACA,O;;AAEA,gF;AACA,mD;AACA,sE;AACA,iD;AACA,gE;AACA,8C;AACA,6D;AACA,+C;AACA,qE;AACA,gD;AACA,gD;;AAEA,6C;AACA,8D;AACA,6D;AACA,M;AACA,8B;AACA,8B;AACA,uD;AACA,8C;AACA,iD;AACA,wE;AACA,yB;AACA,M;AACA,8B;AACA,uF;AACA,+B;AACA,M;AACA,4B;AACA,2D;AACA,oF;AACA,K;AACA,K;;AAEA,6D;AACA,4C;AACA,0D;AACA,mB;AACA,qB;AACA,8C;AACA,mB;AACA,2B;AACA,iC;AACA,0E;AACA,O;AACA,M;AACA,2B;AACA,4D;AACA,0B;AACA,M;AACA,8B;AACA,4H;AACA,0B;AACA,M;AACA,0B;AACA,kC;AACA,oD;AACA,qC;AACA,O;AACA,K;AACA,I;;AAEA,4C;AACA,yD;AACA,Y;AACA,0E;AACA,K;AACA,6D;AACA,yB;AACA,6B;AACA,O;AACA,gB;AACA,I;;AAEA,sB;AACA,iC;AACA,yB;;AAEA,gC;AACA,mE;AACA,6C;AACA,O;AACA,K;AACA,gB;AACA,G;;AAEA,iC;AACA,yB;AACA,mC;AACA,kE;AACA,wC;AACA,oC;AACA,iF;AACA,qF;AACA,oC;AACA,O;AACA,K;AACA,mC;AACA,G;;AAEA,0B;AACA,sC;AACA,G;;AAEA,2B;AACA,mD;AACA,G;;AAEA,wB;AACA,iC;AACA,iC;AACA,I;;;;;;;;;;;;;;;;;;;ACtMA,wC;AACA,gE;AACA,sC;AACA,gB;AACA,e;AACA,+B;AACA,yD;AACA,K;AACA,gC;AACA,6B;AACA,Y;AACA,sB;AACA,K;AACA,K;AACA,C","sourcesContent":["/**\n * Timeago is a jQuery plugin that makes it easy to support automatically\n * updating fuzzy timestamps (e.g. \"4 minutes ago\" or \"about 1 day ago\").\n *\n * @name timeago\n * @version 1.3.0\n * @requires jQuery v1.2.3+\n * @author Ryan McGeary\n * @license MIT License - http://www.opensource.org/licenses/mit-license.php\n *\n * For usage and examples, visit:\n * http://timeago.yarp.com/\n *\n * Copyright (c) 2008-2013, Ryan McGeary (ryan -[at]- mcgeary [*dot*] org)\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n}(function ($) {\n  $.timeago = function(timestamp) {\n    if (timestamp instanceof Date) {\n      return inWords(timestamp);\n    } else if (typeof timestamp === \"string\") {\n      return inWords($.timeago.parse(timestamp));\n    } else if (typeof timestamp === \"number\") {\n      return inWords(new Date(timestamp));\n    } else {\n      return inWords($.timeago.datetime(timestamp));\n    }\n  };\n  var $t = $.timeago;\n\n  $.extend($.timeago, {\n    settings: {\n      refreshMillis: 60000,\n      allowFuture: false,\n      localeTitle: false,\n      cutoff: 0,\n      strings: {\n        prefixAgo: null,\n        prefixFromNow: null,\n        suffixAgo: \"ago\",\n        suffixFromNow: \"from now\",\n        seconds: \"less than a minute\",\n        minute: \"about a minute\",\n        minutes: \"%d minutes\",\n        hour: \"about an hour\",\n        hours: \"about %d hours\",\n        day: \"a day\",\n        days: \"%d days\",\n        month: \"about a month\",\n        months: \"%d months\",\n        year: \"about a year\",\n        years: \"%d years\",\n        wordSeparator: \" \",\n        numbers: []\n      }\n    },\n    inWords: function(distanceMillis) {\n      var $l = this.settings.strings;\n      var prefix = $l.prefixAgo;\n      var suffix = $l.suffixAgo;\n      if (this.settings.allowFuture) {\n        if (distanceMillis < 0) {\n          prefix = $l.prefixFromNow;\n          suffix = $l.suffixFromNow;\n        }\n      }\n\n      var seconds = Math.abs(distanceMillis) / 1000;\n      var minutes = seconds / 60;\n      var hours = minutes / 60;\n      var days = hours / 24;\n      var years = days / 365;\n\n      function substitute(stringOrFunction, number) {\n        var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;\n        var value = ($l.numbers && $l.numbers[number]) || number;\n        return string.replace(/%d/i, value);\n      }\n\n      var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) ||\n        seconds < 90 && substitute($l.minute, 1) ||\n        minutes < 45 && substitute($l.minutes, Math.round(minutes)) ||\n        minutes < 90 && substitute($l.hour, 1) ||\n        hours < 24 && substitute($l.hours, Math.round(hours)) ||\n        hours < 42 && substitute($l.day, 1) ||\n        days < 30 && substitute($l.days, Math.round(days)) ||\n        days < 45 && substitute($l.month, 1) ||\n        days < 365 && substitute($l.months, Math.round(days / 30)) ||\n        years < 1.5 && substitute($l.year, 1) ||\n        substitute($l.years, Math.round(years));\n\n      var separator = $l.wordSeparator || \"\";\n      if ($l.wordSeparator === undefined) { separator = \" \"; }\n      return $.trim([prefix, words, suffix].join(separator));\n    },\n    parse: function(iso8601) {\n      var s = $.trim(iso8601);\n      s = s.replace(/\\.\\d+/,\"\"); // remove milliseconds\n      s = s.replace(/-/,\"/\").replace(/-/,\"/\");\n      s = s.replace(/T/,\" \").replace(/Z/,\" UTC\");\n      s = s.replace(/([\\+\\-]\\d\\d)\\:?(\\d\\d)/,\" $1$2\"); // -04:00 -> -0400\n      return new Date(s);\n    },\n    datetime: function(elem) {\n      var iso8601 = $t.isTime(elem) ? $(elem).attr(\"datetime\") : $(elem).attr(\"title\");\n      return $t.parse(iso8601);\n    },\n    isTime: function(elem) {\n      // jQuery's `is()` doesn't play well with HTML5 in IE\n      return $(elem).get(0).tagName.toLowerCase() === \"time\"; // $(elem).is(\"time\");\n    }\n  });\n\n  // functions that can be called via $(el).timeago('action')\n  // init is default when no action is given\n  // functions are called with context of a single element\n  var functions = {\n    init: function(){\n      var refresh_el = $.proxy(refresh, this);\n      refresh_el();\n      var $s = $t.settings;\n      if ($s.refreshMillis > 0) {\n        this._timeagoInterval = setInterval(refresh_el, $s.refreshMillis);\n      }\n    },\n    update: function(time){\n      $(this).data('timeago', { datetime: $t.parse(time) });\n      refresh.apply(this);\n    },\n    updateFromDOM: function(){\n      $(this).data('timeago', { datetime: $t.parse( $t.isTime(this) ? $(this).attr(\"datetime\") : $(this).attr(\"title\") ) });\n      refresh.apply(this);\n    },\n    dispose: function () {\n      if (this._timeagoInterval) {\n        window.clearInterval(this._timeagoInterval);\n        this._timeagoInterval = null;\n      }\n    }\n  };\n\n  $.fn.timeago = function(action, options) {\n    var fn = action ? functions[action] : functions.init;\n    if(!fn){\n      throw new Error(\"Unknown function name '\"+ action +\"' for timeago\");\n    }\n    // each over objects here and call the requested function\n    this.each(function(){\n      fn.call(this, options);\n    });\n    return this;\n  };\n\n  function refresh() {\n    var data = prepareData(this);\n    var $s = $t.settings;\n\n    if (!isNaN(data.datetime)) {\n      if ( $s.cutoff == 0 || distance(data.datetime) < $s.cutoff) {\n        $(this).text(inWords(data.datetime));\n      }\n    }\n    return this;\n  }\n\n  function prepareData(element) {\n    element = $(element);\n    if (!element.data(\"timeago\")) {\n      element.data(\"timeago\", { datetime: $t.datetime(element) });\n      var text = $.trim(element.text());\n      if ($t.settings.localeTitle) {\n        element.attr(\"title\", element.data('timeago').datetime.toLocaleString());\n      } else if (text.length > 0 && !($t.isTime(element) && element.attr(\"title\"))) {\n        element.attr(\"title\", text);\n      }\n    }\n    return element.data(\"timeago\");\n  }\n\n  function inWords(date) {\n    return $t.inWords(distance(date));\n  }\n\n  function distance(date) {\n    return (new Date().getTime() - date.getTime());\n  }\n\n  // fix for IE6 suckage\n  document.createElement(\"abbr\");\n  document.createElement(\"time\");\n}));\n","if (typeof Handlebars !== 'undefined') {\n  Handlebars.registerHelper(\"timeago\", function(date, options) {\n    override = options.hash['default']\n    var dateObj;\n    if (date) {\n      dateObj = new Date(date);\n      return $.timeago(dateObj).replace(/\\ /g, \"\\u00a0\");\n    }\n    if (override == undefined) {\n      return \"some time ago\";\n    } else {\n      return override;\n    }\n  });\n}\n\n"]}