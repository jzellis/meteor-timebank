{"version":3,"file":"/packages/ctl-helper.js","sources":["ctl-helper/ctl-helper.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,uC;AACA,0C;;AAEA,S;;AAEA,e;AACA,oB;;AAEA,e;AACA,e;;AAEA,yB;AACA,4B;AACA,6B;AACA,2B;AACA,oB;;AAEA,oB;AACA,kC;AACA,uB;AACA,K;;AAEA,yB;AACA,sB;AACA,sC;;AAEA,wC;AACA,qB;AACA,a;AACA,I;;AAEA,uE;AACA,sC;AACA,gE;AACA,2B;AACA,8D;AACA,Y;AACA,+C;AACA,K;AACA,gB;AACA,I;;AAEA,2D;AACA,mC;AACA,kE;AACA,oC;AACA,8B;AACA,oB;;AAEA,qB;AACA,8B;AACA,oB;AACA,8B;AACA,kB;AACA,uF;AACA,O;AACA,iE;AACA,K;;AAEA,8E;AACA,mD;AACA,mD;AACA,oE;AACA,+E;AACA,wE;AACA,O;;AAEA,qB;AACA,e;AACA,wB;AACA,sE;AACA,M;AACA,c;AACA,6B;AACA,gF;AACA,4B;AACA,e;AACA,c;AACA,iB;AACA,0B;AACA,8B;AACA,uE;AACA,8E;AACA,4E;AACA,sB;AACA,S;AACA,Q;AACA,gB;AACA,Q;AACA,oC;AACA,iB;AACA,I;;AAEA,gC;AACA,uD;AACA,gB;AACA,4E;AACA,sB;AACA,K;;AAEA,e;AACA,I;;AAEA,+B;AACA,4C;AACA,4D;AACA,qF;AACA,kB;AACA,mB;AACA,sB;AACA,qF;AACA,I;;AAEA,kC;AACA,qC;AACA,kB;AACA,yE;AACA,sB;AACA,K;;AAEA,0E;AACA,sD;AACA,6D;AACA,qD;AACA,yD;AACA,wB;AACA,O;AACA,e;AACA,sB;AACA,K;;AAEA,2B;AACA,qB;AACA,8B;AACA,K;AACA,0B;AACA,4C;AACA,6B;AACA,K;AACA,I;;AAEA,mD;AACA,c;AACA,0C;AACA,4B;AACA,yE;AACA,sD;AACA,a;AACA,kD;AACA,0B;AACA,a;AACA,wB;AACA,+B;AACA,iB;AACA,uE;AACA,oB;AACA,yB;AACA,sD;AACA,wB;AACA,sC;AACA,yC;AACA,sB;AACA,wB;AACA,e;AACA,a;AACA,W;AACA,6B;AACA,iD;AACA,6C;AACA,qB;AACA,iD;AACA,6C;AACA,S;AACA,O;AACA,O;;AAEA,sD;AACA,6C;AACA,sC;AACA,sD;AACA,gE;AACA,sE;AACA,U;AACA,gB;AACA,gC;AACA,sC;AACA,I;;AAEA,sC;AACA,sE;AACA,K;;AAEA,4D;AACA,oD;AACA,+D;AACA,K;;AAEA,6B;AACA,oD;AACA,kC;AACA,oC;AACA,kC;AACA,uB;AACA,yC;AACA,+C;AACA,I;;AAEA,iC;AACA,yC;AACA,kE;AACA,sB;AACA,K;AACA,kC;AACA,K;;AAEA,+B;AACA,yC;AACA,kE;AACA,sB;AACA,K;AACA,kC;AACA,K;;AAEA,qB;AACA,yB;AACA,kD;AACA,c;AACA,qF;AACA,oF;AACA,sD;AACA,c;AACA,uB;AACA,yC;AACA,qC;AACA,yE;AACA,6D;AACA,O;AACA,O;AACA,+B;AACA,yB;AACA,8D;AACA,oB;AACA,I;;AAEA,gD;AACA,6C;AACA,8B;;AAEA,0C;AACA,iC;;AAEA,oC;AACA,Y;AACA,uC;AACA,2C;AACA,8D;;AAEA,oB;AACA,I;;AAEA,gD;AACA,uD;AACA,S;AACA,yC;AACA,iB;AACA,qC;AACA,K;AACA,e;AACA,I;;AAEA,uC;AACA,qD;AACA,oD;AACA,G;AACA,G","sourcesContent":["var optimist = Npm.require('optimist');\nvar Future = Npm.require('fibers/future');\n\nCtl = {};\n\nvar connection;\nvar checkConnection;\n\n_.extend(Ctl, {\n  Commands: [],\n\n  main: function (argv) {\n    var opt = optimist(argv)\n          .alias('h', 'help')\n          .boolean('help');\n    argv = opt.argv;\n\n    if (argv.help) {\n      argv._.splice(0, 0, \"help\");\n      delete argv.help;\n    }\n\n    var cmdName = 'help';\n    if (argv._.length)\n      cmdName = argv._.splice(0,1)[0];\n\n    Ctl.findCommand(cmdName).func(argv);\n    Ctl.disconnect();\n    return 0;\n  },\n\n  startServerlikeProgramIfNotPresent: function (program, tags, admin) {\n    var numServers = Ctl.getJobsByApp(\n      Ctl.myAppName(), {program: program, done: false}).count();\n    if (numServers === 0) {\n      return Ctl.startServerlikeProgram(program, tags, admin);\n    } else {\n      console.log(program, \"already running.\");\n    }\n    return null;\n  },\n\n  startServerlikeProgram: function (program, tags, admin) {\n    var appConfig = Ctl.prettyCall(\n      Ctl.findGalaxy(), 'getAppConfiguration', [Ctl.myAppName()]);\n    if (typeof admin == 'undefined')\n      admin = appConfig.admin;\n    admin = !!admin;\n\n    var jobId = null;\n    var rootUrl = Ctl.rootUrl;\n    if (! rootUrl) {\n      var bindPathPrefix = \"\";\n      if (admin) {\n        bindPathPrefix = \"/\" + encodeURIComponent(Ctl.myAppName()).replace(/\\./g, '_');\n      }\n      rootUrl = \"https://\" + appConfig.sitename + bindPathPrefix;\n    }\n\n    // Allow appConfig settings to be objects or strings. We need to stringify\n    // them to pass them to the app in the env var.\n    // Backwards compat with old app config format.\n    _.each([\"settings\", \"METEOR_SETTINGS\"], function (settingsKey) {\n      if (appConfig[settingsKey] && typeof appConfig[settingsKey] === \"object\")\n        appConfig[settingsKey] = JSON.stringify(appConfig[settingsKey]);\n    });\n\n    // XXX args? env?\n    var env = {\n      ROOT_URL: rootUrl,\n      METEOR_SETTINGS: appConfig.settings || appConfig.METEOR_SETTINGS\n    };\n    if (admin)\n      env.ADMIN_APP = 'true';\n    jobId = Ctl.prettyCall(Ctl.findGalaxy(), 'run', [Ctl.myAppName(), program, {\n      exitPolicy: 'restart',\n      env: env,\n      ports: {\n        \"main\": {\n          bindEnv: \"PORT\",\n          routeEnv: \"ROUTE\"//,\n          //bindIpEnv: \"BIND_IP\" // Later, we can teach Satellite to do\n          //something like recommend the process bind to a particular IP here.\n          //For now, we don't have a way of setting this, so Satellite binds\n          //to 0.0.0.0\n        }\n      },\n      tags: tags\n    }]);\n    console.log(\"Started\", program);\n    return jobId;\n  },\n\n  findCommand: function (name) {\n    var cmd = _.where(Ctl.Commands, { name: name })[0];\n    if (! cmd) {\n      console.log(\"'\" + name + \"' is not a ctl command. See 'ctl --help'.\");\n      process.exit(1);\n    }\n\n    return cmd;\n  },\n\n  hasProgram: function (name) {\n    Ctl.subscribeToAppJobs(Ctl.myAppName());\n    var myJob = Ctl.jobsCollection().findOne(Ctl.myJobId());\n    var manifest = Ctl.prettyCall(Ctl.findGalaxy(), 'getStarManifest', [myJob.star]);\n    if (!manifest)\n      return false;\n    var found = false;\n    return _.find(manifest.programs, function (prog) { return prog.name === name; });\n  },\n\n  findGalaxy: _.once(function () {\n    if (!('GALAXY' in process.env)) {\n      console.log(\n        \"GALAXY environment variable must be set. See 'galaxy --help'.\");\n      process.exit(1);\n    }\n\n    connection = Follower.connect(process.env['ULTRAWORLD_DDP_ENDPOINT']);\n    checkConnection = Meteor.setInterval(function () {\n      if (Ctl.findGalaxy().status().status !== \"connected\" &&\n          Ctl.findGalaxy().status().retryCount > 2) {\n        console.log(\"Cannot connect to galaxy; exiting\");\n        process.exit(3);\n      }\n    }, 2*1000);\n    return connection;\n  }),\n\n  disconnect: function () {\n    if (connection) {\n      connection.disconnect();\n    }\n    if (checkConnection) {\n      Meteor.clearInterval(checkConnection);\n      checkConnection = null;\n    }\n  },\n\n  updateProxyActiveTags: function (tags, options) {\n    var proxy;\n    var proxyTagSwitchFuture = new Future;\n    options = options || {};\n    AppConfig.configureService('proxy', 'pre0', function (proxyService) {\n      if (proxyService && ! _.isEmpty(proxyService)) {\n        try {\n          proxy = Follower.connect(proxyService, {\n            group: \"proxy\"\n          });\n          var tries = 0;\n          while (tries < 100) {\n            try {\n              proxy.call('updateTags', Ctl.myAppName(), tags, options);\n              break;\n            } catch (e) {\n              if (e.error === 'not-enough-bindings') {\n                tries++;\n                // try again in a sec.\n                Meteor._sleepForMs(1000);\n              } else {\n                throw e;\n              }\n            }\n          }\n          proxy.disconnect();\n          if (!proxyTagSwitchFuture.isResolved())\n            proxyTagSwitchFuture['return']();\n        } catch (e) {\n          if (!proxyTagSwitchFuture.isResolved())\n            proxyTagSwitchFuture['throw'](e);\n        }\n      }\n    });\n\n    var proxyTimeout = Meteor.setTimeout(function () {\n      if (!proxyTagSwitchFuture.isResolved())\n        proxyTagSwitchFuture['throw'](\n          new Error(\"Timed out looking for a proxy \" +\n                    \"or trying to change tags on it. Status: \" +\n                    (proxy ? proxy.status().status : \"no connection\"))\n        );\n    }, 50*1000);\n    proxyTagSwitchFuture.wait();\n    Meteor.clearTimeout(proxyTimeout);\n  },\n\n  jobsCollection: _.once(function () {\n    return new Meteor.Collection(\"jobs\", {manager: Ctl.findGalaxy()});\n  }),\n\n  // use _.memoize so that this is called only once per app.\n  subscribeToAppJobs: _.memoize(function (appName) {\n    Ctl.findGalaxy()._subscribeAndWait(\"jobsByApp\", [appName]);\n  }),\n\n  // XXX this never unsubs...\n  getJobsByApp: function (appName, restOfSelector) {\n    var galaxy = Ctl.findGalaxy();\n    Ctl.subscribeToAppJobs(appName);\n    var selector = {app: appName};\n    if (restOfSelector)\n      _.extend(selector, restOfSelector);\n    return Ctl.jobsCollection().find(selector);\n  },\n\n  myAppName: _.once(function () {\n    if (!('GALAXY_APP' in process.env)) {\n      console.log(\"GALAXY_APP environment variable must be set.\");\n      process.exit(1);\n    }\n    return process.env.GALAXY_APP;\n  }),\n\n  myJobId: _.once(function () {\n    if (!('GALAXY_JOB' in process.env)) {\n      console.log(\"GALAXY_JOB environment variable must be set.\");\n      process.exit(1);\n    }\n    return process.env.GALAXY_JOB;\n  }),\n\n  usage: function() {\n    process.stdout.write(\n      \"Usage: ctl [--help] <command> [<args>]\\n\" +\n        \"\\n\" +\n        \"For now, the GALAXY environment variable must be set to the location of\\n\" +\n        \"your Galaxy management server (Ultraworld.) This string is in the same\\n\" +\n        \"format as the argument to DDP.connect().\\n\" +\n        \"\\n\" +\n        \"Commands:\\n\");\n    _.each(Ctl.Commands, function (cmd) {\n      if (cmd.help && ! cmd.hidden) {\n        var name = cmd.name + \"                \".substr(cmd.name.length);\n        process.stdout.write(\"   \" + name + cmd.help + \"\\n\");\n      }\n    });\n    process.stdout.write(\"\\n\");\n    process.stdout.write(\n      \"See 'ctl help <command>' for details on a command.\\n\");\n    process.exit(1);\n  },\n\n  // XXX copied to meteor/tools/deploy-galaxy.js\n  exitWithError: function (error, messages) {\n    messages = messages || {};\n\n    if (! (error instanceof Meteor.Error))\n      throw error; // get a stack\n\n    var msg = messages[error.error];\n    if (msg)\n      process.stderr.write(msg + \"\\n\");\n    else if (error instanceof Meteor.Error)\n      process.stderr.write(\"Denied: \" + error.message + \"\\n\");\n\n    process.exit(1);\n  },\n\n  // XXX copied to meteor/tools/deploy-galaxy.js\n  prettyCall: function (galaxy, name, args, messages) {\n    try {\n      var ret = galaxy.apply(name, args);\n    } catch (e) {\n      Ctl.exitWithError(e, messages);\n    }\n    return ret;\n  },\n\n  kill: function (programName, jobId) {\n  console.log(\"Killing %s (%s)\", programName, jobId);\n  Ctl.prettyCall(Ctl.findGalaxy(), 'kill', [jobId]);\n  }\n});\n"]}