{"version":3,"file":"/packages/mongodb-aggregation.js","sources":["mongodb-aggregation/server.coffee"],"names":[],"mappings":"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","sourcesContent":["tl = TLog?.getLogger()\n#hacky advanced mongo definitions based on https://github.com/meteor/meteor/pull/644\nif Meteor.isServer\n\n  path = Npm.require(\"path\")\n  MongoDB = Npm.require(\"mongodb\")\n  Future = Npm.require(path.join(\"fibers\", \"future\"))\n\n  _dummyCollection_ = new Meteor.Collection '__dummy__'\n\n  # Wrapper of the call to the db into a Future\n  _futureWrapper = (collection, commandName, args)->\n    col = if (typeof collection) == \"string\" then  _dummyCollection_ else collection\n    collectionName = if (typeof collection) == \"string\" then  collection else collection._name\n\n    #tl?.debug \"future Wrapper called for collection \" + collectionName + \" command: \" + commandName + \" args: \" + args\n    \n    coll1 = col.find()._mongo.db.collection(collectionName)\n\n    future = new Future\n    cb = future.resolver()\n    coll1[commandName](args, cb)\n    result = future.wait()\n    \n\n  # exposing the methods to the client\n  Meteor.methods\n    _callAdvancedDBMethod: _futureWrapper\n\n    # Not really DRY, but have to return slightly different results from mapReduce as mongo method returns\n    # a mongo collection, which we don't need here at all\n    _callMapReduce: (collection, map, reduce, options)->\n      col = if (typeof collection) == \"string\" then  _dummyCollection_ else collection\n      collectionName = if (typeof collection) == \"string\" then  collection else collection._name\n\n      tl?.debug \"callMapReduce called for collection \" + collectionName + \" map: \" + map + \" reduce: \" + reduce + \" options: #{JSON.stringify(options)}\"\n      coll1 = col.find()._mongo.db.collection(collectionName)\n\n      future = new Future\n      #cb = future.resolver()\n      coll1.mapReduce map, reduce, options, (err,result,stats)->\n          #tl?.debug \"Inside MapReduce callback now!\"\n          future.throw(err) if err\n          res = {collectionName: result.collectionName, stats: stats}\n          future.return [true,res]\n\n      result = future.wait() #\n      #console.log \"Result from the callMapReduce is: \"\n      #console.dir result[1]\n      throw result[1] if !result[0]\n\n      if result[1].collectionName\n        col = new Meteor.Collection result[1].collectionName\n        Meteor.publish result[1].collectionName, ->\n          col.find {\"_id\" : {$ne: \"\"}} # hack to allow Meteor fetching the values as apparently it does not support empty ids\n      result[1]\n\n\n\n  # Extending Collection on the server\n  _.extend Meteor.Collection::,\n\n    distinct: (key) ->\n      #_collectionDistinct @_name, key, query, options\n      _futureWrapper @_name, \"distinct\", key\n\n    aggregate: (pipeline) ->\n      _futureWrapper @_name, \"aggregate\", pipeline\n\n    mapReduce: (map, reduce, options)->\n      Meteor.apply \"_callMapReduce\", [@_name, map, reduce, options]\n\n\n\n"]}