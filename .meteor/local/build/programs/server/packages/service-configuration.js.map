{"version":3,"file":"/packages/service-configuration.js","sources":["service-configuration/service_configuration_common.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,kD;AACA,4B;AACA,C;;;AAGA,iE;AACA,gB;AACA,4D;AACA,gD;AACA,8B;AACA,yE;AACA,K;AACA,wE;AACA,uE;AACA,mE;AACA,qE;AACA,Q;;;AAGA,oE;AACA,2D;AACA,+D;AACA,gE;AACA,2B;AACA,gE;AACA,U;AACA,4C;AACA,G;AACA,E;AACA,yD;AACA,qF","sourcesContent":["if (typeof ServiceConfiguration === 'undefined') {\n  ServiceConfiguration = {};\n}\n\n\n// Table containing documents with configuration options for each\n// login service\nServiceConfiguration.configurations = new Meteor.Collection(\n  \"meteor_accounts_loginServiceConfiguration\", {\n    _preventAutopublish: true,\n    connection: Meteor.isClient ? Accounts.connection : Meteor.connection\n  });\n// Leave this collection open in insecure mode. In theory, someone could\n// hijack your oauth connect requests to a different endpoint or appId,\n// but you did ask for 'insecure'. The advantage is that it is much\n// easier to write a configuration wizard that works only in insecure\n// mode.\n\n\n// Thrown when trying to use a login service which is not configured\nServiceConfiguration.ConfigError = function (serviceName) {\n  if (Meteor.isClient && !Accounts.loginServicesConfigured()) {\n    this.message = \"Login service configuration not yet loaded\";\n  } else if (serviceName) {\n    this.message = \"Service \" + serviceName + \" not configured\";\n  } else {\n    this.message = \"Service not configured\";\n  }\n};\nServiceConfiguration.ConfigError.prototype = new Error();\nServiceConfiguration.ConfigError.prototype.name = 'ServiceConfiguration.ConfigError';\n"]}