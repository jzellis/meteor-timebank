{"version":3,"file":"/packages/iron-router.js","sources":["iron-router/lib/utils.js","iron-router/lib/route.js","iron-router/lib/route_controller.js","iron-router/lib/router.js","iron-router/lib/server/route_controller.js","iron-router/lib/server/router.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,sD;AACA,G;;AAEA,W;;AAEA,G;AACA,yD;AACA,G;;AAEA,gD;;AAEA,G;AACA,mE;AACA,e;AACA,E;AACA,I;AACA,iC;AACA,6B;AACA,yC;AACA,+D;AACA,I;AACA,G;AACA,0C;AACA,W;AACA,c;AACA,c;AACA,Y;AACA,wF;;AAEA,yB;AACA,qB;AACA,2B;AACA,6C;AACA,uB;AACA,U;AACA,mB;AACA,c;AACA,iB;AACA,e;AACA,G;;AAEA,uD;AACA,iB;AACA,wB;AACA,a;AACA,6B;AACA,mC;AACA,+B;AACA,M;AACA,G;AACA,E;;AAEA,2D;AACA,sB;AACA,iC;AACA,sD;AACA,I;AACA,E;;AAEA,G;AACA,8E;AACA,+E;AACA,e;AACA,E;AACA,Y;AACA,uD;AACA,+D;AACA,E;AACA,qC;AACA,G;;AAEA,6C;AACA,4B;AACA,Y;AACA,U;;AAEA,gC;AACA,kC;AACA,iB;AACA,4C;AACA,0B;AACA,e;AACA,yB;AACA,K;AACA,U;AACA,sB;AACA,G;;AAEA,uD;AACA,a;AACA,E;;AAEA,4C;AACA,+B;AACA,6B;AACA,E;;AAEA,G;AACA,uE;AACA,4E;AACA,+E;AACA,yD;AACA,G;;AAEA,2C;AACA,kD;AACA,4E;;AAEA,mD;AACA,6E;;AAEA,2B;AACA,0C;AACA,+B;AACA,G;;AAEA,oB;AACA,6B;AACA,G;;AAEA,oC;AACA,+B;AACA,qC;AACA,e;AACA,E;;AAEA,gC;AACA,W;AACA,c;AACA,kD;AACA,iB;AACA,M;AACA,e;AACA,E;;AAEA,+B;AACA,0B;AACA,wB;AACA,M;AACA,+C;AACA,E;;AAEA,sE;AACA,6B;AACA,uB;AACA,Q;AACA,kC;AACA,8B;AACA,G;;AAEA,mC;AACA,oD;AACA,K;AACA,E;;AAEA,+C;AACA,iB;AACA,gB;AACA,qB;;AAEA,0B;AACA,gC;;AAEA,sD;AACA,yC;AACA,Q;AACA,+B;AACA,qE;AACA,wE;AACA,K;AACA,G;;AAEA,iC;;AAEA,kD;;AAEA,oD;AACA,qD;AACA,wD;AACA,I;;AAEA,mB;AACA,qC;AACA,G;;AAEA,sC;AACA,kE;;AAEA,8C;;AAEA,qB;AACA,E;;AAEA,G;AACA,6C;AACA,E;AACA,2E;AACA,2E;AACA,G;;AAEA,0C;AACA,iB;AACA,yB;AACA,E;;AAEA,wC;AACA,iB;AACA,iD;AACA,E;;AAEA,mC;AACA,gE;AACA,E;;AAEA,uC;AACA,oB;;AAEA,W;AACA,c;;AAEA,+C;AACA,kC;AACA,c;AACA,E;;AAEA,kC;AACA,yC;AACA,2E;AACA,gB;AACA,E;;AAEA,oC;AACA,iC;AACA,U;AACA,yC;AACA,kB;AACA,mD;AACA,iB;AACA,G;;AAEA,c;AACA,E;;AAEA,0B;AACA,2B;AACA,iB;AACA,I;;AAEA,sC;AACA,uC;AACA,I;;AAEA,iC;AACA,kC;AACA,G;AACA,E;;AAEA,2C;AACA,iD;;AAEA,mD;AACA,iD;AACA,kB;AACA,8B;AACA,oB;AACA,kC;;AAEA,8B;AACA,iC;AACA,sB;AACA,wB;AACA,S;AACA,K;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;;;ACnRA,E;AACA,6E;AACA,+E;AACA,6E;AACA,kE;AACA,G;;AAEA,0C;AACA,W;;AAEA,6C;;AAEA,gC;AACA,iE;;AAEA,4B;AACA,mC;;AAEA,yC;AACA,sC;;AAEA,uB;AACA,2B;;AAEA,2E;AACA,gD;;AAEA,mB;AACA,yC;AACA,uC;AACA,+B;;AAEA,8C;AACA,uC;AACA,M;AACA,2B;;AAEA,yC;;AAEA,iB;AACA,E;;AAEA,mB;AACA,qB;;AAEA,K;AACA,sB;AACA,I;AACA,qB;AACA,iB;AACA,K;;AAEA,wB;AACA,oB;AACA,a;AACA,+B;;AAEA,mB;;AAEA,8C;AACA,kC;AACA,Y;AACA,8B;AACA,gC;AACA,2C;AACA,iC;AACA,4B;AACA,iB;AACA,iD;AACA,kE;AACA,iE;AACA,gC;AACA,qB;AACA,uC;AACA,qB;AACA,uC;AACA,8B;AACA,wE;AACA,iC;AACA,W;AACA,S;AACA,oC;AACA,gC;;AAEA,2E;AACA,K;;AAEA,gB;AACA,I;;AAEA,K;AACA,0E;AACA,8C;AACA,I;AACA,yB;AACA,oB;AACA,gB;AACA,K;;AAEA,2B;AACA,c;AACA,kB;;AAEA,oB;AACA,4B;AACA,oB;AACA,yB;AACA,Y;AACA,c;;AAEA,W;AACA,oG;;AAEA,mD;AACA,wB;AACA,wE;AACA,gB;AACA,2D;AACA,mC;AACA,Y;AACA,2B;AACA,K;;AAEA,2B;;AAEA,qC;AACA,oB;AACA,8C;;AAEA,qC;;AAEA,sB;AACA,6D;AACA,4C;AACA,kE;AACA,S;AACA,K;;AAEA,kB;AACA,I;;AAEA,kC;AACA,sC;;AAEA,oC;;AAEA,6C;AACA,sE;;AAEA,sC;AACA,wD;;AAEA,+B;AACA,wB;;AAEA,gB;AACA,I;;AAEA,K;AACA,0D;AACA,I;AACA,yB;AACA,sB;AACA,gB;AACA,K;AACA,yB;AACA,kD;AACA,I;;AAEA,yB;AACA,kD;AACA,I;;AAEA,uC;AACA,c;AACA,uB;AACA,e;AACA,0B;AACA,iC;AACA,a;AACA,c;AACA,gC;;AAEA,4B;AACA,0B;AACA,0B;AACA,mD;;AAEA,iC;AACA,4E;AACA,Y;AACA,8B;AACA,iB;AACA,iD;AACA,2E;AACA,gC;AACA,gC;AACA,0D;;AAEA,8C;AACA,yB;AACA,yC;AACA,qC;AACA,qB;AACA,a;;AAEA,qE;AACA,mF;AACA,iD;AACA,yB;AACA,uC;AACA,W;AACA,S;AACA,iB;AACA,gB;AACA,4B;AACA,+D;AACA,8B;AACA,4E;AACA,+B;AACA,uE;AACA,a;;AAEA,6D;AACA,oE;AACA,iD;AACA,yB;AACA,W;AACA,U;;AAEA,8B;AACA,4D;AACA,uE;AACA,qB;AACA,O;;AAEA,gC;AACA,kC;;AAEA,iB;AACA,gD;AACA,sB;AACA,iD;AACA,O;AACA,K;;AAEA,yE;AACA,4D;AACA,oE;;AAEA,yC;AACA,I;;AAEA,oC;AACA,yC;AACA,I;;AAEA,mC;AACA,0C;AACA,wB;AACA,wC;AACA,uC;AACA,I;;AAEA,2C;AACA,oB;AACA,gB;AACA,wB;AACA,mB;AACA,e;AACA,kB;;AAEA,0C;AACA,gC;;AAEA,0C;AACA,0C;AACA,8C;AACA,wB;AACA,sD;AACA,O;;AAEA,wB;AACA,M;;AAEA,qC;AACA,iB;AACA,gC;AACA,wB;AACA,yB;AACA,O;;AAEA,wD;AACA,0B;AACA,qD;AACA,0D;AACA,mE;AACA,wB;AACA,K;;AAEA,0E;AACA,0B;;AAEA,oB;AACA,8E;AACA,gD;;AAEA,4B;AACA,qE;AACA,0B;AACA,O;AACA,K;;AAEA,8D;AACA,2D;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC5TA,qD;AACA,kB;;AAEA,sC;AACA,yD;;AAEA,gC;AACA,wD;;AAEA,yC;;AAEA,uB;AACA,qB;;AAEA,iC;AACA,qC;AACA,yC;AACA,8C;;AAEA,yC;AACA,iC;AACA,E;;AAEA,6B;AACA,+B;;AAEA,K;AACA,+E;AACA,W;AACA,I;AACA,iC;AACA,mC;AACA,uB;AACA,wB;AACA,K;AACA,kC;AACA,c;;AAEA,yB;AACA,8C;;AAEA,iC;AACA,2D;AACA,mB;;AAEA,kC;AACA,mD;AACA,mB;;AAEA,a;AACA,I;AACA,uB;AACA,8B;AACA,2D;AACA,mB;;AAEA,wB;AACA,+B;AACA,2D;AACA,mB;;AAEA,qC;AACA,qB;AACA,I;;AAEA,2C;AACA,oB;AACA,gC;;AAEA,8B;AACA,mD;;AAEA,iC;AACA,4D;;AAEA,yB;;AAEA,0C;AACA,wB;;AAEA,iD;AACA,2B;AACA,kB;;AAEA,iD;AACA,uD;AACA,e;AACA,2B;AACA,2C;AACA,kC;AACA,O;;AAEA,8C;AACA,yD;AACA,O;;AAEA,4D;AACA,+D;AACA,iD;AACA,qB;;AAEA,yB;AACA,gF;AACA,M;AACA,6D;AACA,uD;AACA,M;;;AAGA,yD;AACA,sC;AACA,0E;AACA,sC;AACA,6B;AACA,4B;AACA,c;;AAEA,gC;AACA,sE;;AAEA,a;AACA,8B;AACA,2D;;AAEA,wB;AACA,sD;;AAEA,6D;;AAEA,oB;AACA,mD;AACA,uD;AACA,iD;AACA,8B;AACA,2C;AACA,Q;AACA,uB;;AAEA,8B;AACA,yB;AACA,0B;AACA,+B;AACA,0B;AACA,oB;;AAEA,yB;AACA,+B;AACA,sB;AACA,M;;AAEA,oD;AACA,oC;;AAEA,uC;AACA,sC;AACA,K;;AAEA,kC;AACA,oB;AACA,I;;AAEA,uB;AACA,uC;AACA,I;;AAEA,uB;AACA,oC;AACA,I;;AAEA,kC;AACA,oB;;AAEA,uB;AACA,a;;AAEA,2B;AACA,4B;AACA,0B;AACA,wB;AACA,I;;AAEA,qB;AACA,uC;AACA,G;AACA,E;;AAEA,2B;AACA,K;AACA,iC;AACA,I;AACA,yE;AACA,K;;AAEA,iC;AACA,yC;;AAEA,iE;AACA,uB;;AAEA,M;AACA,Q;AACA,8E;AACA,mB;;AAEA,wB;AACA,uD;AACA,8C;;AAEA,mB;AACA,iD;AACA,kC;AACA,a;AACA,O;AACA,uC;AACA,6C;AACA,iC;AACA,S;AACA,O;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC3NA,iC;AACA,kB;;AAEA,0B;;AAEA,K;AACA,oE;AACA,6B;AACA,I;AACA,gB;AACA,K;AACA,mB;;AAEA,K;AACA,4C;AACA,yB;AACA,K;AACA,4B;AACA,4C;AACA,6D;;AAEA,yB;AACA,iD;AACA,iC;;AAEA,e;AACA,+C;AACA,sD;AACA,U;AACA,2C;AACA,+C;AACA,M;AACA,K;;AAEA,oE;AACA,oC;AACA,8B;AACA,wB;AACA,yB;AACA,qB;AACA,S;;AAEA,+C;AACA,K;AACA,K;AACA,E;;AAEA,yB;AACA,U;AACA,W;AACA,mB;AACA,kB;AACA,W;;AAEA,4C;AACA,6C;AACA,mD;AACA,qD;AACA,U;AACA,E;;AAEA,gC;AACA,kB;AACA,6B;AACA,2B;AACA,oB;AACA,E;;AAEA,wB;AACA,0B;;AAEA,K;AACA,4E;AACA,wE;AACA,I;AACA,4B;AACA,yB;AACA,gB;AACA,K;;AAEA,iC;AACA,oB;;AAEA,4B;AACA,sC;AACA,oC;;AAEA,4C;AACA,kD;AACA,+B;AACA,kE;AACA,mC;AACA,W;;AAEA,kC;AACA,O;AACA,O;AACA,I;AACA,qE;AACA,qC;AACA,wB;AACA,wE;AACA,mC;AACA,W;;AAEA,wC;AACA,O;AACA,O;;AAEA,sC;AACA,uE;;AAEA,6C;AACA,qF;;AAEA,gB;AACA,I;;AAEA,yC;AACA,qD;AACA,mB;AACA,8D;AACA,4B;AACA,I;;AAEA,gD;AACA,4D;AACA,mB;AACA,qE;AACA,4B;AACA,I;;AAEA,kD;AACA,kB;;AAEA,mC;AACA,+B;;AAEA,iC;AACA,uD;;AAEA,qB;AACA,mE;AACA,K;;AAEA,0C;AACA,gB;AACA,I;;AAEA,K;AACA,I;AACA,kE;AACA,iF;AACA,I;AACA,wE;AACA,uE;AACA,6C;AACA,yB;AACA,gB;AACA,I;AACA,K;;AAEA,0C;AACA,2B;;AAEA,qB;AACA,iD;AACA,uB;AACA,qD;;AAEA,iE;;AAEA,gB;AACA,I;;AAEA,K;AACA,I;AACA,uE;AACA,wD;AACA,I;AACA,wD;AACA,sE;AACA,0D;AACA,gB;AACA,I;AACA,K;;AAEA,kC;AACA,mB;;AAEA,oD;AACA,iC;;AAEA,4D;AACA,e;;AAEA,0D;AACA,e;;AAEA,4B;AACA,O;;AAEA,iB;AACA,I;;;AAGA,K;AACA,+E;AACA,+C;AACA,I;AACA,a;AACA,8B;AACA,4B;AACA,S;AACA,I;AACA,0B;AACA,0B;AACA,iB;AACA,K;;AAEA,sB;AACA,kC;AACA,6D;AACA,kB;AACA,gB;AACA,I;;AAEA,K;AACA,+E;AACA,iE;AACA,I;AACA,+C;AACA,iE;AACA,oB;AACA,gB;AACA,K;;AAEA,mC;AACA,c;;AAEA,mE;;AAEA,iC;AACA,sB;AACA,Q;AACA,6C;;AAEA,8B;AACA,4B;AACA,iB;AACA,I;;AAEA,+C;AACA,uC;AACA,qB;AACA,uI;AACA,gD;AACA,I;;AAEA,8C;AACA,uC;AACA,qB;AACA,yI;AACA,+C;AACA,I;;AAEA,0B;AACA,qE;AACA,I;AACA,I;AACA,0C;AACA,iC;AACA,I;AACA,gB;AACA,iD;AACA,I;AACA,gE;AACA,6C;AACA,I;AACA,wD;AACA,6B;AACA,I;;AAEA,kC;AACA,oB;AACA,sD;;AAEA,0D;;AAEA,+D;AACA,oC;AACA,4D;AACA,a;AACA,K;;AAEA,2B;AACA,2C;AACA,yB;AACA,2B;AACA,qC;AACA,M;;AAEA,qE;AACA,wE;AACA,uE;AACA,0D;AACA,gC;AACA,mD;AACA,Q;AACA,Y;AACA,I;;AAEA,yC;AACA,mD;AACA,I;;AAEA,6C;AACA,sE;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC/TA,iD;AACA,4B;AACA,iE;AACA,wC;AACA,0C;AACA,kC;;AAEA,sC;;AAEA,kC;AACA,gB;AACA,gC;AACA,U;AACA,4F;AACA,M;AACA,I;;AAEA,qB;AACA,mB;AACA,oC;;AAEA,S;AACA,mE;AACA,4B;AACA,yB;AACA,sE;;AAEA,4B;AACA,6B;;AAEA,+E;AACA,0B;AACA,kG;;AAEA,6B;AACA,sC;AACA,wB;AACA,qC;;AAEA,iB;AACA,kC;AACA,0B;AACA,e;AACA,0B;AACA,K;AACA,I;;AAEA,uB;AACA,wB;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AClDA,qC;AACA,kC;;AAEA,kB;;AAEA,mB;AACA,Y;;AAEA,sD;AACA,6C;AACA,Q;AACA,2C;AACA,C;;AAEA,uC;AACA,mC;AACA,oB;AACA,4D;AACA,gC;AACA,8B;AACA,6C;AACA,uB;AACA,S;AACA,O;AACA,I;;AAEA,sB;AACA,mB;AACA,2B;AACA,gC;AACA,yC;AACA,I;;AAEA,wC;AACA,oB;AACA,uB;AACA,8B;AACA,qB;AACA,sB;AACA,kB;AACA,S;AACA,a;AACA,I;;AAEA,kC;AACA,oD;AACA,+C;AACA,2B;AACA,I;;AAEA,qB;AACA,I;;AAEA,yC;AACA,mB;AACA,I;;AAEA,6C;AACA,mB;AACA,G;AACA,G;;AAEA,wB","sourcesContent":["/**\n * Utility methods available privately to the package.\n */\n\nUtils = {};\n\n/**\n * global object on node or window object in the browser.\n */\n\nUtils.global = (function () { return this; })();\n\n/**\n * deprecatation notice to the user which can be a string or object\n * of the form:\n *\n * {\n *  name: 'somePropertyOrMethod',\n *  where: 'RouteController',\n *  instead: 'someOtherPropertyOrMethod',\n *  message: ':name is deprecated. Please use :instead instead'\n * }\n */\nUtils.notifyDeprecated = function (info) {\n  var name;\n  var instead;\n  var message;\n  var where;\n  var defaultMessage = \"[:where] ':name' is deprecated. Please use ':instead' instead.\";\n\n  if (_.isObject(info)) {\n    name = info.name;\n    instead = info.instead;\n    message = info.message || defaultMessage;\n    where = info.where;\n  } else {\n    message = info;\n    name = '';\n    instead = '';\n    where = '';\n  }\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(\n      '<deprecated> ' + \n      message\n      .replace(':name', name)\n      .replace(':instead', instead)\n      .replace(':where', where)\n    );\n  }\n};\n\nUtils.withDeprecatedNotice = function (info, fn, thisArg) {\n  return function () {\n    Utils.notifyDeprecated(info);\n    return fn && fn.apply(thisArg || this, arguments);\n  };\n};\n\n/**\n * Given the name of a property, resolves to the value. Works with namespacing\n * too. If first parameter is already a value that isn't a string it's returned\n * immediately.\n *\n * Examples:\n *  'SomeClass' => window.SomeClass || global.someClass\n *  'App.namespace.SomeClass' => window.App.namespace.SomeClass\n *\n * @param {String|Object} nameOrValue\n */\n\nUtils.resolveValue = function (nameOrValue) {\n  var global = Utils.global;\n  var parts;\n  var ptr;\n\n  if (_.isString(nameOrValue)) {\n    parts = nameOrValue.split('.')\n    ptr = global;\n    for (var i = 0; i < parts.length; i++) {\n      ptr = ptr[parts[i]];\n      if (!ptr)\n        return undefined;\n    }\n  } else {\n    ptr = nameOrValue;\n  }\n\n  // final position of ptr should be the resolved value\n  return ptr;\n};\n\nUtils.hasOwnProperty = function (obj, key) {\n  var prop = {}.hasOwnProperty;\n  return prop.call(obj, key);\n};\n\n/**\n * Don't mess with this function. It's exactly the same as the compiled\n * coffeescript mechanism. If you change it we can't guarantee that our code\n * will work when used with Coffeescript. One exception is putting in a runtime\n * check that both child and parent are of type Function.\n */\n\nUtils.inherits = function (child, parent) {\n  if (Utils.typeOf(child) !== '[object Function]')\n    throw new Error('First parameter to Utils.inherits must be a function');\n\n  if (Utils.typeOf(parent) !== '[object Function]')\n    throw new Error('Second parameter to Utils.inherits must be a function');\n\n  for (var key in parent) {\n    if (Utils.hasOwnProperty(parent, key))\n      child[key] = parent[key];\n  }\n\n  function ctor () {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  child.__super__ = parent.prototype;\n  return child;\n};\n\nUtils.toArray = function (obj) {\n  if (!obj)\n    return [];\n  else if (Utils.typeOf(obj) !== '[object Array]')\n    return [obj];\n  else\n    return obj;\n};\n\nUtils.typeOf = function (obj) {\n  if (obj && obj.typeName)\n    return obj.typeName;\n  else\n    return Object.prototype.toString.call(obj);\n};\n\nUtils.extend = function (Super, definition, onBeforeExtendPrototype) {\n  if (arguments.length === 1)\n    definition = Super;\n  else {\n    definition = definition || {};\n    definition.extend = Super;\n  }\n\n  return Utils.create(definition, {\n    onBeforeExtendPrototype: onBeforeExtendPrototype\n  });\n};\n\nUtils.create = function (definition, options) {\n  var Constructor\n    , extendFrom\n    , savedPrototype;\n\n  options = options || {};\n  definition = definition || {};\n\n  if (Utils.hasOwnProperty(definition, 'constructor'))\n    Constructor = definition.constructor;\n  else {\n    Constructor = function () {\n      if (Constructor.__super__ && Constructor.__super__.constructor)\n        return Constructor.__super__.constructor.apply(this, arguments);\n    }\n  }\n\n  extendFrom = definition.extend;\n\n  if (definition.extend) delete definition.extend;\n\n  var inherit = function (Child, Super, prototype) {\n    Utils.inherits(Child, Utils.resolveValue(Super));\n    if (prototype) _.extend(Child.prototype, prototype);\n  };\n\n  if (extendFrom) {\n    inherit(Constructor, extendFrom);\n  }\n\n  if (options.onBeforeExtendPrototype)\n    options.onBeforeExtendPrototype.call(Constructor, definition);\n\n  _.extend(Constructor.prototype, definition);\n\n  return Constructor;\n};\n\n/**\n * Assert that the given condition is truthy.\n *\n * @param {Boolean} condition The boolean condition to test for truthiness.\n * @param {String} msg The error message to show if the condition is falsy.\n */\n\nUtils.assert = function (condition, msg) {\n  if (!condition)\n    throw new Error(msg);\n};\n\nUtils.warn = function (condition, msg) {\n  if (!condition)\n    console && console.warn && console.warn(msg);\n};\n\nUtils.capitalize = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1, str.length);\n};\n\nUtils.upperCamelCase = function (str) {\n  var re = /_|-|\\./;\n\n  if (!str)\n    return '';\n\n  return _.map(str.split(re), function (word) {\n    return Utils.capitalize(word);\n  }).join('');\n};\n\nUtils.camelCase = function (str) {\n  var output = Utils.upperCamelCase(str);\n  output = output.charAt(0).toLowerCase() + output.slice(1, output.length);\n  return output;\n};\n\nUtils.pick = function (/* args */) {\n  var args = _.toArray(arguments)\n    , arg;\n  for (var i = 0; i < args.length; i++) {\n    arg = args[i];\n    if (typeof arg !== 'undefined' && arg !== null)\n      return arg;\n  }\n\n  return null;\n};\n\nUtils.StringConverters = {\n  'none': function(input) {\n    return input;\n  },\n\n  'upperCamelCase': function (input) {\n    return Utils.upperCamelCase(input);\n  },\n\n  'camelCase': function (input) {\n    return Utils.camelCase(input);\n  }\n};\n\nUtils.rewriteLegacyHooks = function (obj) {\n  var legacyToNew = IronRouter.LEGACY_HOOK_TYPES;\n\n  _.each(legacyToNew, function (newHook, oldHook) {\n    // only look on the immediate object, not its\n    // proto chain\n    if (_.has(obj, oldHook)) {\n      hasOld = true;\n      obj[newHook] = obj[oldHook];\n\n      Utils.notifyDeprecated({\n        where: 'RouteController',\n        name: oldHook,\n        instead: newHook\n      });\n    }\n  });\n};\n\n","/*\n * Inspiration and some code for the compilation of routes comes from pagejs.\n * The original has been modified to better handle hash fragments, and to store\n * the regular expression on the Route instance. Also, the resolve method has\n * been added to return a resolved path given a parameters object.\n */\n\nRoute = function (router, name, options) {\n  var path;\n\n  Utils.assert(router instanceof IronRouter);\n\n  Utils.assert(_.isString(name),\n    'Route constructor requires a name as the second parameter');\n\n  if (_.isFunction(options))\n    options = { handler: options };\n\n  options = this.options = options || {};\n  path = options.path || ('/' + name);\n\n  this.router = router;\n  this.originalPath = path;\n\n  if (_.isString(this.originalPath) && this.originalPath.charAt(0) !== '/')\n    this.originalPath = '/' + this.originalPath;\n\n  this.name = name;\n  this.where = options.where || 'client';\n  this.controller = options.controller;\n  this.action = options.action;\n\n  if (typeof options.reactive !== 'undefined')\n    this.isReactive = options.reactive;\n  else\n    this.isReactive = true;\n\n  Utils.rewriteLegacyHooks(this.options);\n\n  this.compile();\n};\n\nRoute.prototype = {\n  constructor: Route,\n\n  /**\n   * Compile the path.\n   *\n   *  @return {Route}\n   *  @api public\n   */\n\n  compile: function () {\n    var self = this;\n    var path;\n    var options = self.options;\n\n    this.keys = [];\n\n    if (self.originalPath instanceof RegExp) {\n      self.re = self.originalPath;\n    } else {\n      path = self.originalPath\n        .replace(/(.)\\/$/, '$1')\n        .concat(options.strict ? '' : '/?')\n        .replace(/\\/\\(/g, '(?:/')\n        .replace(/#/, '/?#')\n        .replace(\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,\n          function (match, slash, format, key, capture, optional){\n            self.keys.push({ name: key, optional: !! optional });\n            slash = slash || '';\n            return ''\n              + (optional ? '' : slash)\n              + '(?:'\n              + (optional ? slash : '')\n              + (format || '')\n              + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'\n              + (optional || '');\n          }\n        )\n        .replace(/([\\/.])/g, '\\\\$1')\n        .replace(/\\*/g, '(.*)');\n\n      self.re = new RegExp('^' + path + '$', options.sensitive ? '' : 'i');\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns an array of parameters given a path. The array may have named\n   * properties in addition to indexed values.\n   *\n   * @param {String} path\n   * @return {Array}\n   * @api public\n   */\n\n  params: function (path) {\n    if (!path)\n      return null;\n\n    var params = [];\n    var m = this.exec(path);\n    var queryString;\n    var keys = this.keys;\n    var key;\n    var value;\n\n    if (!m)\n      throw new Error('The route named \"' + this.name + '\" does not match the path \"' + path + '\"');\n\n    for (var i = 1, len = m.length; i < len; ++i) {\n      key = keys[i - 1];\n      value = typeof m[i] == 'string' ? decodeURIComponent(m[i]) : m[i];\n      if (key) {\n        params[key.name] = params[key.name] !== undefined ?\n          params[key.name] : value;\n      } else\n        params.push(value);\n    }\n\n    path = decodeURI(path);\n\n    queryString = path.split('?')[1];\n    if (queryString)\n      queryString = queryString.split('#')[0];\n\n    params.hash = path.split('#')[1];\n\n    if (queryString) {\n      _.each(queryString.split('&'), function (paramString) {\n        paramParts = paramString.split('=');\n        params[paramParts[0]] = decodeURIComponent(paramParts[1]);\n      });\n    }\n\n    return params;\n  },\n\n  normalizePath: function (path) {\n    var origin = Meteor.absoluteUrl();\n\n    path = path.replace(origin, '');\n\n    var queryStringIndex = path.indexOf('?');\n    path = ~queryStringIndex ? path.slice(0, queryStringIndex) : path;\n\n    var hashIndex = path.indexOf('#');\n    path = ~hashIndex ? path.slice(0, hashIndex) : path;\n\n    if (path.charAt(0) !== '/')\n      path = '/' + path;\n\n    return path;\n  },\n\n  /**\n   * Returns true if the path matches and false otherwise.\n   *\n   * @param {String} path\n   * @return {Boolean}\n   * @api public\n   */\n  test: function (path) {\n    return this.re.test(this.normalizePath(path));\n  },\n\n  exec: function (path) {\n    return this.re.exec(this.normalizePath(path));\n  },\n\n  resolve: function (params, options) {\n    var value;\n    var isValueDefined;\n    var result;\n    var wildCardCount = 0;\n    var path = this.originalPath;\n    var hash;\n    var query;\n    var isMissingParams = false;\n\n    options = options || {};\n    params = params || [];\n    query = options.query;\n    hash = options.hash && options.hash.toString();\n\n    if (path instanceof RegExp) {\n      throw new Error('Cannot currently resolve a regular expression path');\n    } else {\n      path = this.originalPath\n        .replace(\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,\n          function (match, slash, format, key, capture, optional, offset) {\n            slash = slash || '';\n            value = params[key];\n            isValueDefined = typeof value !== 'undefined';\n\n            if (optional && !isValueDefined) {\n              value = '';\n            } else if (!isValueDefined) {\n              isMissingParams = true;\n              return;\n            }\n\n            value = _.isFunction(value) ? value.call(params) : value;\n            var escapedValue = _.map(String(value).split('/'), function (segment) {\n              return encodeURIComponent(segment);\n            }).join('/');\n            return slash + escapedValue\n          }\n        )\n        .replace(\n          /\\*/g,\n          function (match) {\n            if (typeof params[wildCardCount] === 'undefined') {\n              throw new Error(\n                'You are trying to access a wild card parameter at index ' +\n                wildCardCount +\n                ' but the value of params at that index is undefined');\n            }\n\n            var paramValue = String(params[wildCardCount++]);\n            return _.map(paramValue.split('/'), function (segment) {\n              return encodeURIComponent(segment);\n            }).join('/');\n          }\n        );\n\n      if (_.isObject(query)) {\n        query = _.map(_.pairs(query), function (queryPart) {\n          return queryPart[0] + '=' + encodeURIComponent(queryPart[1]);\n        }).join('&');\n      }\n\n      if (query && query.length)\n        path = path + '?' + query;\n\n      if (hash) {\n        hash = encodeURI(hash.replace('#', ''));\n        path = query ?\n          path + '#' + hash : path + '/#' + hash;\n      }\n    }\n\n    // Because of optional possibly empty segments we normalize path here\n    path = path.replace(/\\/+/g, '/'); // Multiple / -> one /\n    path = path.replace(/^(.+)\\/$/g, '$1'); // Removal of trailing /\n\n    return isMissingParams ? null : path;\n  },\n\n  path: function (params, options) {\n    return this.resolve(params, options);\n  },\n\n  url: function (params, options) {\n    var path = this.path(params, options);\n    if (path[0] === '/')\n      path = path.slice(1, path.length);\n    return Meteor.absoluteUrl() + path;\n  },\n\n  getController: function (path, options) {\n    var self = this;\n    var handler;\n    var controllerClass;\n    var controller;\n    var action;\n    var routeName;\n\n    var resolveValue = Utils.resolveValue;\n    var toArray = Utils.toArray;\n\n    var findController = function (name) {\n      var controller = resolveValue(name);\n      if (typeof controller === 'undefined') {\n        throw new Error(\n          'controller \"' + name + '\" is not defined');\n      }\n\n      return controller;\n    };\n\n    options = _.extend({}, options, {\n      path: path,\n      params: this.params(path),\n      where: this.where,\n      action: this.action\n    });\n\n    // case 1: controller option is defined on the route\n    if (this.controller) {\n      controllerClass = _.isString(this.controller) ?\n        findController(this.controller) : this.controller;\n      controller = new controllerClass(this.router, this, options);\n      return controller;\n    }\n\n    // case 2: intelligently find the controller class in global namespace\n    routeName = this.name;\n\n    if (routeName) {\n      routeName = Router.convertRouteControllerName(routeName + 'Controller');\n      controllerClass = resolveValue(routeName);\n\n      if (controllerClass) {\n        controller = new controllerClass(this.router, this, options);\n        return controller;\n      }\n    }\n\n    // case 3: nothing found so create an anonymous controller\n    return new RouteController(this.router, this, options);\n  }\n};\n","RouteController = function (router, route, options) {\n  var self = this;\n\n  if (!(router instanceof IronRouter))\n    throw new Error('RouteController requires a router');\n\n  if (!(route instanceof Route))\n    throw new Error('RouteController requires a route');\n\n  options = this.options = options || {};\n\n  this.router = router;\n  this.route = route;\n\n  this.path = options.path || '';\n  this.params = options.params || [];\n  this.where = options.where || 'client';\n  this.action = options.action || this.action;\n\n  Utils.rewriteLegacyHooks(this.options);\n  Utils.rewriteLegacyHooks(this);\n};\n\nRouteController.prototype = {\n  constructor: RouteController,\n\n  /**\n   * Returns the value of a property, searching for the property in this lookup\n   * order:\n   *\n   *   1. RouteController options\n   *   2. RouteController prototype\n   *   3. Route options\n   *   4. Router options\n   */\n  lookupProperty: function (key) {\n    var value;\n\n    if (!_.isString(key))\n      throw new Error('key must be a string');\n\n    // 1. RouteController options\n    if (typeof (value = this.options[key]) !== 'undefined')\n      return value;\n\n    // 2. RouteController instance\n    if (typeof (value = this[key]) !== 'undefined')\n      return value;\n\n    var opts;\n    \n    // 3. Route options\n    opts = this.route.options;\n    if (opts && typeof (value = opts[key]) !== 'undefined')\n      return value;\n\n    // 4. Router options\n    opts = this.router.options;\n    if (opts && typeof (value = opts[key]) !== 'undefined')\n      return value;\n\n    // 5. Oops couldn't find property\n    return undefined;\n  },\n\n  runHooks: function (hookName, more, cb) {\n    var self = this;\n    var ctor = this.constructor;\n\n    if (!_.isString(hookName))\n      throw new Error('hookName must be a string');\n\n    if (more && !_.isArray(more))\n      throw new Error('more must be an array of functions');\n\n    var isPaused = false;\n\n    var lookupHook = function (nameOrFn) {\n      var fn = nameOrFn;\n\n      // if we already have a func just return it\n      if (_.isFunction(fn))\n        return fn;\n\n      // look up one of the out-of-box hooks like\n      // 'loaded or 'dataNotFound' if the nameOrFn is a\n      // string\n      if (_.isString(fn)) {\n        if (_.isFunction(Router.hooks[fn]))\n          return Router.hooks[fn];\n      }\n\n      // we couldn't find it so throw an error\n      throw new Error(\"No hook found named: \", nameOrFn);\n    }; \n\n    // concatenate together hook arrays from the inheritance\n    // heirarchy, starting at the top parent down to the child.\n    var collectInheritedHooks = function (ctor) {\n      var hooks = [];\n\n      if (ctor.__super__)\n        hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor));\n      \n      return Utils.hasOwnProperty(ctor.prototype, hookName) ?\n        hooks.concat(ctor.prototype[hookName]) : hooks;\n    };\n\n\n    // get a list of hooks to run in the following order:\n    // 1. RouteController option hooks\n    // 2. RouteController proto hooks (including inherited super to child)\n    // 3. RouteController object hooks\n    // 4. Router global hooks\n    // 5. Route option hooks\n    // 6. more\n\n    var toArray = Utils.toArray;\n    var routerHooks = this.router.getHooks(hookName, this.route.name);\n\n    var opts;\n    opts = this.route.options;\n    var routeOptionHooks = toArray(opts && opts[hookName]);\n\n    opts = this.options;\n    var optionHooks = toArray(opts && opts[hookName]);\n\n    var protoHooks = collectInheritedHooks(this.constructor);\n\n    var objectHooks;\n    // don't accidentally grab the prototype hooks!\n    // this makes sure the hook is on the object itself\n    // not on its constructor's prototype object.\n    if (_.has(this, hookName))\n      objectHooks = toArray(this[hookName])\n    else\n      objectHooks = [];\n\n    var allHooks = optionHooks\n      .concat(protoHooks)\n      .concat(objectHooks)\n      .concat(routeOptionHooks)\n      .concat(routerHooks)\n      .concat(more);\n\n    var isPaused = false;\n    var pauseFn = function () {\n      isPaused = true;\n    };\n\n    for (var i = 0, hook; hook = allHooks[i]; i++) {\n      var hookFn = lookupHook(hook);\n\n      if (!isPaused && !this.isStopped)\n        hookFn.call(self, pauseFn, i);\n    }\n\n    cb && cb.call(self, isPaused);\n    return isPaused;\n  },\n\n  action: function () {\n    throw new Error('not implemented');\n  },\n\n  stop: function (cb) {\n    return this._stopController(cb);\n  },\n\n  _stopController: function (cb) {\n    var self = this;\n\n    if (this.isStopped)\n      return;\n\n    self.isRunning = false;\n    self.runHooks('onStop');\n    self.isStopped = true;\n    cb && cb.call(self);\n  },\n\n  _run: function () {\n    throw new Error('not implemented');\n  }\n};\n\n_.extend(RouteController, {\n  /**\n   * Inherit from RouteController\n   *\n   * @param {Object} definition Prototype properties for inherited class.\n   */\n\n  extend: function (definition) {\n    Utils.rewriteLegacyHooks(definition);\n\n    return Utils.extend(this, definition, function (definition) {\n      var klass = this;\n\n      \n      /*\n        Allow calling a class method from javascript, directly in the subclass\n        definition.\n\n        Instead of this:\n          MyController = RouteController.extend({...});\n          MyController.before(function () {});\n\n        You can do:\n          MyController = RouteController.extend({\n            before: function () {}\n          });\n       \n        And in Coffeescript you can do:\n         MyController extends RouteController\n           @before function () {}\n       */\n    });\n  }\n});\n","IronRouter = function (options) {\n  var self = this;\n\n  this.configure(options);\n\n  /**\n   * The routes array which doubles as a named route index by adding\n   * properties to the array.\n   *\n   * @api public\n   */\n  this.routes = [];\n\n  /**\n   * Default name conversions for controller\n   * and template lookup.\n   */\n  this._nameConverters = {};\n  this.setNameConverter('Template', 'none');\n  this.setNameConverter('RouteController', 'upperCamelCase');\n\n  this._globalHooks = {};\n  _.each(IronRouter.HOOK_TYPES, function (type) {\n    self._globalHooks[type] = [];\n\n    // example:\n    //  self.onRun = function (hook, options) {\n    //    return self.addHook('onRun', hook, options);\n    //  };\n    self[type] = function (hook, options) {\n      return self.addHook(type, hook, options);\n    };\n  });\n\n  _.each(IronRouter.LEGACY_HOOK_TYPES, function (type, legacyType) {\n    self[legacyType] = function () {\n      Utils.notifyDeprecated({\n        where: 'Router',\n        name: legacyType,\n        instead: type\n      });\n\n      return self[type].apply(this, arguments);\n    }\n  });\n};\n\nIronRouter.HOOK_TYPES = [\n  'onRun',\n  'onData',\n  'onBeforeAction',\n  'onAfterAction',\n  'onStop',\n\n  // not technically a hook but we'll use it\n  // in a similar way. This will cause waitOn\n  // to be added as a method to the Router and then\n  // it can be selectively applied to specific routes\n  'waitOn'\n];\n\nIronRouter.LEGACY_HOOK_TYPES = {\n  'load': 'onRun',\n  'before': 'onBeforeAction',\n  'after': 'onAfterAction',\n  'unload': 'onStop'\n};\n\nIronRouter.prototype = {\n  constructor: IronRouter,\n\n  /**\n   * Configure instance with options. This can be called at any time. If the\n   * instance options object hasn't been created yet it is created here.\n   *\n   * @param {Object} options\n   * @return {IronRouter}\n   * @api public\n   */\n\n  configure: function (options) {\n    var self = this;\n\n    options = options || {};\n    this.options = this.options || {};\n    _.extend(this.options, options);\n\n    // e.g. before: fn OR before: [fn1, fn2]\n    _.each(IronRouter.HOOK_TYPES, function(type) {\n      if (self.options[type]) {\n        _.each(Utils.toArray(self.options[type]), function(hook) {\n          self.addHook(type, hook);\n        });\n\n        delete self.options[type];\n      }\n    });\n    \n    _.each(IronRouter.LEGACY_HOOK_TYPES, function(type, legacyType) {\n      if (self.options[legacyType]) {\n        // XXX: warning?\n        _.each(Utils.toArray(self.options[legacyType]), function(hook) {\n          self.addHook(type, hook);\n        });\n\n        delete self.options[legacyType];\n      }\n    });\n\n    if (options.templateNameConverter)\n      this.setNameConverter('Template', options.templateNameConverter);\n\n    if (options.routeControllerNameConverter)\n      this.setNameConverter('RouteController', options.routeControllerNameConverter);\n\n    return this;\n  },\n\n  convertTemplateName: function (input) {\n    var converter = this._nameConverters['Template'];\n    if (!converter)\n      throw new Error('No name converter found for Template');\n    return converter(input);\n  },\n\n  convertRouteControllerName: function (input) {\n    var converter = this._nameConverters['RouteController'];\n    if (!converter)\n      throw new Error('No name converter found for RouteController');\n    return converter(input);\n  },\n\n  setNameConverter: function (key, stringOrFunc) {\n    var converter;\n\n    if (_.isFunction(stringOrFunc))\n      converter = stringOrFunc;\n\n    if (_.isString(stringOrFunc))\n      converter = Utils.StringConverters[stringOrFunc];\n\n    if (!converter) {\n      throw new Error('No converter found named: ' + stringOrFunc);\n    }\n\n    this._nameConverters[key] = converter;\n    return this;\n  },\n\n  /**\n   *\n   * Add a hook to all routes. The hooks will apply to all routes,\n   * unless you name routes to include or exclude via `only` and `except` options\n   *\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'\n   * @param {Object} [options] Options to controll the hooks [optional]\n   * @param {Function} [hook] Callback to run\n   * @return {IronRouter}\n   * @api public\n   *\n   */\n\n  addHook: function(type, hook, options) {\n    options = options || {}\n\n    if (options.only)\n      options.only = Utils.toArray(options.only);\n    if (options.except)\n      options.except = Utils.toArray(options.except);\n\n    this._globalHooks[type].push({options: options, hook: hook});\n\n    return this;\n  },\n\n  /**\n   *\n   * Fetch the list of global hooks that apply to the given route name.\n   * Hooks are defined by the .addHook() function above.\n   *\n   * @param {String} [type] one of IronRouter.HOOK_TYPES\n   * @param {String} [name] the name of the route we are interested in\n   * @return {[Function]} [hooks] an array of hooks to run\n   * @api public\n   *\n   */\n\n  getHooks: function(type, name) {\n    var hooks = [];\n\n    _.each(this._globalHooks[type], function(hook) {\n      var options = hook.options;\n\n      if (options.except && _.include(options.except, name))\n        return;\n\n      if (options.only && ! _.include(options.only, name))\n        return;\n\n      hooks.push(hook.hook);\n    });\n\n    return hooks;\n  },\n\n\n  /**\n   * Convenience function to define a bunch of routes at once. In the future we\n   * might call the callback with a custom dsl.\n   *\n   * Example:\n   *  Router.map(function () {\n   *    this.route('posts');\n   *  });\n   *\n   *  @param {Function} cb\n   *  @return {IronRouter}\n   *  @api public\n   */\n\n  map: function (cb) {\n    Utils.assert(_.isFunction(cb),\n           'map requires a function as the first parameter');\n    cb.call(this);\n    return this;\n  },\n\n  /**\n   * Define a new route. You must name the route, but as a second parameter you\n   * can either provide an object of options or a Route instance.\n   *\n   * @param {String} name The name of the route\n   * @param {Object} [options] Options to pass along to the route\n   * @return {Route}\n   * @api public\n   */\n\n  route: function (name, options) {\n    var route;\n\n    Utils.assert(_.isString(name), 'name is a required parameter');\n\n    if (options instanceof Route)\n      route = options;\n    else\n      route = new Route(this, name, options);\n\n    this.routes[name] = route;\n    this.routes.push(route);\n    return route;\n  },\n\n  path: function (routeName, params, options) {\n    var route = this.routes[routeName];\n    Utils.warn(route,\n     'You called Router.path for a route named ' + routeName + ' but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.path(params, options);\n  },\n\n  url: function (routeName, params, options) {\n    var route = this.routes[routeName];\n    Utils.warn(route,\n      'You called Router.url for a route named \"' + routeName + '\" but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.url(params, options);\n  },\n\n  match: function (path) {\n    return _.find(this.routes, function(r) { return r.test(path); });\n  },\n    \n  dispatch: function (path, options, cb) {\n    var route = this.match(path);\n    \n    if (! route)\n      return this.onRouteNotFound(path, options);\n    \n    if (route.where !== (Meteor.isClient ? 'client' : 'server'))\n      return this.onUnhandled(path, options);\n    \n    var controller = route.getController(path, options);\n    this.run(controller, cb);\n  },\n\n  run: function (controller, cb) {\n    var self = this;\n    var where = Meteor.isClient ? 'client' : 'server';\n\n    Utils.assert(controller, 'run requires a controller');\n\n    // one last check to see if we should handle the route here\n    if (controller.where != where) {\n      self.onUnhandled(controller.path, controller.options);\n      return;\n    }\n\n    var run = function () {\n      self._currentController = controller;\n      // set the location\n      cb && cb(controller);\n      self._currentController._run();\n    };\n\n    // if we already have a current controller let's stop it and then\n    // run the new one once the old controller is stopped. this will add\n    // the run function as an onInvalidate callback to the controller's\n    // computation. Otherwse, just run the new controller.\n    if (this._currentController)\n      this._currentController._stopController(run);\n    else\n      run();\n  },\n\n  onUnhandled: function (path, options) {\n    throw new Error('onUnhandled not implemented');\n  },\n\n  onRouteNotFound: function (path, options) {\n    throw new Error('Oh no! No route found for path: \"' + path + '\"');\n  }\n};\n","RouteController = Utils.extend(RouteController, {\n  constructor: function () {\n    RouteController.__super__.constructor.apply(this, arguments);\n    this.request = this.options.request;\n    this.response = this.options.response;\n    this.next = this.options.next;\n\n    this._dataValue = this.data || {};\n\n    this.data = function (value) {\n      if (value)\n        this._dataValue = value;\n      else\n        return _.isFunction(this._dataValue) ? this._dataValue.call(this) : this._dataValue;\n    };\n  },\n\n  _run: function () {\n    var self = this\n      , args = _.toArray(arguments);\n\n    try {\n      // if we're already running, you can't call run again without\n      // calling stop first.\n      if (self.isRunning)\n        throw new Error(\"You called _run without first calling stop\");\n\n      self.isRunning = true;\n      self.isStopped = false;\n\n      var action = _.isFunction(self.action) ? self.action : self[self.action];\n      Utils.assert(action,\n        \"You don't have an action named \\\"\" + self.action + \"\\\" defined on your RouteController\");\n\n      this.runHooks('onRun');\n      this.runHooks('onBeforeAction');\n      action.call(this);\n      this.runHooks('onAfterAction');\n\n    } catch (e) {\n      console.error(e.toString());\n      this.response.end();\n    } finally {\n      this.response.end();\n    }\n  },\n\n  action: function () {\n    this.response.end();\n  }\n});\n","var connect = Npm.require('connect');\nvar Fiber = Npm.require('fibers');\n\nvar root = global;\n\nvar connectHandlers\n  , connect;\n\nif (typeof __meteor_bootstrap__.app !== 'undefined') {\n  connectHandlers = __meteor_bootstrap__.app;\n} else {\n  connectHandlers = WebApp.connectHandlers;\n}\n\nIronRouter = Utils.extend(IronRouter, {\n  constructor: function (options) {\n    var self = this;\n    IronRouter.__super__.constructor.apply(this, arguments);\n    Meteor.startup(function () {\n      setTimeout(function () {\n        if (self.options.autoStart !== false)\n          self.start();\n      });\n    });\n  },\n\n  start: function () {\n    connectHandlers\n      .use(connect.query())\n      .use(connect.bodyParser())\n      .use(_.bind(this.onRequest, this));\n  },\n\n  onRequest: function (req, res, next) {\n    var self = this;\n    Fiber(function () {\n      self.dispatch(req.url, {\n        request: req,\n        response: res,\n        next: next\n      });\n    }).run();\n  },\n\n  run: function (controller, cb) {\n    IronRouter.__super__.run.apply(this, arguments);\n    if (controller === this._currentController)\n      cb && cb(controller);\n  },\n\n  stop: function () {\n  },\n\n  onUnhandled: function (path, options) {\n    options.next();\n  },\n\n  onRouteNotFound: function (path, options) {\n    options.next();\n  }\n});\n\nRouter = new IronRouter;\n"]}