{"version":3,"file":"/packages/accounts-oauth.js","sources":["accounts-oauth/oauth_common.js","accounts-oauth/oauth_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,oB;;AAEA,kB;;AAEA,wD;AACA,uD;AACA,kD;AACA,4B;AACA,kD;AACA,wB;;AAEA,sB;AACA,+E;AACA,gF;AACA,gF;AACA,wB;AACA,yD;AACA,sD;AACA,G;AACA,E;;AAEA,2C;AACA,0B;AACA,E;;;;;;;;;;;;;;;;;;;ACvBA,qE;AACA,oD;AACA,kD;AACA,qB;AACA,qC;;AAEA,wB;AACA,4B;AACA,uE;AACA,mE;AACA,uE;AACA,6B;AACA,+C;AACA,K;;AAEA,sE;AACA,wE;;AAEA,gB;AACA,qE;AACA,qE;AACA,qE;AACA,qD;AACA,M;AACA,oE;AACA,iE;AACA,sD;AACA,yE;AACA,sE;AACA,qE;AACA,sB;AACA,M;AACA,mE;AACA,2B;AACA,qC;AACA,yD;AACA,oD;AACA,G;;AAEA,8B;AACA,qE;AACA,mB;AACA,iB;AACA,M;AACA,kH;AACA,G","sourcesContent":["Accounts.oauth = {};\n\nvar services = {};\n\n// Helper for registering OAuth based accounts packages.\n// On the server, adds an index to the user collection.\nAccounts.oauth.registerService = function (name) {\n  if (_.has(services, name))\n    throw new Error(\"Duplicate service: \" + name);\n  services[name] = true;\n\n  if (Meteor.server) {\n    // Accounts.updateOrCreateUserFromExternalService does a lookup by this id,\n    // so this should be a unique index. You might want to add indexes for other\n    // fields returned by your service (eg services.github.login) but you can do\n    // that in your app.\n    Meteor.users._ensureIndex('services.' + name + '.id',\n                              {unique: 1, sparse: 1});\n  }\n};\n\nAccounts.oauth.serviceNames = function () {\n  return _.keys(services);\n};\n","// Listen to calls to `login` with an oauth option set. This is where\n// users actually get logged in to meteor via oauth.\nAccounts.registerLoginHandler(function (options) {\n  if (!options.oauth)\n    return undefined; // don't handle\n\n  check(options.oauth, {\n    credentialToken: String,\n    // When an error occurs while retrieving the access token, we store\n    // the error in the pending credentials table, with a secret of\n    // null. The client can call the login method with a secret of null\n    // to retrieve the error.\n    credentialSecret: Match.OneOf(null, String)\n  });\n\n  var result = OAuth.retrieveCredential(options.oauth.credentialToken,\n                                        options.oauth.credentialSecret);\n\n  if (!result) {\n    // OAuth credentialToken is not recognized, which could be either\n    // because the popup was closed by the user before completion, or\n    // some sort of error where the oauth provider didn't talk to our\n    // server correctly and closed the popup somehow.\n    //\n    // We assume it was user canceled and report it as such, using a\n    // numeric code that the client recognizes (XXX this will get\n    // replaced by a symbolic error code at some point\n    // https://trello.com/c/kMkw800Z/53-official-ddp-specification). This\n    // will mask failures where things are misconfigured such that the\n    // server doesn't see the request but does close the window. This\n    // seems unlikely.\n    //\n    // XXX we want `type` to be the service name such as \"facebook\"\n    return { type: \"oauth\",\n             error: new Meteor.Error(\n               Accounts.LoginCancelledError.numericError,\n               \"No matching login attempt found\") };\n  }\n\n  if (result instanceof Error)\n    // We tried to login, but there was a fatal error. Report it back\n    // to the user.\n    throw result;\n  else\n    return Accounts.updateOrCreateUserFromExternalService(result.serviceName, result.serviceData, result.options);\n});\n"]}