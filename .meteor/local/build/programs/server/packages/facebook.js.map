{"version":3,"file":"/packages/facebook.js","sources":["facebook/facebook_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,c;;AAEA,6C;;;AAGA,4D;;AAEA,yC;AACA,yC;AACA,0C;;AAEA,qB;AACA,6B;AACA,wD;AACA,I;;AAEA,qC;AACA,wF;AACA,yD;AACA,wE;;AAEA,6C;AACA,gC;;AAEA,U;AACA,6B;AACA,6C;AACA,I;AACA,G;;AAEA,yC;AACA,6B;AACA,O;AACA,oB;AACA,gB;AACA,e;AACA,iB;AACA,G;AACA,E;;AAEA,gC;AACA,gB;AACA,4C;AACA,yC;AACA,kF;AACA,c;AACA,yE;;AAEA,sB;AACA,O;AACA,8B;AACA,+B;AACA,wD;AACA,iB;AACA,kC;AACA,oE;AACA,uC;AACA,0B;AACA,S;AACA,iB;AACA,iB;AACA,iG;AACA,6C;AACA,G;;AAEA,yD;AACA,mD;AACA,gC;AACA,4F;AACA,G;;AAEA,+D;AACA,2B;AACA,0D;AACA,kD;AACA,yC;;AAEA,uB;AACA,yE;AACA,uF;AACA,G;AACA,U;AACA,+B;AACA,wB;AACA,I;AACA,E;;AAEA,0C;AACA,O;AACA,sD;AACA,iD;AACA,iB;AACA,uF;AACA,6C;AACA,G;AACA,E;;AAEA,yD;AACA,mD;AACA,E","sourcesContent":["Facebook = {};\n\nvar querystring = Npm.require('querystring');\n\n\nOauth.registerService('facebook', 2, null, function(query) {\n\n  var response = getTokenResponse(query);\n  var accessToken = response.accessToken;\n  var identity = getIdentity(accessToken);\n\n  var serviceData = {\n    accessToken: accessToken,\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\n  };\n\n  // include all fields from facebook\n  // http://developers.facebook.com/docs/reference/login/public-profile-and-friend-list/\n  var whitelisted = ['id', 'email', 'name', 'first_name',\n      'last_name', 'link', 'username', 'gender', 'locale', 'age_range'];\n\n  var fields = _.pick(identity, whitelisted);\n  _.extend(serviceData, fields);\n\n  return {\n    serviceData: serviceData,\n    options: {profile: {name: identity.name}}\n  };\n});\n\n// checks whether a string parses as JSON\nvar isJSON = function (str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nvar getTokenResponse = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'facebook'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var responseContent;\n  try {\n    // Request an access token\n    responseContent = HTTP.get(\n      \"https://graph.facebook.com/oauth/access_token\", {\n        params: {\n          client_id: config.appId,\n          redirect_uri: Meteor.absoluteUrl(\"_oauth/facebook?close\"),\n          client_secret: config.secret,\n          code: query.code\n        }\n      }).content;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Facebook. \" + err.message),\n                   {response: err.response});\n  }\n\n  // If 'responseContent' parses as JSON, it is an error.\n  // XXX which facebook error causes this behvaior?\n  if (isJSON(responseContent)) {\n    throw new Error(\"Failed to complete OAuth handshake with Facebook. \" + responseContent);\n  }\n\n  // Success!  Extract the facebook access token and expiration\n  // time from the response\n  var parsedResponse = querystring.parse(responseContent);\n  var fbAccessToken = parsedResponse.access_token;\n  var fbExpires = parsedResponse.expires;\n\n  if (!fbAccessToken) {\n    throw new Error(\"Failed to complete OAuth handshake with facebook \" +\n                    \"-- can't find access token in HTTP response. \" + responseContent);\n  }\n  return {\n    accessToken: fbAccessToken,\n    expiresIn: fbExpires\n  };\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\"https://graph.facebook.com/me\", {\n      params: {access_token: accessToken}}).data;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Facebook. \" + err.message),\n                   {response: err.response});\n  }\n};\n\nFacebook.retrieveCredential = function(credentialToken) {\n  return Oauth.retrieveCredential(credentialToken);\n};\n"]}