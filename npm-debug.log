0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'fibers' ]
2 info using npm@1.1.65
3 info using node@v0.10.25
4 verbose read json /Users/jzellis/Projects/trustedcommunitylabs/timebank/package.json
5 verbose from cache /Users/jzellis/Projects/trustedcommunitylabs/timebank/package.json
6 verbose readDependencies using package.json deps
7 verbose cache add [ 'fibers', null ]
8 silly cache add name=undefined spec="fibers" args=["fibers",null]
9 verbose parsed url { protocol: null,
9 verbose parsed url   slashes: null,
9 verbose parsed url   auth: null,
9 verbose parsed url   host: null,
9 verbose parsed url   port: null,
9 verbose parsed url   hostname: null,
9 verbose parsed url   hash: null,
9 verbose parsed url   search: null,
9 verbose parsed url   query: null,
9 verbose parsed url   pathname: 'fibers',
9 verbose parsed url   path: 'fibers',
9 verbose parsed url   href: 'fibers' }
10 silly lockFile d3d85a22-fibers fibers
11 verbose lock fibers /Users/jzellis/.npm/d3d85a22-fibers.lock
12 silly lockFile d3d85a22-fibers fibers
13 verbose addNamed [ 'fibers', '' ]
14 verbose addNamed [ null, '' ]
15 silly lockFile 0ebffbee-fibers fibers@
16 verbose lock fibers@ /Users/jzellis/.npm/0ebffbee-fibers.lock
17 silly addNameRange { name: 'fibers', range: '', hasData: false }
18 verbose url raw fibers
19 verbose url resolving [ 'https://registry.npmjs.org/', './fibers' ]
20 verbose url resolved https://registry.npmjs.org/fibers
21 info trying registry request attempt 1 at 18:16:22
22 verbose etag "3EJ2JEPDWSCTBHONP4120HDC1"
23 http GET https://registry.npmjs.org/fibers
24 http 200 https://registry.npmjs.org/fibers
25 silly registry.get cb [ 200,
25 silly registry.get   { date: 'Sat, 15 Feb 2014 02:16:23 GMT',
25 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R16B)',
25 silly registry.get     etag: '"8XX4CUVGK89AQKSNIZN6MVPNG"',
25 silly registry.get     'content-type': 'application/json',
25 silly registry.get     via: '1.1 varnish',
25 silly registry.get     'cache-control': 'max-age=1',
25 silly registry.get     'content-length': '155740',
25 silly registry.get     'accept-ranges': 'bytes',
25 silly registry.get     age: '2939',
25 silly registry.get     'x-served-by': 'cache-v41-ASH, cache-lax1431-LAX',
25 silly registry.get     'x-cache': 'HIT, MISS',
25 silly registry.get     'x-cache-hits': '1, 0',
25 silly registry.get     'x-timer': 'S1392427643.911817074,VS0,VS95,VE106,VE2939210',
25 silly registry.get     vary: 'Accept',
25 silly registry.get     'keep-alive': 'timeout=10, max=50',
25 silly registry.get     connection: 'Keep-Alive' } ]
26 silly addNameRange number 2 { name: 'fibers', range: '', hasData: true }
27 silly addNameRange versions [ 'fibers',
27 silly addNameRange   [ '0.1.0',
27 silly addNameRange     '0.1.1',
27 silly addNameRange     '0.1.2',
27 silly addNameRange     '0.1.3',
27 silly addNameRange     '0.1.4',
27 silly addNameRange     '0.1.6',
27 silly addNameRange     '0.1.7',
27 silly addNameRange     '0.1.8',
27 silly addNameRange     '0.2.0',
27 silly addNameRange     '0.2.1',
27 silly addNameRange     '0.2.2',
27 silly addNameRange     '0.2.3',
27 silly addNameRange     '0.2.4',
27 silly addNameRange     '0.2.5',
27 silly addNameRange     '0.2.6',
27 silly addNameRange     '0.5.0',
27 silly addNameRange     '0.6.0',
27 silly addNameRange     '0.5.1',
27 silly addNameRange     '0.6.1',
27 silly addNameRange     '0.6.2',
27 silly addNameRange     '0.6.3',
27 silly addNameRange     '0.6.4',
27 silly addNameRange     '0.6.5',
27 silly addNameRange     '0.6.6',
27 silly addNameRange     '0.6.7',
27 silly addNameRange     '0.6.8',
27 silly addNameRange     '0.6.9',
27 silly addNameRange     '1.0.0',
27 silly addNameRange     '1.0.1' ] ]
28 verbose addNamed [ 'fibers', '1.0.1' ]
29 verbose addNamed [ '1.0.1', '1.0.1' ]
30 silly lockFile c99c8b50-fibers-1-0-1 fibers@1.0.1
31 verbose lock fibers@1.0.1 /Users/jzellis/.npm/c99c8b50-fibers-1-0-1.lock
32 verbose read json /Users/jzellis/.npm/fibers/1.0.1/package/package.json
33 silly lockFile c99c8b50-fibers-1-0-1 fibers@1.0.1
34 silly lockFile 0ebffbee-fibers fibers@
35 silly resolved [ { name: 'fibers',
35 silly resolved     version: '1.0.1',
35 silly resolved     description: 'Cooperative multi-tasking for Javascript',
35 silly resolved     keywords:
35 silly resolved      [ 'fiber',
35 silly resolved        'fibers',
35 silly resolved        'coroutine',
35 silly resolved        'thread',
35 silly resolved        'async',
35 silly resolved        'parallel',
35 silly resolved        'worker',
35 silly resolved        'future',
35 silly resolved        'promise' ],
35 silly resolved     homepage: 'https://github.com/laverdet/node-fibers',
35 silly resolved     author:
35 silly resolved      { name: 'Marcel Laverdet',
35 silly resolved        email: 'marcel@laverdet.com',
35 silly resolved        url: 'https://github.com/laverdet/' },
35 silly resolved     main: 'fibers',
35 silly resolved     scripts: { install: 'node ./build.js', test: 'node ./test.js' },
35 silly resolved     repository:
35 silly resolved      { type: 'git',
35 silly resolved        url: 'git://github.com/laverdet/node-fibers.git' },
35 silly resolved     engines: { node: '>=0.5.2' },
35 silly resolved     readme: 'fibers(1) -- Fiber support for v8 and Node\n==========================================\n\nINSTALLING\n----------\n\n### via npm\n* `npm install fibers`\n* You\'re done!\n\n### from source\n* `git clone git://github.com/laverdet/node-fibers.git`\n* `cd node-fibers`\n* `npm install`\n\nNote: node-fibers uses [node-gyp](https://github.com/TooTallNate/node-gyp) for\nbuilding. To manually invoke the build process, you can use `node-gyp rebuild`.\nThis will put the compiled extension in `build/Release/fibers.node`. However,\nwhen you do `require(\'fibers\')`, it will expect the module to be in, for\nexample, `bin/linux-x64-v8-3.11/fibers.node`. You can manually put the module\nhere every time you build, or you can use the included build script. Either\n`npm install` or `node build -f` will do this for you. If you are going to be\nhacking on node-fibers, it may be worthwhile to first do `node-gyp configure`\nand then for subsequent rebuilds you can just do `node-gyp build` which will\nbe faster than a full `npm install` or `node-gyp rebuild`.\n\n### important!\nIt\'s recommended that you use node 0.6.18 or higher with node-fibers. Using\nother versions may lead to instability during high loads.\n\n### using windows 8?\nWindows 8 is a beta operating system and you may have issues with fibers. To use\nfibers in Windows 8 you may need to run node.exe in Windows 7 compatibility\nmode. Once Windows 8 is released this issue will be revisited. See gh-70 for\nmore information.\n\n### other notes\nUnlike most NodeJS projects, node-fibers is a C++ project. Some extra work is\nrequired to compile node-fibers, but pretty much every platform is supported\nin some way. Binary distributions in 32 and 64-bit forms are provided in npm for\nLinux, OS X, and Windows (special thanks to\n[Jeroen Janssen](https://github.com/japj) for his work on fibers in Windows).\n\nSupport for Solaris, FreeBSD, and OpenBSD is provided by compiling the extension\non your system during install time via\n[node-gyp](https://github.com/TooTallNate/node-gyp). If your operating system\nisn\'t listed here you may have luck copying the build process for one of the\nother OS\'s, assuming you are running a POSIX-like OS.\n\nnode 0.6.x is required to run this release of node-fibers. Older versions of\nnode (0.4.x) are supported in older releases of node-fibers. See the 0.5.x\nbranch of node-fibers for documentation.\n\n\nEXAMPLES\n--------\n\nThe examples below describe basic use of `Fiber`, but note that it is **not\nrecommended** to use `Fiber` without an abstraction in between your code and\nfibers. See "FUTURES" below for additional information.\n\n### Sleep\nThis is a quick example of how you can write sleep() with fibers. Note that\nwhile the sleep() call is blocking inside the fiber, node is able to handle\nother events.\n\n\t$ cat sleep.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nfunction sleep(ms) {\n\tvar fiber = Fiber.current;\n\tsetTimeout(function() {\n\t\tfiber.run();\n\t}, ms);\n\tFiber.yield();\n}\n\nFiber(function() {\n\tconsole.log(\'wait... \' + new Date);\n\tsleep(1000);\n\tconsole.log(\'ok... \' + new Date);\n}).run();\nconsole.log(\'back in main\');\n```\n\n\t$ node sleep.js\n\twait... Fri Jan 21 2011 22:42:04 GMT+0900 (JST)\n\tback in main\n\tok... Fri Jan 21 2011 22:42:05 GMT+0900 (JST)\n\n\n### Incremental Generator\nYielding execution will resume back in the fiber right where you left off. You\ncan also pass values back and forth through yield() and run(). Again, the node\nevent loop is never blocked while this script is running.\n\n\t$ cat generator.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nvar inc = Fiber(function(start) {\n\tvar total = start;\n\twhile (true) {\n\t\ttotal += Fiber.yield(total);\n\t}\n});\n\nfor (var ii = inc.run(1); ii <= 10; ii = inc.run(1)) {\n\tconsole.log(ii);\n}\n```\n\n\t$ node generator.js\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\n\n### Fibonacci Generator\nExpanding on the incremental generator above, we can create a generator which\nreturns a new Fibonacci number with each invocation. You can compare this with\nthe [ECMAScript Harmony\nGenerator](http://wiki.ecmascript.org/doku.php?id=harmony:generators) Fibonacci\nexample.\n\n\t$ cat fibonacci.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\n// Generator function. Returns a function which returns incrementing\n// Fibonacci numbers with each call.\nfunction Fibonacci() {\n\t// Create a new fiber which yields sequential Fibonacci numbers\n\tvar fiber = Fiber(function() {\n\t\tFiber.yield(0); // F(0) -> 0\n\t\tvar prev = 0, curr = 1;\n\t\twhile (true) {\n\t\t\tFiber.yield(curr);\n\t\t\tvar tmp = prev + curr;\n\t\t\tprev = curr;\n\t\t\tcurr = tmp;\n\t\t}\n\t});\n\t// Return a bound handle to `run` on this fiber\n\treturn fiber.run.bind(fiber);\n}\n\n// Initialize a new Fibonacci sequence and iterate up to 1597\nvar seq = Fibonacci();\nfor (var ii = seq(); ii <= 1597; ii = seq()) {\n\tconsole.log(ii);\n}\n```\n\n\t$ node fibonacci.js\n\t0\n\t1\n\t1\n\t2\n\t3\n\t5\n\t8\n\t13\n\t21\n\t34\n\t55\n\t89\n\t144\n\t233\n\t377\n\t610\n\t987\n\t1597\n\n\n### Basic Exceptions\nFibers are exception-safe; exceptions will continue travelling through fiber\nboundaries:\n\n\t$ cat error.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nvar fn = Fiber(function() {\n\tconsole.log(\'async work here...\');\n\tFiber.yield();\n\tconsole.log(\'still working...\');\n\tFiber.yield();\n\tconsole.log(\'just a little bit more...\');\n\tFiber.yield();\n\tthrow new Error(\'oh crap!\');\n});\n\ntry {\n\twhile (true) {\n\t\tfn.run();\n\t}\n} catch(e) {\n\tconsole.log(\'safely caught that error!\');\n\tconsole.log(e.stack);\n}\nconsole.log(\'done!\');\n```\n\n\t$ node error.js\n\tasync work here...\n\tstill working...\n\tjust a little bit more...\n\tsafely caught that error!\n\tError: oh crap!\n\t\t\tat error.js:11:9\n\tdone!\n\n\nFUTURES\n-------\n\nUsing the `Fiber` class without an abstraction in between your code and the raw\nAPI is **not recommended**. `Fiber` is meant to implement the smallest amount of\nfunctionality in order make possible many different programming patterns. This\nmakes the `Fiber` class relatively lousy to work with directly, but extremely\npowerful when coupled with a decent abstraction. There is no right answer for\nwhich abstraction is right for you and your project. Included with `node-fibers`\nis an implementation of "futures" which is fiber-aware. Usage of this library\nis documented below. There are several other externally-maintained options\nwhich can be found on the [wiki](https://github.com/laverdet/node-fibers/wiki).\nYou **should** feel encouraged to be creative with fibers and build a solution\nwhich works well with your project. For instance, `Future` is not a good\nabstraction to use if you want to build a generator function (see Fibonacci\nexample above).\n\nUsing `Future` to wrap existing node functions. At no point is the node event\nloop blocked:\n\n\t$ cat ls.js\n\n```javascript\nvar Future = require(\'fibers/future\'), wait = Future.wait;\nvar fs = require(\'fs\');\n\n// This wraps existing functions assuming the last argument of the passed\n// function is a callback. The new functions created immediately return a\n// future and the future will resolve when the callback is called (which\n// happens behind the scenes).\nvar readdir = Future.wrap(fs.readdir);\nvar stat = Future.wrap(fs.stat);\n\nFiber(function() {\n\t// Get a list of files in the directory\n\tvar fileNames = readdir(\'.\').wait();\n\tconsole.log(\'Found \'+ fileNames.length+ \' files\');\n\n\t// Stat each file\n\tvar stats = [];\n\tfor (var ii = 0; ii < fileNames.length; ++ii) {\n\t\tstats.push(stat(fileNames[ii]));\n\t}\n\twait(stats);\n\n\t// Print file size\n\tfor (var ii = 0; ii < fileNames.length; ++ii) {\n\t\tconsole.log(fileNames[ii]+ \': \'+ stats[ii].get().size);\n\t}\n}).run();\n```\n\n\t$ node ls.js \n\tFound 11 files\n\tbin: 4096\n\tfibers.js: 1708\n\t.gitignore: 37\n\tREADME.md: 8664\n\tfuture.js: 5833\n\t.git: 4096\n\tLICENSE: 1054\n\tsrc: 4096\n\tls.js: 860\n\tMakefile: 436\n\tpackage.json: 684\n\n\nThe future API is designed to make it easy to move between classic\ncallback-style code and fiber-aware waiting code:\n\n\t$ cat sleep.js\n\n```javascript\nvar Future = require(\'fibers/future\'), wait = Future.wait;\n\n// This function returns a future which resolves after a timeout. This\n// demonstrates manually resolving futures.\nfunction sleep(ms) {\n\tvar future = new Future;\n\tsetTimeout(function() {\n\t\tfuture.return();\n\t}, ms);\n\treturn future;\n}\n\n// You can create functions which automatically run in their own fiber and\n// return futures that resolve when the fiber returns (this probably sounds\n// confusing.. just play with it to understand).\nvar calcTimerDelta = function(ms) {\n\tvar start = new Date;\n\tsleep(ms).wait();\n\treturn new Date - start;\n}.future(); // <-- important!\n\n// And futures also include node-friendly callbacks if you don\'t want to use\n// wait()\ncalcTimerDelta(2000).resolve(function(err, val) {\n\tconsole.log(\'Set timer for 2000ms, waited \'+ val+ \'ms\');\n});\n```\n\n\t$ node sleep.js\n\tSet timer for 2000ms, waited 2009ms\n\n\nAPI DOCUMENTATION\n-----------------\nFiber\'s definition looks something like this:\n\n```javascript\n/**\n * Instantiate a new Fiber. You may invoke this either as a function or as\n * a constructor; the behavior is the same.\n *\n * When run() is called on this fiber for the first time, `fn` will be\n * invoked as the first frame on a new stack. Execution will continue on\n * this new stack until `fn` returns, or Fiber.yield() is called.\n *\n * After the function returns the fiber is reset to original state and\n * may be restarted with another call to run().\n */\nfunction Fiber(fn) {\n\t[native code]\n}\n\n/**\n * `Fiber.current` will contain the currently-running Fiber. It will be\n * `undefined` if there is no fiber (i.e. the main stack of execution).\n *\n * See "Garbage Collection" for more information on responsible use of\n * `Fiber.current`.\n */\nFiber.current = undefined;\n\n/**\n * `Fiber.yield()` will halt execution of the current fiber and return control\n * back to original caller of run(). If an argument is supplied to yield(),\n * run() will return that value.\n *\n * When run() is called again, yield() will return.\n *\n * Note that this function is a global to allow for correct garbage\n * collection. This results in no loss of functionality because it is only\n * valid to yield from the currently running fiber anyway.\n *\n * Note also that `yield` is a reserved word in Javascript. This is normally\n * not an issue, however some code linters may complain. Rest assured that it\n * will run fine now and in future versions of Javascript.\n */\nFiber.yield = function(param) {\n\t[native code]\n}\n\n/**\n * run() will start execution of this Fiber, or if it is currently yielding,\n * it will resume execution. If an argument is supplied, this argument will\n * be passed to the fiber, either as the first parameter to the main\n * function [if the fiber has not been started] or as the return value of\n * yield() [if the fiber is currently yielding].\n *\n * This function will return either the parameter passed to yield(), or the\n * returned value from the fiber\'s main function.\n */\nFiber.prototype.run = function(param) {\n\t[native code]\n}\n\n/**\n * reset() will terminate a running Fiber and restore it to its original\n * state, as if it had returned execution.\n *\n * This is accomplished by causing yield() to throw an exception, and any\n * futher calls to yield() will also throw an exception. This continues\n * until the fiber has completely unwound and returns.\n *\n * If the fiber returns a value it will be returned by reset().\n *\n * If the fiber is not running, reset() will have no effect.\n */\nFiber.prototype.reset = function() {\n\t[native code]\n}\n\n/**\n * throwInto() will cause a currently yielding fiber\'s yield() call to\n * throw instead of return gracefully. This can be useful for notifying a\n * fiber that you are no longer interested in its task, and that it should\n * give up.\n *\n * Note that if the fiber does not handle the exception it will continue to\n * bubble up and throwInto() will throw the exception right back at you.\n */\nFiber.prototype.throwInto = function(exception) {\n\t[native code]\n}\n```\n\nGARBAGE COLLECTION\n------------------\n\nIf you intend to build generators, iterators, or "lazy lists", you should be\naware that all fibers must eventually unwind. This is implemented by causing\nyield() to throw unconditionally when the library is trying to unwind your\nfiber-- either because reset() was called, or all handles to the fiber were lost\nand v8 wants to delete it.\n\nSomething like this will, at some point, cause an infinite loop in your\napplication:\n\n```javascript\nvar fiber = Fiber(function() {\n\twhile (true) {\n\t\ttry {\n\t\t\tFiber.yield();\n\t\t} catch(e) {}\n\t}\n});\nfiber.run();\n```\n\nIf you either call reset() on this fiber, or the v8 garbage collector decides it\nis no longer in use, the fiber library will attempt to unwind the fiber by\ncausing all calls to yield() to throw. However, if you catch these exceptions\nand continue anyway, an infinite loop will occur.\n\nThere are other garbage collection issues that occur with misuse of fiber\nhandles. If you grab a handle to a fiber from within itself, you should make\nsure that the fiber eventually unwinds. This application will leak memory:\n\n```javascript\nvar fiber = Fiber(function() {\n\tvar that = Fiber.current;\n\tFiber.yield();\n}\nfiber.run();\nfiber = undefined;\n```\n\nThere is no way to get back into the fiber that was started, however it\'s\nimpossible for v8\'s garbage collector to detect this. With a handle to the fiber\nstill outstanding, v8 will never garbage collect it and the stack will remain in\nmemory until the application exits.\n\nThus, you should take care when grabbing references to `Fiber.current`.\n',
35 silly resolved     readmeFilename: 'README.md',
35 silly resolved     _id: 'fibers@1.0.1',
35 silly resolved     _from: 'fibers' } ]
36 info install fibers@1.0.1 into /Users/jzellis/Projects/trustedcommunitylabs/timebank
37 info installOne fibers@1.0.1
38 error TypeError: Arguments to path.resolve must be strings
38 error     at Object.exports.resolve (path.js:313:15)
38 error     at Object.exports.relative (path.js:370:20)
38 error     at installOne_ (/usr/local/lib/node_modules/npm/lib/install.js:693:26)
38 error     at installOne (/usr/local/lib/node_modules/npm/lib/install.js:621:3)
38 error     at /usr/local/lib/node_modules/npm/lib/install.js:508:9
38 error     at /usr/local/lib/node_modules/npm/node_modules/slide/lib/async-map.js:54:35
38 error     at Array.forEach (native)
38 error     at /usr/local/lib/node_modules/npm/node_modules/slide/lib/async-map.js:54:11
38 error     at Array.forEach (native)
38 error     at asyncMap (/usr/local/lib/node_modules/npm/node_modules/slide/lib/async-map.js:53:8)
39 error If you need help, you may report this log at:
39 error     <http://github.com/isaacs/npm/issues>
39 error or email it to:
39 error     <npm-@googlegroups.com>
40 error System Darwin 12.5.0
41 error command "node" "/usr/local/bin/npm" "install" "fibers"
42 error cwd /Users/jzellis/Projects/trustedcommunitylabs/timebank
43 error node -v v0.10.25
44 error npm -v 1.1.65
45 verbose exit [ 1, true ]
